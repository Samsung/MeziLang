
import java.util.List
import java.util.*

class AbsGraphDfs
{
	static fn findmax(edge:List)
	{
		size = edge.size()
		max = 0
		for( i = 0 ; i < size ; i++)
			if( int<-edge.get(i) > max ) max = int<-edge.get(i)
		return max
	}

	static fn const_graph(edge:List)
	{
		gr_size = findmax(edge) + 1
		gr = int[gr_size][gr_size]
		
		v1 = 0, v2 = 0
		
		for( i = 0 ; i < edge.size() ; i+=2 )
		{
			v1 = int<- edge.get(i)
			v2 = int<- edge.get(i+1)
			gr[v1][v2] = 1
			gr[v2][v1] = 1
		}
		
		return gr
	}


	static fn dfs(gr:int[][], st_vertex:int)
	{
		visit = int[gr.length]
		stack = LinkedList()

		stack.push(st_vertex)
		visit[st_vertex] = 1
		
		for( ; stack.size() != 0 ; )
		{
			c_vertex = int<- stack.pop()
			System.out.print(" visit(" + c_vertex+")")
			
			for( i = gr[c_vertex].length -1 ; i >= 1 ; i--)
			{
				if( i == c_vertex) continue
							
				if( gr[c_vertex][i] == 1 ) // adjacent vertex
				{
					if( visit[ i ] == 0 ) // not visited
					{
						stack.push( i )
						visit[i] = 1
					}
				}
			} 		
		}
		System.out.println()
	}

	

	
	static fn main(args:String[])
	{
		/* graph
	                (1)
	               /   \
	            (2)     (3)
	            /  \      | 
	          (4)  (5)    |
	             \  |    /
	              (6)---/ 
		*/ 
		
		gr = const_graph( { 1 2, 1 3, 2 4, 2 5, 4 6, 5 6, 6 7, 3 7 }.toList() )
		
		dfs( gr, 1 )
	
	}

}