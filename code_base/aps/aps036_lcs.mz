


class AbsLcs // Longest Common Sub Sequence
{

	// return the length of LCS
	static fn lcs_len(x:char[], y:char[]) 
	{
		// 'int' array might be initialized with '0'	
		memo = int[x.length][y.length]

		for( i = 0; i < x.length ; i++ )
		{
			for( j = 0 ; j < y.length ; j++ )
			{
				if( i == 0 || j == 0 )
				{
					if( x[i] == y[j] ) memo[i][j] = 1
					continue
				}
		
				if( x[i] == y[j] )
					memo[i][j] = memo[i-1][j-1] + 1  
				else
				{
					v1 = memo[i-1][j]
					v2 = memo[i][j-1]
					
					// Branch Frame Checking Bug(workaround applied)
					//memo[i][j] = if( v1 > v2 ) v1 else v2
					if( v1 > v2 )
						memo[i][j] = v1
					else
						memo[i][j] = v2
					
				}	
			}
		}

		return memo[x.length-1][y.length-1]  // return lcs length
	}


	static fn main(args:String[])
	{
		/* // LCS memo
            R B K B G R B G G G
          -------------------------- 
		R | 0 0 0 1 0 1 0 0 0 0
		B | 1 1 1 1 2 2 2 1 1 1
		K | 0 1 2 2 2 2 3 3 3 3
		B | 1 1 2 2 3 3 3 4 4 4
		G | 0 2 2 2 3 3 3 4 5 5
		R | 0 2 2 3 3 4 4 4 5 5
		B | 1 2 2 3 4 4 4 5 5 6
		G | 0 2 2 3 4 4 4 5 6 6
		G | 0 1 2 3 4 4 4 5 6 6
		G | 0 1 2 3 4 4 4 5 6 6
		*/

		a = ("RBKBGRBGGG").toCharArray()
		b = "BGKRBRKBGB".toCharArray() 
		
		// lcs : BKBRBG (length: 6 )
		System.out.println( lcs_len(a, b) )
	}

}

