
/*
class Closure
{
	static fn main( args : String[] ) {
	
		func_var = fn f_closure(a:int, b:int) := a + b
		c = func_var(1, 2)
		System.out.println("c="+c)
	}	
}
*/

/*
class Closure
{
	static fn main( args : String[] ) {
	
		func_var = fn (a:int, b:int) := a + b
		
		c = func_var(1, 2)
		System.out.println("c="+c)
	}	
}
*/

/*
class Closure
{
	static fn main( args : String[] ) {
	
		c = ( fn (a:int, b:int) := a + b )( 1, 2)
		
		System.out.println("c="+c)
	}	
}
*/

/*

	class Closure
	{
		static fn func_generator( ) {
			funcvar = fn (a:int, b:int) := a + b
			return funcvar
		}

		static fn main( args : String[] ) {
		
			func_var = func_generator()
			c = func_var(1, 2)
			System.out.println("c="+c)
		}	
	}

*/

class Closure
{
	static fn print_num(  log_func: f(int)->void ) {
		for( i = 10 ; i < 20 ; i++) log_func(i)
	}

	static fn main( args : String[] ) {
		print_num ( fn(a:int) { System.out.print(" ,"+a) } )
		System.out.println()
		print_num ( fn(a:int) { System.out.print(" ,0x"+ Integer.toHexString(a)) } )
	}	
}


/*
class Closure
{
	static fn func_generator( func: f(int)->int ) {
		
		ret_func = fn (a:int)->int {
			sum = 0
			for( i = 0 ; i < a ; i++) 
				sum += func(i)
			return sum
		}
		
		return ret_func
	}

	static fn main( args : String[] ) {
	
		func_var = func_generator( fn(a:int) := a )
		c = func_var( 10 )
		System.out.println("c="+c)
		
		func_var = func_generator( fn(a:int) := a * a )
		c = func_var( 10 )
		System.out.println("c="+c)
		
	}	
}
*/



