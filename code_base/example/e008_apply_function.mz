/*
class ApplyFunc
{

	static fn main(args:String[])
	{
		// apply type 1 : function apply when function assignment
		fvar : f(int, int)->int = fn (a, b) := a + b
		c = fvar(1,1)
		System.out.println(c)
	}
}
*/

/*
class ApplyFunc
{

	static fn apply_foo(fvar: f(int, int)->int, a:int, b:int) := fvar(a, b)
	
	static fn main(args:String[])
	{
		// apply type 2 : function apply when function as a parameter		
		c = apply_foo( fn (a, b) := a + b, 1, 2 )
		System.out.println(c) 
	}
}
*/
	
/*
class ApplyFunc
{

	static fn main(args:String[])
	{
		// apply type 3-1 : function apply when function invoke		
		cint = ( fn(a, b) := a + b ) (5, 5) 
		System.out.println("cint="+cint)
	}
}	
*/

/*
class ApplyFunc
{

	static fn main(args:String[])
	{
		// apply closure function to 
		// invoking parameter '5(int), 5(int)' 		
		c = ( fn(a, b) := a + b ) (5, 5) 
	}

}	

class ApplyFunc
{	

	static fn apply_foo2(a, b) := a + b 
	
	static fn main(args:String[])
	{
		// apply member function to 
		// invoking parameter '10(int), 20(int)' 	
		c = apply_foo2(10, 20)
	}

}
*/


	
class ApplyFunc
{	
	static fn apply_foo2(a, b) := a + b 
	
	static fn main(args:String[])
	{
		// apply type 3-2 : function apply when function invoke		
		c = apply_foo2(10, 20)
		System.out.println(c)
	}
}



