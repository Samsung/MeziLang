
import java.util.function.Consumer
import java.util.Comparator


class Dish {
	name:String
	vegetarian:boolean
	calory:int

	fn Dish(name:String, vegetarian:boolean, calory:int)
	{
		this.name = name
		this.vegetarian = vegetarian
		this.calory = calory
	}
	
	fn toString() := "name["+name+"] veg["+vegetarian+"] cal["+calory+"]"
	
}


class StreamTest
{

	fn stream_op_test()->boolean 
	{

		System.out.println("# stream_op_test")


		System.out.println("# For each")
		
			c : Consumer = fn (arg:Object) := System.out.print(""+arg+",") 
			
			{ 1 2 3 4 5 }.forEach( c )
			System.out.println()
	
	
			{ 1 2 3 4 5 }.
				forEach( 
					fn(arg:Object) := 
						System.out.print(""+arg+",") 
				)
				
			System.out.println()



		System.out.println("# Creating Dishes")
		
			menu = { 
						Dish("Noodle1", true, 100)
						Dish("Noodle2", true, 200)
						Dish("Noodle3", true, 300)
						Dish("Noodle4", true, 400)
						Dish("Streak1", false, 100)
						Dish("Streak2", false, 200)
						Dish("Streak3", false, 300)
						Dish("Streak4", false, 400)
	
				   }.toList()
			
	
			menu.stream().forEach( fn(arg:Object) := System.out.println(arg)  )
			
			menu.stream().forEach( fn(arg:Object) := System.out.println(arg)  )
		
		
		
		
		System.out.println("# filtering & sort")
		
			menu.stream().
					filter( fn(arg:Object) := (Dish<-arg).calory < 300 	).
						sorted( Comparator.comparing( fn(arg:Object) := Integer( (Dish<-arg).calory )) ).
							forEach( fn(arg:Object) := System.out.println(arg) )

		System.out.println("# map")

			menu.stream().
					filter( fn(arg:Object) := (Dish<-arg).calory < 300 	).
						sorted( Comparator.comparing( fn(arg:Object) := Integer( (Dish<-arg).calory )) ).
							map( fn(arg:Object) := (Dish<-arg).name ).
								forEach( fn(arg:Object) := System.out.println(arg) )

		System.out.println("# disticnt")

		{ 1 2 1 3 3 2 4 }.
					filter( fn(arg:Object) := (Integer<-arg) % 2 == 0 ).
						distinct().
							forEach( fn(arg:Object) := System.out.println(arg) )

		System.out.println("# reduce")

		
		sum = { 1 2 1 3 3 2 4 }.
				reduce( 0, fn(a:Object, b:Object) := (Integer<-a) + (Integer<-b) )
	
		System.out.println("sum="+sum)

		return true
	}


	fn test()->boolean {
		if( ! stream_op_test() ) return false
		return true
	}
	


}




class StreamGrammarTest {

	static fn main(args: String[] ) {
	
		System.out.println("\n\n### StreamGrammarTest")
	
		stream_t = StreamTest()
		
        stream_t.test()	
	}


	static fn expect(str: String, rslt: int, expect:int) 
	- throws : Exception
	{
	
		System.out.println(str + rslt + " (expect: " + expect + ")")
		
	    if (rslt != expect) {
			throw Exception("--Test Failed")
      	}
	}
	
	
	static fn expect(str:String, rslt:boolean, expect:boolean) 
	- throws : Exception
	{

		System.out.println(str + rslt + " (expect: " + expect + ")")
		
	    if (rslt != expect) {
			throw Exception("--Test Failed")
      	}
	} 
	

	static fn expect(str:String, rslt:String, expect:String)
	- throws : Exception
	{
		System.out.println(str + rslt + " (expect: " + expect + ")")
		
	    if (!rslt.equals(expect)) {
			throw Exception("--Test Failed")
      	}
	} 
	

}

