
import java.util.LinkedList
import java.util.List
import java.io.*
import compilertest.grammar.*


class TestSubSubSub {
	i : int
	l : long
	s : String
}

class TestSubSub {
	i : int
	s : String
	c : TestSubSubSub
	c_i : int

	fn TestSubSub() { }

	fn TestSubSub(a:int) { c_i = a }

}


class TestSub {
	i : int
	s : String
	c : TestSubSub
	d : TestSub


	fn plus(a:int, b:int, c:int)->int
	{
		var d : int = a + b + c
		return d
	}

	fn plus( a : int, b : int) -> int
	{
		return a + b
	}

	fn str_plus(a:String , b:String)->String
	{
		return a + b
	}

}



class ListEle
{
	c:int
	next:ListEle
	fn ListEle(a:int) { 
		c = a 
		next = null
	}
	//fn ListEle(a:int) := c = a // constructor does not support one expression form
}


class ListCont {

	l:java.util.LinkedList
	b: TestSubSub

	fn ListCont() {
		l = java.util.LinkedList()
		b = TestSubSub(127)
	}

	fn +(a:int)->boolean {
		l.add( ListEle(a) )
		return true
	}

	fn -(a:int)->ListEle {
		return ListEle<- l.get( a )
	}
}




class Test {

	m:int
	m2:int

	fn referencing_stack(a:int, b:int)->int
	{
		{
			e:int = a + b

			e =
				a + b

			e =
				a +
					b

			return e
		}
	}

	fn referencing_stack2(a:int, b:int)->int
	{
		d:int = 10
		e:int = 0
		{
			//e:int = 0 // it may create error
			e = a + b + d
		}
		return e
	}


	fn referencing(a:int)->TestSub
	{

		sub:TestSub = TestSub()
		sub.i = a

		sub2:TestSubSub = TestSubSub()
		sub.c = sub2

		sub.c.i = 100 + sub.i

		sub.c.c = TestSubSubSub()
		sub.c.c.i = 
			1000 + sub.c.i

		m = 10000 + 
			sub.c.c.i

		return sub
	}

	fn access_resolved_class_member(a:int)->int
	{
		b : mezi.test.TestClass = mezi.test.TestClass(a) // Resolved Class(Non Building Class)

		b =
			mezi.
				test.
					TestClass(
								a)

		c : mezi.test.TestClassSub = mezi.test.TestClassSub(); // Resolved Class(Non Building Class)

		b.tcsub_m = c

		return b.m + b.tcsub_m.i
	}


	fn call_plus(a:int, b:int)->int
	{
		return plus(
					a, b)
	}

	fn call_this_plus(a:int, b:int)->int
	{
		return this.plus(a,
							 b)
	}

	fn plus(a:int, b:int, c:int)->int
	{
		var d :
			 int = a +
			 	b + c
		return d
	}

	//fn plus(a:int, b:int)->int
	fn 
		plus(
			a:int,
				b:int)
						->
							int

	{
		var c : int = a + b
		return	c
	}

	fn minus(a:int, b:int)->int
	{
		return a - b
	}


	fn call_minus(a:int, b:int)->int
	{
		return minus(a, b)
	}



	fn multi_assign()->int
	{
		a:int = 0 	b:int = 0 	c:int = 0
		d:int = 2
		//e:int = 3 	a = b = c = d + e
		e:int = 3 	a =
						 b =
						 	c =
						 		d +
						 			 e
		return a
	}

	fn multi_assign2() -> int
	{
		a : int = 0
		sub:
			TestSub = TestSub()

		a =
			sub.i = 100

		return sub.i
	}

	fn linefeed_foo(
		a:int,
		 b:int
		 )->int

		 {
		  return a + b
		 }

	fn linefeed_foo2(a:int, b:int)
		->int
			:=
				a +
					b


	fn linefeed_test()->boolean
	{
			v:int =
		linefeed_foo(
		1,
		2
		)

		System.out.println( v )
		System.out.println(
		 v )
		System.out.println(
		 v
		  )

		if( v != 3 ) return false

		v = linefeed_foo2(1, 2)
		System.out.println(v)

		if( v != 3 ) return false


		System.out.println("ListCont")
		System.out.println(

		"ListCont"

		)
		
		
		a:ListCont = ListCont()
		a + 1
		(a-0).c = 100

		System.out.println ("#operator_lval_assign_test" )
		System.out.println( (a - 0 ).c )
		System.out.println( (a - 0 ).c
		)
		System.out.println(
			(
				a - 0
			).c
		)

		System.out.println(
			(
				a -
				 0
			).
			c
		)
		if( (a-0).c != 100 ) return false

		if(
			(
				a-
				0
			).
			c !=
			100
			) return false

		if( (a-0).c != 100 )
			return false

		if( (a-0).c != 100 )
			return false
		else
			System.out.println("pass")

		if( (a-0).c != 100 )
		{
			return false
		}
		else
		{
			System.out.println("pass")
		}


		sa:int = 0	sc:int = 0

		sc =
			match(sa)
		 		case 1:
		 			1

				default:
					2

		if( sc != 2 ) return false

		match(sa) case 1: sc = 1 default: sc = 2
		(a).b.c_i = 10
		if( sc != 2 ) return false


		sc =
			match(sa)
		 		case 1:
		 			1

				default:
					2

		if( sc != 2 ) return false
		System.out.println(sc)

		System.out.println("match case expr test")

		sa = 1

		sc =
			match(sa)
		 		case 0:
		 			a.b.c_i = 0
		 		case 1:
		 			(a).b.c_i = 1
		 		case 2:
		 			(a.b).c_i = 2
		 		case 3:
		 			(a.b.c_i) = 3
				default:
					2

		System.out.println(sc)
		System.out.println(a.b.c_i)
		if( sc != 1 ) return false
		if( a.b.c_i != 1 ) return false


		match(sa) case 1: sc = 1 default: sc = 2
		(a).b.c_i = 1
		if( (a).b.c_i != 1 ) return false

		match(sa) case 1: sc = 1 default: sc = 2
		(a.b).c_i = 2
		if( (a.b).c_i != 2 ) return false

		match(sa)
			case 1:
				sc = 1
			default:
				sc = 2

		(a).b.c_i = 1



		sum:int = 0

		for(
			fi:int=0 ;
				fi <
				100 ;
					fi=fi+1)
			sum = sum + fi

		System.out.println(sum)

		if( sum != 4950 ) return false

		c:{} = for(fi:int =0;fi<100;fi=fi+1)
				for(j:int=0;j<3;j=j+1)
					fi+j

		clist = c.toList()			
					
		System.out.println( clist.size() )
		System.out.
					println(
								clist.size()
								 )
		System.out.println( clist.size(
									) )


		if( clist.size() != 100 ) return false

		sum = 0
		for( xi:int=0; xi<100; xi=xi+1) sum = sum + xi
		(a).b.c_i = 1

		System.out.println( sum )
		if( sum != 4950 ) return false

		for( xi:int=0; xi<100; xi=xi+1)
			(a).b.c_i = xi

		System.out.println( (a).b.c )
		if( (a).b.c_i != 99 ) return false

		for( xi:int=0; xi<100; xi=xi+1)
			(a.b).c_i = xi

		System.out.println( (a.b).c_i )
		if( (a).b.c_i !=
						 99 ) return false

		fs:{} = for( xi:int=0; xi<100; xi=xi+1)
			(a).b.c_i = xi

		fl = fs.toList()	
			
		System.out.println( fl )

		if( fl.size() != 100 ) return false

		return true
	}



	fn primary_assign_test()->boolean
	{
		System.out.println("primary_assign_test")
	
		a:ListCont = ListCont()
		System.out.println(a.b.c_i)
		if( a.b.c_i != 127 ) return false

		a.b.c_i = 1
		System.out.println(a.b.c_i)
		if( a.b.c_i != 1 ) return false

		(a).b.c_i = 2
		System.out.println((a).b.c_i)
		if( (a).b.c_i != 2 ) return false

		(a.b).c_i = 3
		System.out.println((a.b).c_i)
		if( (a.b).c_i != 3 ) return false

		(a.b.c_i) = 4
		System.out.println((a.b.c))

		if( (a.b.c_i) != 4 ) return false

		
		b1:int = 0
		b2:int = 0
		b3:int = 2
		
		if( b1 != 0 ) return false
		if( b2 != 0 ) return false
		if( b3 != 2 ) return false
		
		b1 = b2 = b3

		if( b1 != 2 ) return false
		if( b2 != 2 ) return false
		if( b3 != 2 ) return false
		
		b1 = b2 = (b3)
		if( b1 != 2 ) return false
		if( b2 != 2 ) return false
		if( b3 != 2 ) return false

		b1 = b2 = (b3+1)
		if( b1 != 3 ) return false
		if( b2 != 3 ) return false
		if( b3 != 2 ) return false
		
		b1 = b2 = (1+b3)
		if( b1 != 3 ) return false
		if( b2 != 3 ) return false
		if( b3 != 2 ) return false

		b1 = (b2 = b3)
		if( b1 != 2 ) return false
		if( b2 != 2 ) return false
		if( b3 != 2 ) return false
		
		b1 = (b2 = b3+1)
		if( b1 != 3 ) return false
		if( b2 != 3 ) return false
		if( b3 != 2 ) return false

		b1 = (b2 = (b3+1))
		if( b1 != 3 ) return false
		if( b2 != 3 ) return false
		if( b3 != 2 ) return false
		
		b1 = (b2 = (b3+1)) + 1
		if( b1 != 4 ) return false
		if( b2 != 3 ) return false
		if( b3 != 2 ) return false

		b1 = (b2 = (b3+1) + 1) + 1
		if( b1 != 5 ) return false
		if( b2 != 4 ) return false
		if( b3 != 2 ) return false

		// (b1 = b2) = b3 // this will makes 'Assingment Lvalue should be reference' error
		//((b1 = b2) = b3)
		
		return true
	}



	fn sub_func_call(a:int, b:int)->int
	{
		sub:TestSub = TestSub()
		return sub.plus(a, b)
	}

	fn sub_func_call2(a:int, b:int)->int
	{
		sub:TestSub = TestSub()

		c:int = sub.plus(a, b)

		return c
	}


	fn sub_func_call3(a:int, b:int, c:int)->int
	{
		sub:TestSub = TestSub()
		sub.i = a
		sub.c = TestSubSub()
		sub.c.i = b
		sub.c.c = TestSubSubSub()
		sub.c.c.i = c

		return sub.plus(sub.i, sub.c.i, sub.c.c.i)
	}


	fn no_reduce_func(a:String)->void
	{
		System.out.println(a)

	}


	fn no_reduce_func_call(a:String)->int
	{
		System.out.println(a)

		no_reduce_func(a)
		no_reduce_func(a)
		no_reduce_func(a)
		no_reduce_func(a)
		no_reduce_func(a)
		no_reduce_func(a)

		return 1
	}


	fn func_reduce_member(a:int)->int
	{
		b:int = getTestSub(a).i
		return b
	}

	fn func_reduce_fun(a:int, b:int)->int
	{
		c:int = getTestSub(a).plus(a, b)

		return c
	}

	fn getTestSub(a:int)->TestSub
	{
		sub:TestSub = TestSub()
		sub.i = a
		return sub
	}


	fn getTestSubFull(a:int)->TestSub
	{
		sub:TestSub = compilertest.grammar.TestSub()
		sub.i = a
		return sub
	}



	fn system_print_test(a:int)->void
	{
		java.lang.System.out.println(a+100+10)
		java.lang.System.out.println(a+2000)
		java.lang.System.out.println()
		java.lang.System.out.println(5000+a)

	}


	fn test_string(a:String)->String
	{
		java.lang.System.out.println(a)

		b:java.lang.String = a

		c:java.lang.String = " World"

		return b + c
	}


	fn test_string2(a:String, b:String)->String
	{
		java.lang.System.out.println(a+b)

		c:java.lang.String = a.concat(b)

		return a+b
	}


	fn getTestSubStrgPlus(a:String, b:String, c:String)->String
	{
		sub:TestSub = compilertest.grammar.TestSub()

		d:String = sub.str_plus(a, b)

		return d + c
	}


	fn testStrIndexOf(a:String, b:String)->int
	{
		return a.indexOf(b)
	}




	fn branch_test(a:boolean, b:boolean)->int
	{
		c:int = 0

		if( a )
		{
			if( b)
				c = 1
			else
			{
				c = 2
				System.out.println("Case B")
			}
		}
		else
			if( b)
			{
				c = 3
				System.out.println("Case C")
			}
			else
				c = 4

		return c
	}



	fn compare_test(a:int, b:int)->int
	{
		c:int = 0

		if( a == b )
		{
			System.out.println("a is same with b")
			c = 1
		}
		else if ( a < b )
		{
			System.out.println("a is less than b")
			c = 2
		}
		else
		 if ( a > b )
		{
			System.out.println("a is bigger than b")
			return 3
		}

		return c
	}


	fn loop_test()->boolean
	{
		if( single_loop_test(0, 1) != 0 ) return false
		if( single_loop_test(10, 1) != 10 ) return false
		if( single_loop_test(10000, 1) != 10000 ) return false

		if( dual_loop_test(10, 10, 1) != 100 ) return false
		if( dual_loop_test(1000, 1000, 1) != 1000000 ) return false
		if( dual_loop_test(10000, 10000, 1) != 100000000 ) return false
		
		if( infinite_loop_test(100) != 101 ) return false
		if( infinite_loop_test(1000) != 1001 ) return false
		
		if( !single_loop_continue_test() ) return false
		if( !dual_loop_continue_test() ) return false
	
		if( !single_loop_break_test() ) return false
		if( !dual_loop_break_test() ) return false
	
	
		return true
	}
	
	
	fn single_loop_break_test()->boolean {
		
		System.out.println("single_loop_break_test")

		/* 	// 'break' cannot be used in reducing looping expression	
		a:{} = for( i:int=0; i<10 ; i++)
					if( i%2 == 0)  i 
					else break
		*/
		
		sum:int = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			if( i == 5 ){
				break
			}
			
			sum += i
			//System.out.println("i="+i+", sum="+sum)
		}
		System.out.println("sum1="+sum)
		if( sum != 10 ) return false

		sum  = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			if( i == 5 )
				break
			sum += i
		}
		System.out.println("sum2="+sum)
		if( sum != 10 ) return false


		sum  = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			if( i == 5 ) break
			else sum += i
		}
		System.out.println("sum3="+sum)
		if( sum != 10 ) return false
		
		return true
	}
	
	
	fn dual_loop_break_test()->boolean {
		
		System.out.println("dual_loop_break_test")

		sum:int = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			for( j:int = 0 ; j < 10 ; j++)
			{
				if( j == 5 ){
					break
				}	
				sum += j
				//System.out.println("i="+i+", j="+j+", sum="+sum)
			}
		}
		System.out.println("sum1="+sum)
		if( sum != 100 ) return false

		sum = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			for( j:int = 0 ; j < 10 ; j++) {
				if( j == 5 ) break
				sum += j
				//System.out.println("i="+i+", j="+j+", sum="+sum)
			}
		}
		System.out.println("sum1="+sum)
		if( sum != 100 ) return false

		sum = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			for( j:int = 0 ; j < 10 ; j++) {
				if( j == 5 ) break
				else sum += j
				//System.out.println("i="+i+", j="+j+", sum="+sum)
			}
		}
		System.out.println("sum1="+sum)
		if( sum != 100 ) return false
		
		return true
	}
	
	
	fn single_loop_continue_test()->boolean {
		
		System.out.println("single_loop_continue_test")

		/* 	// 'continue' cannot be used in reducing looping expression	
		a:{} = for( i:int=0; i<10 ; i++)
					if( i%2 == 0)  i 
					else continue
		*/
		
		sum:int = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			if( i % 2 == 0 ){
				continue
			}	
			sum += i
			//System.out.println("i="+i+", sum="+sum)
		}
		System.out.println("sum1="+sum)
		if( sum != 25 ) return false

		sum  = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			if( i % 2 == 0 )
				continue
			sum += i
		}
		System.out.println("sum2="+sum)
		if( sum != 25 ) return false


		sum  = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			if( i % 2 == 0 ) continue
			else sum += i
		}
		System.out.println("sum3="+sum)
		if( sum != 25 ) return false
		
		return true
	}
	

	fn dual_loop_continue_test()->boolean {
		
		System.out.println("dual_loop_continue_test")

		sum:int = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			for( j:int = 0 ; j < 10 ; j++)
			{
				if( j % 2 == 0 ){
					continue
				}	
				sum += j
				//System.out.println("i="+i+", j="+j+", sum="+sum)
			}
		}
		System.out.println("sum1="+sum)
		if( sum != 250 ) return false

		sum = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			for( j:int = 0 ; j < 10 ; j++) {
				if( j % 2 == 0 ) continue
				sum += j
				//System.out.println("i="+i+", j="+j+", sum="+sum)
			}
		}
		System.out.println("sum1="+sum)
		if( sum != 250 ) return false

		sum = 0
		for( i:int = 0 ; i < 10 ; i++ ) {
			for( j:int = 0 ; j < 10 ; j++) {
				if( j % 2 == 0 ) continue
				else sum += j
				//System.out.println("i="+i+", j="+j+", sum="+sum)
			}
		}
		System.out.println("sum1="+sum)
		if( sum != 250 ) return false
		
		
		return true
	}

	
	
	fn single_loop_test(a:int, b:int)->int
	{
		System.out.println("single_loop_test")
	
		c:int = 0

		for( i:int = 0; i < a ; i = i + 1 ){

			c = c + b
			//System.out.println(c)
		}
		return c
	}
	


	fn dual_loop_test(a:int, b:int, c:int)->int
	{
		System.out.println("dual_loop_test")
		
		d:int = 0

		for( i:int = 0; i < a ; i = i + 1 ){

			for( j:int = 0 ; j < b ; j = j + 1) {
				d = d + c
				//System.out.println(d)
			}
		}
		return d
	}



	fn infinite_loop_test(a:int)->int
	{
		System.out.println("infinite_loop_test")
		
		d:int = 0

		for( ; ; ) {

			d = d + 1

			if( d > a ) return d
		}
		
		return 0
	}
	

	fn switch_test()->boolean
	{
		if( single_switch_test(1) != 1 ) return false
		if( single_switch_test(2) != 2 ) return false
		if( single_switch_test(3) != 3 ) return false
		if( single_switch_test(1000) != 3 ) return false

		if( loop_inswitch_test(1) != 100 ) return false
		if( loop_inswitch_test(2) != 1000  ) return false
		if( loop_inswitch_test(3) != 400 ) return false

		if( match_return(10) != 2 ) return false
		if( match_return(11) != 2 ) return false
		if( match_return(12) != 2 ) return false
		if( match_return(13) != 2 ) return false
		if( match_return(2) != 2 ) return false

		if( match_return(50) != 1 ) return false
		if( match_return(51) != 1 ) return false
		if( match_return(52) != 1 ) return false
		if( match_return(53) != 1 ) return false
		if( match_return(1) != 1 ) return false

		if( match_return(5) != 3 ) return false
		if( match_return(6) != 3 ) return false
		if( match_return(7) != 3 ) return false
		if( match_return(8) != 3 ) return false
		if( match_return(3) != 3 ) return false

		if( match_return(9) != 0 ) return false
		if( match_return(100) != 0 ) return false
		
		return true
	}
	
	
	fn match_return(a:int)->int
	{
		System.out.println("match_return")
	
		match(a)
			case 10:
			case 11:
			case 12:
			case 13:
			case 2: return 2

			case 50:
			case 51:
			case 52:
			case 53:
			case 1: { 
				return 1 
			}
			
			case 5:
			case 6:
			case 7:
			case 8:
			case 3: { 
				return 3 
			}
			
			default: return 0
	}
	
	
	
	fn single_switch_test(a:int)->int
	{
		System.out.println("single_switch_test")	
	
		c:int = 0

		// grammar checking
		match(a) case 1: c = 1 case 2: c = 2 default: c = 3

		match(
			a
			)
			 case 1: c = 1 case 2: c = 2 default: c = 3

		match(a) case 1: c = 1 case 2: c = 2 default: c = 3


		match(a)
			case 1:
			{
				c = 1
			}
			case 2:
				c = 2
			default:
				c = 3

		return c
	}


	fn loop_inswitch_test(a:int)->int
	{
		System.out.println("loop_inswitch_test")
	
		c:int = 0

		i:int = 0

		match(a)
			case 1:
			{
				for( i = 0 ; i < 100 ; i = i +1 ) c = c + 1
			}
			case 2:
				for( i = 0 ; i < 500 ; i = i +1 ) { c = c + 1 c = c + 1 }

			default:
				for( i = 0 ; i < 200 ; i = i +1 ) { c = c + 1, c = c + 1 }

		return c
	}


	m_i :java.lang.Integer
	m_list :LinkedList

	fn constructor_test(a:int)->java.lang.Integer
	{
		m_i = java.lang.Integer(a)
		m_list = java.util.LinkedList()

		m_list.add(1)
		m_list.add(java.lang.Integer(2))
		m_list.add(java.lang.Integer(1+2))
		m_list.add(m_i)
		m_list.add(true)
		m_list.add(false)
		m_list.add(java.lang.Boolean(true))
		m_list.add(java.lang.Boolean(false))

		return m_i
	}


	fn lfunc(a:int)->int
	{
		return a
	}


	fn list_test()
	{
		a: int = 1000

		m2 = 10000

		strm : {} = {
						0			//0
						1+1 		//1
						1+2+3 		//2
						a 			//3
						1+a 		//4
						a+1			//5
						a+2 		//6
						a+a 		//7
						m2 			//8
						m2+1		//9
						m2+a		//10
						lfunc(22) 	//11
						lfunc(22)+1 //12
						{0 1 2}.toList()		//13
						{ lfunc(5) 5+1 2+lfunc(5) }.toList()		//14
					}

		return strm.toList()
	}

	fn if_expr_test(t:boolean)->int
	{
		c : int = 0

		c = if( t ) 1 else 2

		return c
	}

	fn if_expr_ret_test(t:boolean)->int
	{
		return if( t ) 1 else 2
	}


	fn selective_list_test(t:boolean)->java.util.List
	{
		a:{} = {1,2, if(t) 3 else 4, if(t) ({ 5 6 }.toList()) else ({ 7 8 }.toList()) t }

		return a.toList()
	}

	fn selective_list_test2(t:boolean)->java.util.List
	{
		f: {} = { 1 2 3 4 }

		a:int = 0
		b:boolean = false

		c = { a b a = 10 b = true }.toList()

		d: {} = { a b c }

		return d.toList()
	}


	fn for_expr_test(a:int)->java.util.List
	{
		c:{} = for(i:int=0;i<a;i=i+1) i

		return c.toList()
	}


	fn for_expr_ret_test(a:int)->java.util.List
	{
		return ( for(i:int=0;i<a;i=i+1) i ).toList()
	}


	fn for_expr_list_test(a:int)->java.util.List
	{
		c:{} = for(i:int=0;i<a;i=i+1) { i, i + 1 }.toList()

		return c.toList()
	}

	fn forfor_expr_test(a:int)->java.util.List
	{
		c:{} = for(i:int=0;i<a;i=i+1)
				(
					for(j:int=0;j<3;j=j+1)
						i+j
				).toList()		

		return c.toList()
	}


	fn forif_expr_test(a:int, t:boolean)->java.util.List
	{
		c:{} = for(i:int=0;i<a;i=i+1)
					if(t) i else i + 10

		return c.toList()
	}


	fn iffor_expr_test(a:int, t:boolean)->java.util.List
	{
		i:int = 0

		c:{} = if( t )
				 for( ; i<a ; i=i+1 ) i + 100
			   else
				 for( ; i<a ; i=i+1 ) i + 200

		return c.toList()
	}


	fn match_expr_test(a:int)->int
	{
		c:int = 0

		c = match(a)
				case 1: 10
				case 2: 20
				case 3: 30
		    	default: 40

		return c
	}


	fn match_expr_ret_test(a:int)->int
	{
		return match(a) case 1: 10 case 2: 20 case 3: 30 default: 40
	}


	fn match_expr_listtest(a:int)
	{
		return ( match(a) case 1: {10 11} case 2: {20 21} case 3: {30 31} default: { 40 41 } ).toList()
	}


	fn ifmatch_expr_test(t:boolean, a:int)->int
	{
		b:int = if( t )
					match( a )
						case 1: 100
						case 2: 200
						default: 300
				else
					1000
		return b
	}


	fn matchfor_expr_test(t:boolean, a:int)->java.util.List
	{
		i:int = 0

		b:{} = match(a)
				case 1: for(i=0; i<4; i=i+1) i

				case 2: for(i=0; i<4; i=i+1) i+100

				default: { 4 5 6 7 }

		return b.toList()
	}


	fn one_expr_add(a:int)->int := a + a

	fn one_expr_assign(a:int)->int := b:int = a + a

	fn one_expr_if(a:int)->int :=
						if( a == 1 ) 1000 else 2000

	mvar_one_expr_test:int // member variable
	
	fn one_expr_if_assign(a:int)->int :=
						if( a == 1 ) 
							mvar_one_expr_test = 1000 
						else 
							mvar_one_expr_test = 2000


	fn one_expr_match(a:int)->int := 
						match(a) 
							case 1: 10000 	
							case 2: 20000 
							default: 30000

	fn one_expr_for(a:int) :=
						( for(i:int=0;i<a;i=i+1) i ).toList()

	var_one_expr_for_assign:int 
	
	fn one_expr_for_assign(a:int) :=
				( for(i:int=0;i<a;i=i+1) var_one_expr_for_assign = i ).toList()
	


	fn one_expr_func_test()->boolean
	{
		System.out.println("#one_expr_func_test")
		
		if( one_expr_add(1) != 2 ) return false
		if( one_expr_add(1000) != 2000) return false
		if( one_expr_assign(2) != 4 ) return false
		if( one_expr_assign(2000) != 4000 ) return false
		if( one_expr_if(1) != 1000 ) return false
		if( one_expr_if(2) != 2000 ) return false
		
		if( one_expr_if_assign(2) != 2000 ) return false
		if( mvar_one_expr_test != 2000 ) return false
		
		if( one_expr_match(1)  != 10000 ) return false
		if( one_expr_match(2) != 20000 ) return false
		if( one_expr_match(100) !=  30000 ) return false
	
		oneexpr_list = one_expr_for(10)
		if( oneexpr_list.size() != 10 ) return false
		System.out.println( oneexpr_list ) 
		
		oneexpr_list = one_expr_for(20)
		if( oneexpr_list.size() != 20 ) return false
		System.out.println( oneexpr_list ) 
		
		oneexpr_list = one_expr_for_assign(10)
		if( oneexpr_list.size() != 10 ) return false
		System.out.println( oneexpr_list ) 
	
		if( var_one_expr_for_assign != 9 ) return false
	
	
		return true
	}



	fn super_test()->boolean
	{
		a:TestSuperChild = TestSuperChild(1)

		a.print_hello()

		b:java.lang.Integer = java.lang.Integer(1)
		a.add(b)
		a.add(java.lang.Integer(2))
		a.add(3)
		for( i:int = 4 ; i < 10 ; i= i + 1 )
			a.add(i)
		a.dump()

		if( a.size() == 9 ) {
				System.out.print("a.size()=")
				System.out.println(a.size())
		}
		else
			return false

		if( a.get_hello().equals("Hello") ) {
				System.out.print("a.get_hello()=")
				System.out.println(a.get_hello())
		}
		else
			return false

		if( a.twice(10) == 20 ) {
				System.out.print("a.twice(10)=")
				System.out.println(a.twice(10))
		}
		else {
			return false
		}
		
		// plus function call
		if( a.+(10, 10) == 20 ) {
				System.out.print("a.+(10, 10)=")
				System.out.println(a.+(10, 10))
		}
		else {
			return false
		}

		// plus function call polymorphism
		a.+(25000)
		
		
		// 'int' casting
		c:int = int<-a.childget(9)

		if( 25000 == c ) {
				System.out.print("c=")
				System.out.println(c)
		}
		else {
			return false
		}

		// 'int' casting in comparative expression
		if( int<-a.childget(9) == 25000 ) {
				System.out.print("a.childget(9)=")
				System.out.println(a.childget(9))
		}
		else {
			return false
		}

		// 'int' casting in comparative expression
		if( ( int<-a.childget(9) ) == 25000 ) {
				System.out.print("a.childget(9)=")
				System.out.println(a.childget(9))
		}
		else {
			return false
		}

		// 'int' casting in comparative expression
		if( ( int<-a.childget(9)) == int<-25000 ) {
				System.out.print("a.childget(9)=")
				System.out.println(a.childget(9))
		}
		else {
			return false
		}




		// plus function call polymorphism for String
		a.+("Hello World")
		
		
		// 'String' casting
		d:String = String<- a.childget(10)

		if( "Hello World".equals(d) ) {
				System.out.print("d=")
				System.out.println(d)
		}
		else {
			return false
		}

		// 'String' casting in comparative expression
		//if( String<-a.childget(10).equals("Hello World") ) { --> This makes compilation error
		if( ( String<-a.childget(10)).equals("Hello World") ) {
				System.out.print("a.childget(10)=")
				System.out.println(a.childget(10))
		}
		else {
			return false
		}

		// 'String' casting in comparative expression
		if( ( String<- a.childget(10)).compareTo("Hello World") == 0 ) {
				System.out.print("a.childget(10)=")
				System.out.println(a.childget(10))
		}
		else {
			return false
		}

		// 'int' casting in comparative expression
		if( ( String<-a.childget(10)).equals( String<-"Hello World") ) {
				System.out.print("a.childget(10)=")
				System.out.println(a.childget(10))
		}
		else {
			return false
		}


		// plus function call polymorphism for Boolean
		a.+(true)

		e:boolean  = boolean<- a.get(11)
		// 'boolean' casting in comparative expression
		if( ( boolean<- a.childget(11)) == true ) {
				System.out.print("a.childget(11)=")
				System.out.println(a.childget(11))
		}
		else {
			return false
		}

		a.+(12)
		
		
		// call operator overloaded function 'a[12]' is same with 'a.[](12)'
		if( (int<- a[12]) == 12 ) {
				System.out.print("a[12]=") System.out.println(a[12])
		}
		else return false

		// call operator overloaded function 'a[12]' is same with 'a.[]("12")'
		if( (int<- a["12"]) == 12 ) {
				System.out.print("a[\"12\"]=") System.out.println(a["12"])
		}
		else return false

		a + 13
		if( (int<- a[13]) == 13 ) {
				System.out.print("a[13]=") 	System.out.println(a[13])
		}
		else return false

		for(i:int=0;i<10;i=i+1) a + (14+i) // operator overloading ( + : add element )

		for(i:int=0;i<10;i=i+1)
			if( (int <- a[14+i]) != (14+i) )
				return false

		a + { 24 25 26 27 28 }

		for(i:int=0;i<5;i=i+1)
			if( (int <- a[24+i]) != (24+i) )
				return false

		loop_context_test_rslt:boolean = loop_context_test()

		if( loop_context_test_rslt == false ) return false
		
		
		return true
	}



	fn loop_context_test()->boolean
	{
		System.out.println("loop_context_test")

		sum:int = 0

		for(
			i:int=0 ;
				i < 10 ;
					i=i+1)
			sum = sum + i

		System.out.println(sum)

		if( sum != 45 ) return false

		sum = 0
		for( i: int = 0 ; i < 5 ; i=i+1 ){
			sum = sum + i
		}
		System.out.println(sum)
		if( sum != 10 ) return false

		j :int = 0

		sum = 0
		for( j: int = 0 ; j < 10 ; j=j+1 ){
			sum = sum + j
		}
		System.out.println(sum)
		if( sum != 45 ) return false

		System.out.print("j=")
		System.out.println(j)
		if( j != 0 ) return false


		k :int = 0

		sum = 0
		for( ; k < 10 ; k=k+1 ){
			sum = sum + k
		}
		System.out.print("sum=")
		System.out.println(sum)
		if( sum != 45 ) return false

		for( ; k < 15 ; k=k+1 ){
			sum = sum + k
		}
		System.out.print("sum=")
		System.out.println(sum)
		if( sum != 105 ) return false

		System.out.print("k=")
		System.out.println(k)
		if( k != 15 ) return false

		return true
	}



	fn operator_lval_assign_test()->boolean
	{
		a:ListCont = ListCont()
		a + 1
		(a-0).c = 100

		System.out.print("#operator_lval_assign_test" )
		System.out.println( ( a - 0 ).c )

		if( (a-0).c != 100 ) return false

		return true
	}




	fn static_member_test()->boolean
	{
		System.out.println("create TestSuperParent")
		a:TestSuperParent = TestSuperParent()

		if( a.mem_1 != 0 ) return false
		if( a.mem_2 != 0 ) return false
		if( a.static_mem1 != 0 ) return false
		if( a.static_mem2 != 0 ) return false

		System.out.println(a.mem_1)
		System.out.println(a.mem_2)
		System.out.println(a.static_mem1)
		System.out.println(a.static_mem2)

		System.out.println("do assign")
		a.mem_1 = 10
		a.mem_2 = 20
		a.static_mem1 = 30
		a.static_mem2 = 40

		System.out.println("do check")
		if( a.mem_1 != 10 ) return false
		if( a.mem_2 != 20 ) return false
		if( a.static_mem1 != 30 ) return false
		if( a.static_mem2 != 40 ) return false

		System.out.println("create TestSuperParentOwner")
		b:TestSuperParentOwner = TestSuperParentOwner()
		if( b.p.mem_1 != 0 ) return false
		if( b.p.mem_2 != b.p.mem_1 ) return false
		if( b.p.static_mem1 != 0 ) return false
		if( b.p.static_mem2 != 0 ) return false

		System.out.println(b.p.mem_1)
		System.out.println(b.p.mem_2)
		System.out.println(b.p.static_mem1)
		System.out.println(b.p.static_mem2)


		System.out.println("do assign with variable member")
		b.p.mem_1 = 10
		b.p.mem_2 = 20
		b.p.static_mem1 = 30
		b.p.static_mem2 = 40

		System.out.println("do check with variable member")
		if( b.p.mem_1 != 10 ) return false
		if( b.p.mem_2 != 20 ) return false
		if( b.p.static_mem1 != 30 ) return false
		if( b.p.static_mem2 != 40 ) return false

		System.out.println("do assign with variable member")
		b.p.mem_1 = 100
		b.p.mem_2 = b.p.mem_1
		b.p.static_mem1 = 300
		b.p.static_mem2 = b.p.static_mem1

		System.out.println("do check with variable member")
		if( b.p.mem_1 != 100 ) return false
		if( b.p.mem_2 != 100 ) return false
		if( b.p.static_mem1 != 300 ) return false
		if( b.p.static_mem2 != 300 ) return false


		System.out.println("do assign with class name")
		//TestSuperParent.mem_1 = 100 // generate error
		//TestSuperParent.mem_2 = b.p.mem_1 // generate error
		TestSuperParent.static_mem1 = 300
		TestSuperParent.static_mem2 = b.p.static_mem1

		System.out.println("do check with class name")
		//if( TestSuperParent.mem_1 != 100 ) return false // generate error
		//if( TestSuperParent.mem_2 != 100 ) return false  // generate error
		if( TestSuperParent.static_mem1 != 300 ) return false
		if( TestSuperParent.static_mem2 != 300 ) return false

		//System.out.println(TestSuperParent.mem_1) // generate error
		//System.out.println(TestSuperParent.mem_2) // generate error
		System.out.println(TestSuperParent.static_mem1)
		System.out.println(TestSuperParent.static_mem2)

		System.out.println("Function call(Static function) Test 1")
		System.out.println(b.p.static_func(10))
		if( b.p.static_func(10) != 40 ) return false

		System.out.println(TestSuperParent.static_func(100))
		if( TestSuperParent.static_func(100) != 400 ) return false

		System.out.println("Function call(Static function) Test 2")
		System.out.println(b.p.static_func2(100))
		if( b.p.static_func2(10).equals("Hello") ) {} else return false

		System.out.println(TestSuperParent.static_func2(10))
		if( TestSuperParent.static_func2(10).equals("Hello") )  {} else return false

		System.out.println("Function call(Static function) Test 3")
		System.out.println(b.p.static_func3(5))
		if( b.p.static_func3(5) != 10 ) return false

		System.out.println(TestSuperParent.static_func3(5))
		if( TestSuperParent.static_func3(5) != 10 ) return false

		System.out.println("Function call(Static function) Test 4")
		System.out.println( TestSuperParent.static_func4(5) ) 
		
		if( b.p.static_func4(5).toList().size() != 5 ) return false
		if( TestSuperParent.static_func4(5).count() != 5L ) return false

		local_static_test_rslt:boolean = local_static_access_test()

		if( local_static_test_rslt == false ) return false

		return true
	}



	singleton sg_var_a : int

	static fn function_foo(a:int)->int := a + 100

	fn local_static_access_test()->boolean
	{
		System.out.println("Local Static Access Test")

		sg_var_a = 100
		//System.out.println(Test.sg_var_a)
		System.out.println(sg_var_a)
		//if( Test.sg_var_a != 100 ) return false

		System.out.println(sg_var_a)
		if( sg_var_a != 100 ) return false

		rslt:int = function_foo(100)
		System.out.println(rslt)
		if( rslt != 200 ) return false

		if( function_foo(200) != 300 ) return false

		return true
	}


	localmem_func:f(int, int)->int

	singleton localmem_func_single:f(int, int)->int


	fn postfix_plus_plus_test()->boolean{

		System.out.println("postfix_plus_plus_test")

		a:int = 1
		b:int = a++
		System.out.println("a = " + a) 	if( a != 2 ) return false
		System.out.println("b = " + b) 	if( b != 1 ) return false
		b = a++ + 1
		System.out.println("b = " + b) 	if( b != 3 ) return false

		a = 1
		b = (a)++
		System.out.println("a = " + a)	if( a != 2 ) return false
		System.out.println("b = " + b)	if( b != 1 ) return false
		b = (a)++ + 1
		System.out.println("b = " + b)	if( b != 3 ) return false
	
		a = 1
		b = ((a))++
		System.out.println("a = " + a) 	if( a != 2 ) return false
		System.out.println("b = " + b)	if( b != 1 ) return false
		b = 1 + ((a))++ 
		System.out.println("b = " + b)	if( b != 3 ) return false
		
		a = 1
		b = (a++)
		System.out.println("a = " + a)	if( a != 2 ) return false
		System.out.println("b = " + b) 	if( b != 1 ) return false
		b = 1 + (a++) + 1
		System.out.println("b = " + b) 	if( b != 4 ) return false
				
		c:TestSuperParentOwner = TestSuperParentOwner()

		c.p.mem_1 = 1
		b = c.p.mem_1++
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = c.p.mem_1++ + 1
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false

		(c).p.mem_1 = 1
		b = (c).p.mem_1++
		System.out.println("(c).p.mem_1 = " + (c).p.mem_1) 	if( (c).p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = (c.p).mem_1++ + 1
		System.out.println("(c.p).mem_1 = " + (c.p).mem_1) 	if( (c.p).mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		c.p.mem_1 = 1
		b = (c.p.mem_1)++
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = (c.p.mem_1)++ + 1
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		c.p.mem_1 = 1
		b = ((c.p.mem_1))++
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = ((c.p.mem_1))++ + 1
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false

		c.p.static_mem1 = 1
		b = c.p.static_mem1++
		System.out.println("c.p.static_mem1 = " + c.p.static_mem1) 	if( c.p.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = c.p.static_mem1++ + 1
		System.out.println("c.p.static_mem1 = " + c.p.static_mem1) 	if( c.p.static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false

		(c).p.static_mem1 = 1
		b = (c).p.static_mem1++
		System.out.println("(c).p.static_mem1 = " + (c).p.static_mem1) 	if( (c).p.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = (c.p).static_mem1++ + 1
		System.out.println("(c.p).static_mem1 = " + (c.p).static_mem1) 	if( (c.p).static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false

		(c.p.static_mem1) = 1
		b = (c.p.static_mem1)++
		System.out.println("(c.p.static_mem1) = " + (c.p.static_mem1) ) 	if( (c.p.static_mem1) != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = (c.p.static_mem1)++ + 1
		System.out.println("(c.p.static_mem1) = " + (c.p.static_mem1) ) 	if( (c.p.static_mem1) != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false

		p:TestSuperParent = TestSuperParent()
		p.mem_1 = 1
		b = p.mem_1++
		System.out.println("p.mem_1 = " + p.mem_1) 	if( p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = p.mem_1++ + 1
		System.out.println("p.mem_1 = " + p.mem_1) 	if( p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		p.mem_1 = 1
		b = (p).mem_1++
		System.out.println("(p).mem_1 = " + (p).mem_1) 	if( (p).mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = ((p)).mem_1++ + 1
		System.out.println("((p)).mem_1 = " + ((p)).mem_1) 	if( ((p)).mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false

		(p.mem_1) = 1
		b = (p.mem_1)++
		System.out.println("(p.mem_1) = " + (p.mem_1)) 	if( (p.mem_1) != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = ((p.mem_1))++ + 1
		System.out.println("((p.mem_1)) = " + ((p.mem_1))) 	if( ((p.mem_1)) != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		p.mem_1 = 1
		b = p.mem_1++
		System.out.println("p.mem_1 = " + p.mem_1) 	if( p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = p.mem_1++ + 1
		System.out.println("p.mem_1 = " + p.mem_1) 	if( p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		
		p.static_mem1 = 1
		b = p.static_mem1++
		System.out.println("p.static_mem1 = " + p.static_mem1) 	if( p.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = p.static_mem1++ + 1
		System.out.println("p.static_mem1 = " + p.static_mem1) 	if( p.static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		p.static_mem1 = 1
		b = (p).static_mem1++
		System.out.println("(p).static_mem1 = " + (p).static_mem1) 	if( (p).static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = ((p)).static_mem1++ + 1
		System.out.println("((p)).static_mem1 = " + ((p)).static_mem1) 	if( ((p)).static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false

		(p.static_mem1) = 1
		b = (p.static_mem1)++
		System.out.println("(p.static_mem1) = " + (p.static_mem1)) 	if( (p.static_mem1) != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = ((p.static_mem1))++ + 1
		System.out.println("((p.static_mem1)) = " + ((p.static_mem1))) 	if( ((p.static_mem1)) != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		p.static_mem1 = 1
		b = p.static_mem1++
		System.out.println("p.static_mem1 = " + p.static_mem1) 	if( p.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = p.static_mem1++ + 1
		System.out.println("p.static_mem1 = " + p.static_mem1) 	if( p.static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		TestSuperParent.static_mem1 = 1
		b = TestSuperParent.static_mem1++
		System.out.println("TestSuperParent.static_mem1 = " + TestSuperParent.static_mem1) 	if( TestSuperParent.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = TestSuperParent.static_mem1++ + 1
		System.out.println("TestSuperParent.static_mem1 = " + TestSuperParent.static_mem1) 	if( TestSuperParent.static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		(TestSuperParent).static_mem1 = 1
		b = (TestSuperParent).static_mem1++
		System.out.println("(TestSuperParent).static_mem1 = " + (TestSuperParent).static_mem1) 	if( (TestSuperParent).static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = (TestSuperParent).static_mem1++ + 1
		System.out.println("(TestSuperParent).static_mem1 = " + (TestSuperParent).static_mem1) 	if( (TestSuperParent).static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		(TestSuperParent.static_mem1) = 1
		b = (TestSuperParent.static_mem1)++
		System.out.println("(TestSuperParent.static_mem1) = " + (TestSuperParent.static_mem1)) 	if( (TestSuperParent.static_mem1) != 2 ) return false
		System.out.println("b = " + b) 					if( b != 1 ) return false
		b = (TestSuperParent.static_mem1)++ + 1
		System.out.println("(TestSuperParent.static_mem1) = " + (TestSuperParent.static_mem1)) 	if( (TestSuperParent.static_mem1) != 3 ) return false
		System.out.println("b = " + b) 					if( b != 3 ) return false
		
		sum :int = 0
		for( i:int = 0 ; i < 1000 ; i++)
		{
			sum = sum + i
		}	
		System.out.println("sum = " + sum )
		if( sum != 499500 ) return false
		
		
		
		return true
	}	
	
	
		fn unary_plusplus_test()->boolean {
		

		System.out.println("unary_plusplus_test")

		a:int = 1
		b:int = ++a
		System.out.println("a = " + a) 	if( a != 2 ) return false
		System.out.println("b = " + b) 	if( b != 2 ) return false
		b = ++a + 1
		System.out.println("a = " + a) 	if( a != 3 ) return false
		System.out.println("b = " + b) 	if( b != 4 ) return false

		a = 1
		b = ++(a)
		System.out.println("a = " + a)	if( a != 2 ) return false
		System.out.println("b = " + b)	if( b != 2 ) return false
		b = ++(a) + 1
		System.out.println("b = " + b)	if( b != 4 ) return false
	
		a = 1
		b = ++((a))
		System.out.println("a = " + a) 	if( a != 2 ) return false
		System.out.println("b = " + b)	if( b != 2 ) return false
		b = 1 + ++((a))
		System.out.println("b = " + b)	if( b != 4 ) return false
		
		a = 1
		b = (++a)
		System.out.println("a = " + a)	if( a != 2 ) return false
		System.out.println("b = " + b) 	if( b != 2 ) return false
		b = 1 + (++a) + 1
		System.out.println("b = " + b) 	if( b != 5 ) return false
		

				
		c:TestSuperParentOwner = TestSuperParentOwner()

		c.p.mem_1 = 1
		b = ++c.p.mem_1
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++c.p.mem_1 + 1
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false

			
		(c).p.mem_1 = 1
		b = ++(c).p.mem_1
		System.out.println("(c).p.mem_1 = " + (c).p.mem_1) 	if( (c).p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++(c.p).mem_1 + 1
		System.out.println("(c.p).mem_1 = " + (c.p).mem_1) 	if( (c.p).mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		
		c.p.mem_1 = 1
		b = ++(c.p.mem_1)
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++(c.p.mem_1) + 1
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		
		c.p.mem_1 = 1
		b = ++((c.p.mem_1))
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++((c.p.mem_1)) + 1
		System.out.println("c.p.mem_1 = " + c.p.mem_1) 	if( c.p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false

		
		c.p.static_mem1 = 1
		b = ++c.p.static_mem1
		System.out.println("c.p.static_mem1 = " + c.p.static_mem1) 	if( c.p.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++c.p.static_mem1 + 1
		System.out.println("c.p.static_mem1 = " + c.p.static_mem1) 	if( c.p.static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false

		
		(c).p.static_mem1 = 1
		b = ++(c).p.static_mem1
		System.out.println("(c).p.static_mem1 = " + (c).p.static_mem1) 	if( (c).p.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++(c.p).static_mem1 + 1
		System.out.println("(c.p).static_mem1 = " + (c.p).static_mem1) 	if( (c.p).static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false

		
		(c.p.static_mem1) = 1
		b = ++(c.p.static_mem1)
		System.out.println("(c.p.static_mem1) = " + (c.p.static_mem1) ) 	if( (c.p.static_mem1) != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++(c.p.static_mem1) + 1
		System.out.println("(c.p.static_mem1) = " + (c.p.static_mem1) ) 	if( (c.p.static_mem1) != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false

			
		p:TestSuperParent = TestSuperParent()
		p.mem_1 = 1
		b = ++p.mem_1
		System.out.println("p.mem_1 = " + p.mem_1) 	if( p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++p.mem_1 + 1
		System.out.println("p.mem_1 = " + p.mem_1) 	if( p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		
		p.mem_1 = 1
		b = ++(p).mem_1
		System.out.println("(p).mem_1 = " + (p).mem_1) 	if( (p).mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++((p)).mem_1 + 1
		System.out.println("((p)).mem_1 = " + ((p)).mem_1) 	if( ((p)).mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false

		
		(p.mem_1) = 1
		b = ++(p.mem_1)
		System.out.println("(p.mem_1) = " + (p.mem_1)) 	if( (p.mem_1) != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++((p.mem_1)) + 1
		System.out.println("((p.mem_1)) = " + ((p.mem_1))) 	if( ((p.mem_1)) != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		
		p.mem_1 = 1
		b = ++p.mem_1
		System.out.println("p.mem_1 = " + p.mem_1) 	if( p.mem_1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++p.mem_1 + 1
		System.out.println("p.mem_1 = " + p.mem_1) 	if( p.mem_1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		
		p.static_mem1 = 1
		b = ++p.static_mem1
		System.out.println("p.static_mem1 = " + p.static_mem1) 	if( p.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++p.static_mem1 + 1
		System.out.println("p.static_mem1 = " + p.static_mem1) 	if( p.static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		p.static_mem1 = 1
		b = ++(p).static_mem1
		System.out.println("(p).static_mem1 = " + (p).static_mem1) 	if( (p).static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++((p)).static_mem1 + 1
		System.out.println("((p)).static_mem1 = " + ((p)).static_mem1) 	if( ((p)).static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false

		
		(p.static_mem1) = 1
		b = ++(p.static_mem1)
		System.out.println("(p.static_mem1) = " + (p.static_mem1)) 	if( (p.static_mem1) != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++((p.static_mem1)) + 1
		System.out.println("((p.static_mem1)) = " + ((p.static_mem1))) 	if( ((p.static_mem1)) != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		p.static_mem1 = 1
		b = ++p.static_mem1
		System.out.println("p.static_mem1 = " + p.static_mem1) 	if( p.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++p.static_mem1 + 1
		System.out.println("p.static_mem1 = " + p.static_mem1) 	if( p.static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		TestSuperParent.static_mem1 = 1
		b = ++TestSuperParent.static_mem1
		System.out.println("TestSuperParent.static_mem1 = " + TestSuperParent.static_mem1) 	if( TestSuperParent.static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++TestSuperParent.static_mem1 + 1
		System.out.println("TestSuperParent.static_mem1 = " + TestSuperParent.static_mem1) 	if( TestSuperParent.static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		(TestSuperParent).static_mem1 = 1
		b = ++(TestSuperParent).static_mem1
		System.out.println("(TestSuperParent).static_mem1 = " + (TestSuperParent).static_mem1) 	if( (TestSuperParent).static_mem1 != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++(TestSuperParent).static_mem1 + 1
		System.out.println("(TestSuperParent).static_mem1 = " + (TestSuperParent).static_mem1) 	if( (TestSuperParent).static_mem1 != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		(TestSuperParent.static_mem1) = 1
		b = ++(TestSuperParent.static_mem1)
		System.out.println("(TestSuperParent.static_mem1) = " + (TestSuperParent.static_mem1)) 	if( (TestSuperParent.static_mem1) != 2 ) return false
		System.out.println("b = " + b) 					if( b != 2 ) return false
		b = ++(TestSuperParent.static_mem1) + 1
		System.out.println("(TestSuperParent.static_mem1) = " + (TestSuperParent.static_mem1)) 	if( (TestSuperParent.static_mem1) != 3 ) return false
		System.out.println("b = " + b) 					if( b != 4 ) return false
		
		sum :int = 0
		for( i:int = 0 ; i < 1000 ; ++i)
		{
			sum = sum + i
		}	
		System.out.println("sum = " + sum )
		if( sum != 499500 ) return false
		
		return true
	}
	
	
	

	fn exception_test()->boolean
	{
		// This creates Unhandled Exception (Resolved class(java/io/FileNotFoundException)) 
		//fis_err : FileInputStream = FileInputStream("./_Untitled_4001")
		
		{	
			{
				// this will creates 'FileNotFoundException'
				
				fis : FileInputStream = FileInputStream("./_Untitled_41")
				
			}
			catch Exception | FileNotFoundException	
			{ 
				//excp.printStackTrace() 
				System.out.println("File Not Found Exception Occurred")
				System.out.println(excp.getMessage())
				throw TestException()

			}
			catch IOException 
			{
				System.out.println("A")
				// file does not exists, control should not reach here
				return false
			}

		}
		catch TestException
		{
			System.out.println("Received Test Exception")
			System.out.println(excp)
			
			if( excp.getMessage().equals( "TestException Message" ) )
				return true
			else
				return false
		}
		

		return false	
	}

	
	fn cast_test()->boolean
	{
		System.out.println("cast test")
		
		if( ! assign_int_cast_test() ) return false
		if( ! funccall_int_cast_test() ) return false
		if( ! assign_boolean_cast_test() ) return false
		if( ! funccall_boolean_cast_test() ) return false
		if( ! if_boolean_cast_test() ) return false
		if( ! for_boolean_cast_test() ) return false
	
		return true
	}
	

	
	fn assign_int_cast_test()->boolean{
	
		System.out.println("assign_int_cast_test")
	
		// Assignment Casting	
		int_a:int = 100
		obj_b:Integer = int_a // it -> Integer Converting
		System.out.println(obj_b)
		if( obj_b.equals( Integer(100) ) == false ) return false
		
		int_a = 101
		obj_b = (int_a)
		System.out.println(obj_b)
		if( obj_b.equals( Integer(101) ) == false ) return false
		
		int_a = 102
		obj_b = int_a + 1
		System.out.println(obj_b)
		if( obj_b.equals( Integer(103) ) == false ) return false

		int_a = 102
		obj_b = (int_a) + 1
		System.out.println(obj_b)
		if( obj_b.equals( Integer(103) ) == false ) return false
		
		obj_b = Integer(1000)
		int_c:int = obj_b
		System.out.println(int_c)
		if( int_c != 1000 ) return false

		System.out.println("Object Type Integer Operation")
		// Integer op does not have '+' operation
		int_c = obj_b + 1 
		System.out.println(int_c)
		if( int_c != 1001 ) return false
		
		int_c = (obj_b) + 1 // Reference in Reference 
		System.out.println(int_c)
		if( int_c != 1001 ) return false
		
		int_c = ((obj_b)) + 1 // Reference in Reference 
		System.out.println(int_c)
		if( int_c != 1001 ) return false
		
		
		int_c = obj_b + 1 + obj_b
		System.out.println(int_c)
		if( int_c != 2001 ) return false
		
		int_c = 1 + obj_b 
		System.out.println(int_c)
		if( int_c != 1001 ) return false

		int_c = 1 + obj_b + 1
		System.out.println(int_c)
		if( int_c != 1002 ) return false
		
		int_c = 1 + obj_b + obj_b
		System.out.println(int_c)
		if( int_c != 2001 ) return false
		
		//c = b + 1 // it needs to implement test
	
		return true
	}

	
	
	fn funccall_int_cast_test()->boolean{
		
		System.out.println("funccall_int_cast_test")
		
		obj_b:Integer = Integer(1000)
		int_e:int = castest_Integer2int(obj_b)
		System.out.println(int_e)
		if( int_e != 1000 ) return false

		int_a:int = 101	
		int_e = castest_Integer2int(101)
		System.out.println(int_e)
		if( int_e != 101 ) return false
		
		int_a = 101	
		int_e = castest_Integer2int((101))
		System.out.println(int_e)
		if( int_e != 101 ) return false
		
		int_a = 101
		obj_f:Integer = castest_int2Integer(int_a)
		System.out.println(obj_f)
		if( obj_f.equals( Integer.valueOf(101) ) == false ) return false

		obj_b = Integer(1000)
		obj_f = castest_int2Integer(obj_b)
		System.out.println(obj_f)
		if( obj_f.equals( Integer.valueOf(1000) ) == false ) return false
			
		
		return true
	}	

	
	fn castest_Integer2int(a:Integer)->int := a.intValue()

	fn castest_int2Integer(a:int)->Integer := Integer.valueOf(a)
	
	
	fn assign_boolean_cast_test()->boolean{
	
		System.out.println("assign_boolean_cast_test")
	
		// Assignment Casting	
		bool_a:boolean = true
		obj_b:Boolean = bool_a // boolean -> Boolean
		System.out.println(obj_b)
		if( obj_b.equals( Boolean(true) ) == false ) return false
		
		bool_a = false
		obj_b = (bool_a)
		System.out.println(obj_b)
		if( obj_b.equals( Boolean(false) ) == false ) return false

		// true && true
		bool_a = true
		obj_b = bool_a && true
		System.out.println(obj_b)
		if( obj_b.equals( Boolean(true) ) == false ) return false

		// true && false && true
		bool_a = true
		obj_b = bool_a && false && true
		System.out.println(obj_b)
		if( obj_b.equals( Boolean(false) ) == false ) return false
		
		obj_b = Boolean(true)
		bool_c:boolean = obj_b // Boolean -> boolean
		System.out.println(bool_c)
		if( bool_c != true ) return false

		System.out.println("Object Type Boolean Operation")
		bool_c = obj_b && true 
		System.out.println(bool_c)
		if( bool_c != true ) return false
		
		bool_c = obj_b && false && obj_b
		System.out.println(bool_c)
		if( bool_c != false ) return false

		bool_c = true && obj_b 
		System.out.println( bool_c)
		if( bool_c != true ) return false

		bool_c = false && obj_b && true
		System.out.println(bool_c)
		if( bool_c != false ) return false

		bool_c = false && obj_b && obj_b
		System.out.println(bool_c)
		if( bool_c != false ) return false
	
		return true
	}
	
	
	fn funccall_boolean_cast_test()->boolean{
		
		System.out.println("funccall_boolean_cast_test")
		
		obj_b:Boolean = Boolean(true)
		bool_e:boolean = castest_Boolean2boolean(obj_b)
		System.out.println(bool_e)
		if( bool_e != true ) return false

		bool_a:boolean = false	
		bool_e = castest_Boolean2boolean(bool_a)
		System.out.println(bool_e)
		if( bool_e != false ) return false

		bool_a = false	
		bool_e = castest_Boolean2boolean((bool_a))
		System.out.println(bool_e)
		if( bool_e != false ) return false
		
		bool_e = castest_Boolean2boolean((false))
		System.out.println(bool_e)
		if( bool_e != false ) return false

		bool_a = true
		obj_f:Boolean = castest_boolean2Boolean(bool_a)
		System.out.println(obj_f)
		if( obj_f.equals( Boolean.valueOf(true) ) == false ) return false

		obj_b = Boolean(false)
		obj_f = castest_boolean2Boolean(obj_b)
		System.out.println(obj_f)
		if( obj_f.equals( Boolean.valueOf(false) ) == false ) return false
		
		return true
	}	
	
	fn castest_Boolean2boolean(a:Boolean)->boolean := a.booleanValue()

	fn castest_boolean2Boolean(a:boolean)->Boolean := Boolean.valueOf(a)

	
	fn if_boolean_cast_test()->boolean{

		System.out.println("if_boolean_cast_test")

		bool_a : boolean = true
		System.out.println(bool_a)
		if( ! bool_a )	return false 

		obj_b : Boolean = Boolean(false)
		System.out.println(obj_b)
		if( obj_b ) return false 
		
		System.out.println(bool_a && obj_b)

		if( ( bool_a && obj_b ) == true ) return false
		if( ( obj_b && bool_a ) == true ) return false

		System.out.println( !( !obj_b && bool_a ) )

		if( !( !obj_b && bool_a ) ) return false
		if( !!( obj_b && bool_a ) ) return false
		if( !(!( obj_b && bool_a )) ) return false
		
		return true
	}	

	fn for_boolean_cast_test()->boolean{

		System.out.println("for_boolean_cast_test")

		i:int = 0 
		for( ; i < 10 ; i++ )
		{
			System.out.println(i)
		}
		
		if( i != 10 ) return false
		
		return true
	}	



	fn type_test()->boolean {
	
		System.out.println("#type test")
	
		if( ! longtype_test() ) return false
	
		if( ! type_value_range_test() ) return false

		// int type 
		// a
		if( ! int_var_operation_test() ) return false
		// a[0]
		if( ! int_d1_map_operation_test() ) return false
		// a[0][0]
		if( ! int_d2_map_operation_test() ) return false
		// p.a
		if( ! int_member1_var_operation_test() ) return false
		// o.p.a
		if( ! int_member2_var_operation_test() ) return false
		// p.a[0]
		if( ! int_member1_d1_map_var_operation_test() ) return false
		// p.singleton_a[0]
		if( ! int_member_d1_singoletone_map_var_operation_test() ) return false
		//p[0].a
		if( ! int_member1_var_in_object_map_operation_test() ) return false
		//p[0].singleton_a
		if( ! int_singleton_member1_var_in_object_map_operation_test() ) return false
		// p[0].a[0]
		if( ! int_d1_map_in_object_map_operation_test() ) return false

		// char type 
		// a
		if( ! char_var_operation_test() ) return false
		// a[0]
		if( ! char_d1_map_operation_test() ) return false
		// a[0][0]
		if( ! char_d2_map_operation_test() ) return false
		// p.a
		if( ! char_member1_var_operation_test() ) return false
		// p.a[0]
		if( ! char_member1_d1_map_var_operation_test() ) return false

		// short type 
		// a
		if( ! short_var_operation_test() ) return false
		// a[0]
		if( ! short_d1_map_operation_test() ) return false
		// a[0][0]
		if( ! short_d2_map_operation_test() ) return false
		// p.a
		if( ! short_member1_var_operation_test() ) return false
		// p.a[0]
		if( ! short_member1_d1_map_var_operation_test() ) return false
		
		// byte type 
		// a
		if( ! byte_var_operation_test() ) return false
		// a[0]
		if( ! byte_d1_map_operation_test() ) return false
		// a[0][0]
		if( ! byte_d2_map_operation_test() ) return false
		// p.a
		if( ! byte_member1_var_operation_test() ) return false
		// p.a[0]
		if( ! byte_member1_d1_map_var_operation_test() ) return false
	
		
		// boolean type 
		// a
		if( ! boolean_operation_test() ) return false
		// a[0]
		if( ! boolean_d1_map_operation_test() ) return false
		// a[0][0]
		if( ! boolean_d2_map_operation_test() ) return false
		// p.a
		if( ! boolean_member1_var_operation_test() ) return false
		// o.p.a
		if( ! boolean_member2_var_operation_test() ) return false
		// p.a[0]
		if( ! boolean_member1_d1_map_var_operation_test() ) return false
		//p[0].a
		if( ! boolean_member1_d1_singleton_map_var_operation_test() ) return false
		//p[0].singleton_a
		if( ! boolean_member1_var_in_object_map_operation_test() ) return false	
		// p[0].a[0]
		if( ! boolean_d1_map_in_object_map_operation_test() ) return false
		
		
		// long type 
		// a
		if( ! long_var_operation_test() ) return false
		// a[0]
		if( ! long_d1_map_operation_test() ) return false
		// a[0][0]
		if( ! long_d2_map_operation_test() ) return false
		// p.a
		if( ! long_member1_var_operation_test() ) return false
		// o.p.a
		if( ! long_member2_var_operation_test() ) return false
		// p.a[0]
		if( ! long_member1_d1_map_var_operation_test() ) return false
		// p.singleton_a[0]
		if( ! long_member_d1_singoletone_map_var_operation_test() ) return false
		//p[0].a
		if( ! long_member1_var_in_object_map_operation_test() ) return false
		//p[0].singleton_a
		if( ! long_singleton_member1_var_in_object_map_operation_test() ) return false
		// p[0].a[0]
		if( ! long_d1_map_in_object_map_operation_test() ) return false
		
	
		// float type 
		// a
		if( ! float_var_operation_test() ) return false
		// a[0]
		if( ! float_d1_map_operation_test() ) return false
		// a[0][0]
		if( ! float_d2_map_operation_test() ) return false
		// p.a
		if( ! float_member1_var_operation_test() ) return false
		// o.p.a
		if( ! float_member2_var_operation_test() ) return false
		// p.a[0]
		if( ! float_member1_d1_map_var_operation_test() ) return false
		// p.singleton_a[0]
		if( ! float_member_d1_singoletone_map_var_operation_test() ) return false
		//p[0].a
		if( ! float_member1_var_in_object_map_operation_test() ) return false
		//p[0].singleton_a
		if( ! float_singleton_member1_var_in_object_map_operation_test() ) return false
		// p[0].a[0]
		if( ! float_d1_map_in_object_map_operation_test() ) return false


		// double type 
		// a
		if( ! double_var_operation_test() ) return false
		// a[0]
		if( ! double_d1_map_operation_test() ) return false
		// a[0][0]
		if( ! double_d2_map_operation_test() ) return false
		// p.a
		if( ! double_member1_var_operation_test() ) return false
		// o.p.a
		if( ! double_member2_var_operation_test() ) return false
		// p.a[0]
		if( ! double_member1_d1_map_var_operation_test() ) return false
		// p.singleton_a[0]
		if( ! double_member_d1_singoletone_map_var_operation_test() ) return false
		//p[0].a
		if( ! double_member1_var_in_object_map_operation_test() ) return false
		//p[0].singleton_a
		if( ! double_singleton_member1_var_in_object_map_operation_test() ) return false
		// p[0].a[0]
		if( ! double_d1_map_in_object_map_operation_test() ) return false
		
	
		if( !null_type_test() ) return false

		if( ! compatible_type_test() ) return false
	
		return true
	}


	fn compatible_type_test()->boolean {
		System.out.println("#compatible_type_test")
		
		i:int = 0

		// byte -> int
		b1:byte = 10B
		i = b1
		System.out.println("i="+i)
		if( i != 10 ) return false
		
		b2= 20B
		i = b2
		System.out.println("i="+i)
		if( i != 20 ) return false

			// int -> byte
			i1 = 10
			b3:byte = i1
			System.out.println("b3="+b3)
			if( b3 != 10B) return false

		
		// char -> int
		c1:char = 'a'
		i = c1
		System.out.printf("i=0x%x\n", i)
		if( i != 0x61 ) return false
		
		c2= 'b'
		i = c2
		System.out.printf("i=0x%x\n", i)
		if( i != 0x62 ) return false

			// int -> char
			i1 = 0x64
			c3:char = i1
			System.out.println("c3="+c3)
			if( c3 != 'd') return false



		// short -> int
		s1:short = 100S
		i = s1
		System.out.printf("i=%d\n", i)
		if( i != 100 ) return false
		
		s2= 200S
		i = s2
		System.out.printf("i=%d\n", i)
		if( i != 200 ) return false


			// int -> short
			i1 = 100
			s3:short = i1
			System.out.println("s3="+s3)
			if( s3 != 100S ) return false
			
	
		// long -> int
		l1:long = 10000L
		i_from_long = int<-l1 // type inference from type casting
		System.out.println("i_from_long="+i_from_long)
		if( i_from_long != 10000 ) return false
	
	
		return true
	}


	fn null_type_test()->boolean
	{
		System.out.println("#null_type_test")
	
		p:TestSuperParent = null

		System.out.println(p)		
		System.out.println("p="+p)		
		
		System.out.println( "p == null :" + (p == null))
		if( p == null ) {} else return false

		System.out.println( "null == p :" + (null == p))
		if( null == p ) {} else return false
		
		
		p = TestSuperParent()
		
		System.out.println( "p != null :" + (p != null))
		if( p != null ) {} else return false

		System.out.println( "null == p :" + (null != p))
		if( null != p ) {} else return false


		System.out.println( "null == null :" + (null == null))
		if( null == null ) {} else return false

		System.out.println( "null != null :" + (null != null))
		if( null != null ) return false 
		
	
		return true
	}


	/* int type operation test */
	// a
	fn int_var_operation_test()->boolean {
		
		System.out.println("#int_var_operation_test");
		
		aint:int = 0
		bint:int = 0
	
		// multiply '*'
		System.out.println("-multiply '*'")
		aint = 100 * 100 
		System.out.println("aint="+aint)
		if( aint != 10000 ) return false
		
		aint = 100 * 100 + 1 
		System.out.println("aint="+aint)
		if( aint != 10001 ) return false
		
		aint = 100 * (100 + 1) 
		System.out.println("aint="+aint)
		if( aint != 10100 ) return false
		
		aint = 100 * (100 + 10 * 10) 
		System.out.println("aint="+aint)
		if( aint != 20000 ) return false
		
		// division
		System.out.println("-// division")

		aint = 100 / 100 
		System.out.println("aint="+aint)
		if( aint != 1 ) return false

		aint = 100 / 100 + 1 
		System.out.println("aint="+aint)
		if( aint != 2 ) return false
		
		aint = 100 / (99 + 1) 
		System.out.println("aint="+aint)
		if( aint != 1 ) return false
		
		
		aint = 100 / (99 + 10 / 10) 
		System.out.println("aint="+aint)
		if( aint != 1 ) return false

		aint = 100 * 100 / 1000 + 100 / 100 * 10 
		System.out.println("aint="+aint)
		if( aint != 20 ) return false

		
		// rest
		System.out.println("-// rest")
		aint = 10 % 9 	
		System.out.println("aint="+aint)
		if( aint != 1 ) return false
		
		aint = 10 % 9 * 100 	
		System.out.println("aint="+aint)
		if( aint != 100 ) return false

		aint = 10 % 9 + 1	
		System.out.println("aint="+aint)
		if( aint != 2 ) return false

		aint = (5 + 5 ) % 9 + 1	
		System.out.println("aint="+aint)
		if( aint != 2 ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		aint = 100
		if( aint <= 100 ) { System.out.println( "aint(=" + aint+") <= 100" ) }
		else return false
		
		if( aint <= 101 ) { System.out.println( "aint(=" + aint+") <= 101" ) }
		else return false
		
		if( aint <= 99 ) return false
		else { System.out.println( "aint(=" + aint+") <= 99 : false" ) }
		
		if( aint >= 100 ) { System.out.println( "aint(=" + aint+") >= 100" ) }
		else return false
		
		if( aint >= 99 ) { System.out.println( "aint(=" + aint+") <= 99" ) }
		else return false

		if( aint >= 101 ) return false
		else { System.out.println( "aint(=" + aint+") <= 101 : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		aint = 0x1F
		bint = aint & 0xF0
		System.out.printf("bint=0x%x\n", bint)
		if( bint != 0x10 ) return false

	
		//if( aint & 0xF0 != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( aint & 0xF0) != 0x10 ) return false
		bint = 0xF0 & aint
		System.out.printf("bint=0x%x\n", bint)
		if( bint != 0x10 ) return false
		//if( 0xF0 & aint != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0 & aint ) != 0x10 ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		aint = 0x0F
		bint = aint ^ 0xFF
		System.out.printf("bint=0x%x\n", bint)
		if( bint != 0xf0 ) return false
		
		
		if( ( aint ^ 0xFF) != 0xf0 ) return false
		bint = 0xFF ^ aint
		System.out.printf("bint=0x%x\n", bint)
		if( 0xf0 != bint ) return false
		if( 0xf0 != ( 0xFF ^ aint) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		aint = 0x0F
		bint = aint | 0xF0
		System.out.printf("bint=0x%x\n", bint)
		if( bint != 0xff ) return false
		
		if( ( aint | 0xF0) != 0xff ) return false
		bint = 0xF0 | aint
		System.out.printf("bint=0x%x\n", bint)
		if( 0xff != bint ) return false
		if( 0xff != ( 0xF0 | aint) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		aint = 0x0F
		
		// logical and '&&'
		if(
			!( 
			   ( aint & 0xFF ) == 0x0F && 
			   ( aint ^ 0xFF ) == 0xF0 &&
			   ( aint | 0xF0 ) == 0xFF 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( aint & 0xFF ) != 0x0F || 
		   ( aint ^ 0xFF ) != 0xF0 ||
		   ( aint | 0xF0 ) != 0xFF 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		aint = 0x1
		
		bint = aint << 1
		System.out.printf("bint=0x%x\n", bint)
		if( bint != 2 ) return false
	
		bint = aint << 4
		System.out.printf("bint=0x%x\n", bint)
		if( bint != 0x10 ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		aint = 0x10
		bint = aint >> 1
		System.out.printf("bint=0x%x\n", bint)
		if( bint != 0x8 ) return false
		
		bint = aint >> 4
		System.out.printf("bint=0x%x\n", bint)
		if( bint != 0x1 ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		aint = 0x01
		bint = ~aint
		System.out.printf("bint=0x%x(%d)\n", bint, bint)
		System.out.printf("0xfffffffe=0x%x(%d)\n", 0xfffffffe, 0xfffffffe)
		if( bint != 0xfffffffe ) return false

		
		// ++, --
		System.out.println("-// postfix ++")
		aint = 10
		bint = aint++
		if( !( aint == 11 && bint == 10 ) ) return false
		
		System.out.println("-// unary ++")
		aint = 10
		bint = ++aint
		if( !( aint == 11 && bint == 11 ) ) return false

		System.out.println("-// postfix --")
		aint = 10
		bint = aint--
		if( !( aint == 9 && bint == 10 ) ) return false
		
		
		
		System.out.println("-// unary --")
		aint = 10
		bint = --aint
		if( !( aint == 9 && bint == 9 ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		aint = 10 * -1
		System.out.println( "aint="+aint)
		if( aint != -10 ) return false
		
		aint = 10
		aint = -aint
		System.out.println( "aint="+aint)
		if( aint != -10 ) return false
		
		aint = -10
		aint = -aint 
		System.out.println( "aint="+aint)
		if( aint != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		aint = 10
		System.out.println("aint *= 10; aint = " + (aint *= 10) )
		System.out.println( aint  )
		if( aint != 100 ) return false
		
		if( ( aint *= 10 ) != 1000 ) return false
		if( ( aint *= -10 ) != -10000 ) return false
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		aint = 10000
		System.out.println("aint /= 10; aint = " + (aint /= 10) )
		System.out.println( aint  )
		if( aint != 1000 ) return false
		
		if( ( aint /= 10 ) != 100 ) return false
		if( ( aint /= -10 ) != -10 ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		aint = 15
		System.out.println("aint %= 9; aint = " + (aint %= 9) )
		System.out.println( aint  )
		if( aint != 6 ) return false

		if( ( aint %= 4 ) != 2 ) return false
		if( ( aint %= 2 ) != 0 ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		aint = 10
		System.out.println( aint += 10 )
		System.out.println( aint  )
		if( aint != 20 ) return false
		
		if( ( aint += 10 ) != 30 ) return false
		if( ( aint += -10 ) != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		aint = 30
		System.out.println( aint -= 10 )
		System.out.println( aint  )
		if( aint != 20 ) return false

		if( ( aint -= 10 ) != 10 ) return false
		if( ( aint -= -10 ) != 20 ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		aint = 1
		System.out.printf("aint <<= 1 ; aint = 0x%x\n", (aint <<= 1) )
		System.out.println( aint  )
		if( aint != 2 ) return false
		
		System.out.printf("aint <<= 4; aint = 0x%x\n",  aint <<= 4  )
		if( aint != 0x20 ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		aint = 0x10
		System.out.printf("aint >>= 1 ; aint = 0x%x\n",  (aint >>= 1) )
		System.out.println( "0x" + Integer.toHexString(aint)  )
		if( aint != 0x08 ) return false
		
			
		System.out.printf("aint >>= 3; aint = 0x%x\n",  aint >>= 3  )
		if( aint != 0x1 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		aint = 0x1
		System.out.printf("aint &= 1 ; aint = 0x%x\n", (aint &= 1) )
		System.out.println( "0x" + Integer.toHexString(aint)  )
		if( aint != 0x1 ) return false
		
		System.out.printf("aint &= 0; aint = 0x%x\n",  aint &= 0  )
		if( aint != 0 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		aint = 0x0F
		System.out.printf("aint ^= 0xFF ; aint = 0x%x\n",  (aint ^= 0xFF) )
		System.out.println( "0x" + Integer.toHexString(aint)  )
		if( aint != 0xF0 ) return false
		
		System.out.printf("aint ^= 0x0F; aint = 0x%x\n",  aint ^= 0x0F  )
		if( aint != 0xFF ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		aint = 0x0F
		System.out.printf("aint |= 0xF0 ; aint = 0x%x\n",  (aint |= 0xF0) )
		System.out.println( "0x" + Integer.toHexString(aint)  )
		if( aint != 0xFF ) return false
		
		System.out.printf("aint |= 0xF00; aint = 0x%x\n",  aint |= 0xF00  )
		if( aint != 0xFFF ) return false

		
		return true

	}
	
	// a[0]
	fn int_d1_map_operation_test()->boolean {
		
		System.out.println("#int_d1map_operation_test");
		
		arrint:int[] = int[100]
		arrint[0] = 100
		if( arrint[0] != 100 ) return false

	
		// multiply '*'
		System.out.println("-multiply '*'")

		arrint[1] = arrint[0] * 100
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 10000 ) return false
		
		arrint[1] = arrint[0] * arrint[0] + 1
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 10001 ) return false

		arrint[1] = arrint[0] * (arrint[0] + 1)
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 10100 ) return false

		arrint[1] = arrint[0] * (arrint[0] + 10 * 10)
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 20000 ) return false

		
		// division
		System.out.println("-// division")

		arrint[1] = arrint[0] / arrint[0]
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 1 ) return false

		arrint[1] = arrint[0] / arrint[0] + 1
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 2 ) return false
		
		
		arrint[2] = 99
		arrint[1] = arrint[0] / ( arrint[2] + 1 )
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 1 ) return false

		arrint[2] = 99
		arrint[3] = 10
		arrint[1] = arrint[0] / ( arrint[2] + 10 / arrint[3] )
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 1 ) return false


		arrint[2] = 10
		arrint[1] = 100 * arrint[0] / 1000 + 100 / 100 * arrint[2] 
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 20 ) return false


		
		// rest
		System.out.println("-// rest")
		arrint[2] = 10 
		arrint[3] = 9 
		arrint[1] = arrint[2] % arrint[3]
		System.out.println("arrint[1]="+arrint[1])
		if( arrint[1] != 1 ) return false
		
		
		// comparation
		System.out.println("-// comparation")

		if( arrint[0] <= 100 ) { System.out.println( "arrint[0](=" + arrint[0]+") <= 100" ) }
		else return false

		if( arrint[0] <= 101 ) { System.out.println( "arrint[0](=" + arrint[0]+") <= 101" ) }
		else return false
		
		if( arrint[0] <= 99 ) return false
		else { System.out.println( "arrint[0](=" + arrint[0]+") <= 99 : false" ) }
		
		if( arrint[0] >= 100 ) { System.out.println( "arrint[0](=" + arrint[0]+") >= 100" ) }
		else return false
		
		if( arrint[0] >= 99 ) { System.out.println( "arrint[0](=" + arrint[0]+") <= 99" ) }
		else return false
		
		if( arrint[0] >= 101 ) return false
		else { System.out.println( "arrint[0](=" + arrint[0]+") <= 101 : false" ) }
		
		
		// and '&' 
		System.out.println("-// and '&' ")

		arrint[0] = 0x1F
		arrint[1] = arrint[0] & 0xF0
		System.out.printf("arrint[1]=0x%x\n", arrint[1])
		if( arrint[1] != 0x10 ) return false
	
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		
		arrint[0] = 0x0F
		arrint[1] = arrint[0] ^ 0xFF
		System.out.printf("arrint[1]=0x%x\n", arrint[1])
		if( arrint[1] != 0xf0 ) return false		

		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		arrint[0] = 0x0F
		arrint[1] = arrint[0] | 0xF0
		System.out.printf("arrint[1]=0x%x\n", arrint[1])
		if( arrint[1] != 0xff ) return false		
		


		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
	
		arrint[0] = 1
		arrint[1] = arrint[0] << 1
		System.out.printf("arrint[1]=0x%x\n", arrint[1])
		if( arrint[1] != 2 ) return false		
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		
		arrint[0] = 0x10
		arrint[1] = arrint[0] >> 1
		System.out.printf("arrint[1]=0x%x\n", arrint[1])
		if( arrint[1] != 0x8 ) return false	

		
		// inverse '~'
		System.out.println("-// inverse '~'")

		arrint[0] = 0x01
		arrint[1] = ~arrint[0]
		System.out.printf(" inverse '~' arrint[1]=0x%x\n", arrint[1])
		if( arrint[1] != 0xfffffffe ) return false	

		
		// ++, --
		System.out.println("-// postfix ++")
		arrint[0] = 10
		arrint[1] = arrint[0]++
		System.out.printf("arrint[1]=%d\n", arrint[1])
		if( !( arrint[0] == 11 && arrint[1] == 10 ) ) return false	

		
		System.out.println("-// unary ++")
		arrint[0] = 10
		arrint[1] = ++arrint[0]
		System.out.printf("++arrint[0]; arrint[1]=%d\n", arrint[1])
		if( !( arrint[0] == 11 && arrint[1] == 11 ) ) return false	
		
		
		System.out.println("-// postfix --")
		arrint[0] = 10
		arrint[1] = arrint[0]--
		System.out.printf("arrint[1]=%d\n", arrint[1])
		if( !( arrint[0] == 9 && arrint[1] == 10 ) ) return false	
		
		
		System.out.println("-// unary --")
		arrint[0] = 10
		arrint[1] = --arrint[0]
		System.out.printf("arrint[1]=%d\n", arrint[1])
		if( !( arrint[0] == 9 && arrint[1] == 9 ) ) return false	
		
		
		// negative number
		arrint[0] = 1
		arrint[1] = 10 * -arrint[0] 
		System.out.printf("arrint[1]=%d\n", arrint[1])
		if( arrint[1] != -10 ) return false	
		
		
		arrint[0] = 10
		arrint[0] = -arrint[0]
		System.out.printf("arrint[0]=%d\n", arrint[0])
		if( arrint[0] != -10 ) return false
		
		arrint[0] = -10
		arrint[0] = -arrint[0]
		System.out.printf("arrint[0]=%d\n", arrint[0])
		if( arrint[0] != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		arrint[0] = 10
		arrint[0] *= 10
		System.out.println(arrint[0])
		if( arrint[0] != 100 ) return false
		
		arrint[0] = 10
		arrint[1] = 2
		arrint[0] *= arrint[1]
		System.out.println(arrint[0])
		if( arrint[0] != 20 ) return false
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		arrint[0] = 10000
		arrint[0] /= 10
		System.out.println(arrint[0])
		if( arrint[0] != 1000 ) return false

		// rest assign '%='
		System.out.println("-// rest assign '%='")
		arrint[0] = 15
		arrint[0] %= 9
		System.out.println(arrint[0])
		if( arrint[0] != 6 ) return false
		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		arrint[0] = 10
		arrint[0] += 10
		System.out.println(arrint[0])
		if( arrint[0] != 20 ) return false
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		arrint[0] = 30
		arrint[0] -= 10
		System.out.println(arrint[0])
		if( arrint[0] != 20 ) return false

		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		arrint[0] = 1
		arrint[0] <<= 1
		System.out.println(arrint[0])
		if( arrint[0] != 2 ) return false

	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		arrint[0] = 0x10
		arrint[0] >>= 1
		System.out.println(arrint[0])
		if( arrint[0] != 0x08 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		arrint[0] = 0x1
		arrint[0] &= 1
		System.out.println(arrint[0])
		if( arrint[0] != 0x1 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		arrint[0] = 0x0F
		arrint[0] ^= 0xFF
		System.out.println(arrint[0])
		if( arrint[0] != 0xF0 ) return false
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		arrint[0] = 0x0F
		arrint[0] |= 0xF0
		System.out.println(arrint[0])
		if( arrint[0] != 0xFF ) return false
		
		return true

	}	
	
	// a[0][0]
	fn int_d2_map_operation_test()->boolean {
		
		System.out.println("#int_d2_map_operation_test");
		arrint2:int[][] = int[100][]
		arrint2[0] = int[100]
		arrint2[0][0] = 100
		if( arrint2[0][0] != 100 ) return false
	
	
		// multiply '*'
		arrint2[0][1] = arrint2[0][0] * 100
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 10000 ) return false

		arrint2[0][1] = arrint2[0][0] * arrint2[0][0] + 1
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 10001 ) return false

		arrint2[0][1] = arrint2[0][0] * (arrint2[0][0] + 1)
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 10100 ) return false		
		
		arrint2[0][1] = arrint2[0][0] * (arrint2[0][0] + 10 * 10)
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 20000 ) return false
		
		// division
		System.out.println("-// division")
		arrint2[0][1] = arrint2[0][0] / arrint2[0][0]
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 1 ) return false

		arrint2[0][1] = arrint2[0][0] / arrint2[0][0] + 1
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 2 ) return false		
		
		arrint2[0][2] = 99
		arrint2[0][1] = arrint2[0][0] / ( arrint2[0][2] + 1 )
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 1 ) return false
		
		arrint2[0][2] = 99
		arrint2[0][3] = 10
		arrint2[0][1] = arrint2[0][0] / ( arrint2[0][2] + 10 / arrint2[0][3] )
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 1 ) return false

		arrint2[0][2] = 10
		arrint2[0][1] = 100 * arrint2[0][0] / 1000 + 100 / 100 * arrint2[0][2] 
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 20 ) return false		
		
		
		// rest
		System.out.println("-// rest")
		arrint2[0][2] = 10 
		arrint2[0][3] = 9 
		arrint2[0][1] = arrint2[0][2] % arrint2[0][3]
		System.out.println("arrint2[0][1]="+arrint2[0][1])
		if( arrint2[0][1] != 1 ) return false		

		
		// comparation
		System.out.println("-// comparation")
		if( arrint2[0][0] <= 100 ) { System.out.println( "arrint2[0][0](=" + arrint2[0][0]+") <= 100" ) }
		else return false
	
		if( arrint2[0][0] <= 101 ) { System.out.println( "arrint2[0][0](=" + arrint2[0][0]+") <= 101" ) }
		else return false
		
		if( arrint2[0][0] <= 99 ) return false
		else { System.out.println( "arrint2[0][0](=" + arrint2[0][0]+") <= 99 : false" ) }		
		
		if( arrint2[0][0] >= 100 ) { System.out.println( "arrint2[0][0](=" + arrint2[0][0]+") >= 100" ) }
		else return false		
		
		if( arrint2[0][0] >= 99 ) { System.out.println( "arrint2[0][0](=" + arrint2[0][0]+") <= 99" ) }
		else return false		
		
		if( arrint2[0][0] >= 101 ) return false
		else { System.out.println( "arrint2[0][0](=" + arrint2[0][0]+") <= 101 : false" ) }		
		
		
		// and '&' 
		System.out.println("-// and '&' ")
		arrint2[0][0] = 0x1F
		arrint2[0][1] = arrint2[0][0] & 0xF0
		System.out.printf("arrint[1]=0x%x\n", arrint2[0][1])
		if( arrint2[0][1] != 0x10 ) return false		
	
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		arrint2[0][0] = 0x0F
		arrint2[0][1] = arrint2[0][0] ^ 0xFF
		System.out.printf("arrint2[0][1]=0x%x\n", arrint2[0][1])
		if( arrint2[0][1] != 0xf0 ) return false			

		arrint2[0][0] = 0x0F
		arrint2[0][1] = arrint2[0][0] | 0xF0
		System.out.printf("arrint2[0][1]=0x%x\n", arrint2[0][1])
		if( arrint2[0][1] != 0xff ) return false			


		// left shift '<<'
		System.out.println("-// left shift '<<'")
		arrint2[0][0] = 1
		arrint2[0][1] = arrint2[0][0] << 1
		System.out.printf("arrint2[0][1]=0x%x\n", arrint2[0][1])
		if( arrint2[0][1] != 2 ) return false	

		arrint2[0][0] = 0x10
		arrint2[0][1] = arrint2[0][0] >> 1
		System.out.printf("arrint2[0][1]=0x%x\n", arrint2[0][1])
		if( arrint2[0][1] != 0x8 ) return false	
		
		
		// inverse '~'
		System.out.println("-// inverse '~'")
		arrint2[0][0] = 0x01
		arrint2[0][1] = ~arrint2[0][0]
		System.out.printf("arrint2[0][1]=0x%x\n", arrint2[0][1])
		if( arrint2[0][1] != 0xfffffffe ) return false			
		
		
		// ++, --
		System.out.println("-// postfix ++")
		arrint2[0][0] = 10
		arrint2[0][1] = arrint2[0][0]++
		System.out.printf("arrint2[0][0]++ ; arrint2[0][1]=%d\n", arrint2[0][1])
		if( !( arrint2[0][0] == 11 && arrint2[0][1] == 10 ) ) return false			
		

		System.out.println("-// unary ++")
		arrint2[0][0] = 10
		arrint2[0][1] = ++arrint2[0][0]
		System.out.printf("++arrint2[0][0]; arrint2[0][1]=%d\n", arrint2[0][1])
		if( !( arrint2[0][0] == 11 && arrint2[0][1] == 11 ) ) return false			
		
		
		
		System.out.println("-// postfix --")
		arrint2[0][0] = 10
		arrint2[0][1] = arrint2[0][0]--
		System.out.printf("arrint2[0][0]--; arrint2[0][1]=%d\n", arrint2[0][1])
		if( !( arrint2[0][0] == 9 && arrint2[0][1] == 10 ) ) return false			
		
		
		
		System.out.println("-// unary --")
		arrint2[0][0] = 10
		arrint2[0][1] = --arrint2[0][0]
		System.out.printf("arrint2[0][1]=%d\n", arrint2[0][1])
		if( !( arrint2[0][0] == 9 && arrint2[0][1] == 9 ) ) return false		
		
		
		// negative number
		System.out.println("-// negative number")	
		arrint2[0][0] = 1
		arrint2[0][1] = 10 * -arrint2[0][0] 
		System.out.printf("arrint2[0][1]=%d\n", arrint2[0][1])
		if( arrint2[0][1] != -10 ) return false			
		
		arrint2[0][0] = 10
		arrint2[0][0] = -arrint2[0][0]
		System.out.printf("arrint2[0][0]=%d\n", arrint2[0][0])
		if( arrint2[0][0] != -10 ) return false		
		
		arrint2[0][0] = -10
		arrint2[0][0] = -arrint2[0][0]
		System.out.printf("arrint2[0][0]=%d\n", arrint2[0][0])
		if( arrint2[0][0] != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		arrint2[0][0] = 10
		arrint2[0][0] *= 10
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 100 ) return false
		
		arrint2[0][0] = 10
		arrint2[0][1] = 2
		arrint2[0][0] *= arrint2[0][1]
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 20 ) return false
		
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		arrint2[0][0] = 10000
		arrint2[0][0] /= 10
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 1000 ) return false

		// rest assign '%='
		System.out.println("-// rest assign '%='")
		arrint2[0][0] = 15
		arrint2[0][0] %= 9
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 6 ) return false
		
		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		arrint2[0][0] = 10
		arrint2[0][0] += 10
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		arrint2[0][0] = 30
		arrint2[0][0] -= 10
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 20 ) return false

		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		arrint2[0][0] = 1
		arrint2[0][0] <<= 1
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 2 ) return false		

	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		arrint2[0][0] = 0x10
		arrint2[0][0] >>= 1
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 0x08 ) return false		

		// and assign '&='
		System.out.println("-// and assign '&='")
		arrint2[0][0] = 0x1
		arrint2[0][0] &= 1
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 0x1 ) return false		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		arrint2[0][0] = 0x0F
		arrint2[0][0] ^= 0xFF
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 0xF0 ) return false		
		
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		arrint2[0][0] = 0x0F
		arrint2[0][0] |= 0xF0
		System.out.println(arrint2[0][0])
		if( arrint2[0][0] != 0xFF ) return false
		
		
		return true
	}
	
	// p.a
	fn int_member1_var_operation_test()->boolean {
		
		System.out.println("#int_member1_var_operation_test");

		p:TestSuperParent = TestSuperParent()
		//System.out.println( p.aint+= 10 )

		// multiply '*'
		System.out.println("-multiply '*'")
		p.aint = 100 * 100 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 10000 ) return false
		
		p.aint = 100 * 100 + 1 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 10001 ) return false
		
		p.aint = 100 * (100 + 1) 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 10100 ) return false
		
		p.aint = 100 * (100 + 10 * 10) 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 20000 ) return false
		
		// division
		System.out.println("-// division")

		p.aint = 100 / 100 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 1 ) return false

		p.aint = 100 / 100 + 1 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 2 ) return false
		
		p.aint = 100 / (99 + 1) 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 1 ) return false
		
		
		p.aint = 100 / (99 + 10 / 10) 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 1 ) return false

		p.aint = 100 * 100 / 1000 + 100 / 100 * 10 
		System.out.println("p.aint="+p.aint)
		if( p.aint != 20 ) return false

		
		// rest
		System.out.println("-// rest")
		p.aint = 10 % 9 	
		System.out.println("p.aint="+p.aint)
		if( p.aint != 1 ) return false
		
		p.aint = 10 % 9 * 100 	
		System.out.println("p.aint="+p.aint)
		if( p.aint != 100 ) return false

		p.aint = 10 % 9 + 1	
		System.out.println("p.aint="+p.aint)
		if( p.aint != 2 ) return false

		p.aint = (5 + 5 ) % 9 + 1	
		System.out.println("p.aint="+p.aint)
		if( p.aint != 2 ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.aint = 100
		if( p.aint <= 100 ) { System.out.println( "p.aint(=" + p.aint+") <= 100" ) }
		else return false
		
		if( p.aint <= 101 ) { System.out.println( "p.aint(=" + p.aint+") <= 101" ) }
		else return false
		
		if( p.aint <= 99 ) return false
		else { System.out.println( "p.aint(=" + p.aint+") <= 99 : false" ) }
		
		if( p.aint >= 100 ) { System.out.println( "p.aint(=" + p.aint+") >= 100" ) }
		else return false
		
		if( p.aint >= 99 ) { System.out.println( "p.aint(=" + p.aint+") <= 99" ) }
		else return false

		if( p.aint >= 101 ) return false
		else { System.out.println( "p.aint(=" + p.aint+") <= 101 : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		p.aint = 0x1F
		p.bint = p.aint & 0xF0
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( p.bint != 0x10 ) return false

	
		//if( p.aint & 0xF0 != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( p.aint & 0xF0) != 0x10 ) return false
		p.bint = 0xF0 & p.aint
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( p.bint != 0x10 ) return false
		//if( 0xF0 & p.aint != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0 & p.aint ) != 0x10 ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		p.aint = 0x0F
		p.bint = p.aint ^ 0xFF
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( p.bint != 0xf0 ) return false
		
		
		if( ( p.aint ^ 0xFF) != 0xf0 ) return false
		p.bint = 0xFF ^ p.aint
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( 0xf0 != p.bint ) return false
		if( 0xf0 != ( 0xFF ^ p.aint) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		p.aint = 0x0F
		p.bint = p.aint | 0xF0
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( p.bint != 0xff ) return false
		
		if( ( p.aint | 0xF0) != 0xff ) return false
		p.bint = 0xF0 | p.aint
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( 0xff != p.bint ) return false
		if( 0xff != ( 0xF0 | p.aint) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		p.aint = 0x0F
		
		// logical and '&&'
		if(
			!( 
			   ( p.aint & 0xFF ) == 0x0F && 
			   ( p.aint ^ 0xFF ) == 0xF0 &&
			   ( p.aint | 0xF0 ) == 0xFF 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( p.aint & 0xFF ) != 0x0F || 
		   ( p.aint ^ 0xFF ) != 0xF0 ||
		   ( p.aint | 0xF0 ) != 0xFF 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		p.aint = 0x1
		
		p.bint = p.aint << 1
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( p.bint != 2 ) return false
	
		p.bint = p.aint << 4
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( p.bint != 0x10 ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		p.aint = 0x10
		p.bint = p.aint >> 1
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( p.bint != 0x8 ) return false
		
		p.bint = p.aint >> 4
		System.out.printf("p.bint=0x%x\n", p.bint)
		if( p.bint != 0x1 ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		p.aint = 0x01
		p.bint = ~p.aint
		System.out.printf("p.bint=0x%x(%d)\n", p.bint, p.bint)
		System.out.printf("0xfffffffe=0x%x(%d)\n", 0xfffffffe, 0xfffffffe)
		if( p.bint != 0xfffffffe ) return false

		// ++, --
		System.out.println("-// postfix ++")
		p.aint = 10
		p.bint = p.aint++
		if( !( p.aint == 11 && p.bint == 10 ) ) return false
		
		System.out.println("-// unary ++")
		p.aint = 10
		p.bint = ++p.aint
		if( !( p.aint == 11 && p.bint == 11 ) ) return false

		System.out.println("-// postfix --")
		p.aint = 10
		p.bint = p.aint--
		if( !( p.aint == 9 && p.bint == 10 ) ) return false
		
		
		
		System.out.println("-// unary --")
		p.aint = 10
		p.bint = --p.aint
		if( !( p.aint == 9 && p.bint == 9 ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		p.aint = 10 * -1
		System.out.println( "p.aint="+p.aint)
		if( p.aint != -10 ) return false
		
		p.aint = 10
		p.aint = -p.aint
		System.out.println( "p.aint="+p.aint)
		if( p.aint != -10 ) return false
		
		p.aint = -10
		p.aint = -p.aint 
		System.out.println( "p.aint="+p.aint)
		if( p.aint != 10 ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.aint = 10
		System.out.println("p.aint *= 10; p.aint = " + (p.aint *= 10) )
		System.out.println( p.aint  )
		if( p.aint != 100 ) return false
		
		if( ( p.aint *= 10 ) != 1000 ) return false
		if( ( p.aint *= -10 ) != -10000 ) return false
		

		
		// division assign '/='
		System.out.println("-// division assign '/='")
		p.aint = 10000
		System.out.println("p.aint /= 10; p.aint = " + (p.aint /= 10) )
		System.out.println( p.aint  )
		if( p.aint != 1000 ) return false
		
		if( ( p.aint /= 10 ) != 100 ) return false
		if( ( p.aint /= -10 ) != -10 ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.aint = 15
		System.out.println("p.aint %= 9; p.aint = " + (p.aint %= 9) )
		System.out.println( p.aint  )
		if( p.aint != 6 ) return false

		if( ( p.aint %= 4 ) != 2 ) return false
		if( ( p.aint %= 2 ) != 0 ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.aint = 10
		System.out.println( p.aint += 10 )
		System.out.println( p.aint  )
		if( p.aint != 20 ) return false
		
		if( ( p.aint += 10 ) != 30 ) return false
		if( ( p.aint += -10 ) != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.aint = 30
		System.out.println( p.aint -= 10 )
		System.out.println( p.aint  )
		if( p.aint != 20 ) return false

		if( ( p.aint -= 10 ) != 10 ) return false
		if( ( p.aint -= -10 ) != 20 ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		p.aint = 1
		System.out.printf("p.aint <<= 1 ; p.aint = 0x%x\n", (p.aint <<= 1) )
		System.out.println( p.aint  )
		if( p.aint != 2 ) return false
		
		System.out.printf("p.aint <<= 4; p.aint = 0x%x\n",  p.aint <<= 4  )
		if( p.aint != 0x20 ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		p.aint = 0x10
		System.out.printf("p.aint >>= 1 ; p.aint = 0x%x\n",  (p.aint >>= 1) )
		System.out.println( "0x" + Integer.toHexString(p.aint)  )
		if( p.aint != 0x08 ) return false
		
			
		System.out.printf("p.aint >>= 3; p.aint = 0x%x\n",  p.aint >>= 3  )
		if( p.aint != 0x1 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		p.aint = 0x1
		System.out.printf("p.aint &= 1 ; p.aint = 0x%x\n", (p.aint &= 1) )
		System.out.println( "0x" + Integer.toHexString(p.aint)  )
		if( p.aint != 0x1 ) return false
		
		System.out.printf("p.aint &= 0; p.aint = 0x%x\n",  p.aint &= 0  )
		if( p.aint != 0 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		p.aint = 0x0F
		System.out.printf("p.aint ^= 0xFF ; p.aint = 0x%x\n",  (p.aint ^= 0xFF) )
		System.out.println( "0x" + Integer.toHexString(p.aint)  )
		if( p.aint != 0xF0 ) return false
		
		System.out.printf("p.aint ^= 0x0F; p.aint = 0x%x\n",  p.aint ^= 0x0F  )
		if( p.aint != 0xFF ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		p.aint = 0x0F
		System.out.printf("p.aint |= 0xF0 ; p.aint = 0x%x\n",  (p.aint |= 0xF0) )
		System.out.println( "0x" + Integer.toHexString(p.aint)  )
		if( p.aint != 0xFF ) return false
		
		System.out.printf("p.aint |= 0xF00; p.aint = 0x%x\n",  p.aint |= 0xF00  )
		if( p.aint != 0xFFF ) return false

		return true

	}
	
	// o.p.a
	fn int_member2_var_operation_test()->boolean {
		
		System.out.println("#int_member2_var_operation_test");
		
		o:TestSuperParentOwner = TestSuperParentOwner()
	
		// multiply '*'
		System.out.println("-multiply '*'")
		o.p.aint = 100 * 100 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 10000 ) return false
		
		o.p.aint = 100 * 100 + 1 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 10001 ) return false
		
		o.p.aint = 100 * (100 + 1) 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 10100 ) return false
		
		o.p.aint = 100 * (100 + 10 * 10) 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 20000 ) return false
		
		// division
		System.out.println("-// division")

		o.p.aint = 100 / 100 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 1 ) return false

		o.p.aint = 100 / 100 + 1 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 2 ) return false
		
		o.p.aint = 100 / (99 + 1) 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 1 ) return false
		
		
		o.p.aint = 100 / (99 + 10 / 10) 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 1 ) return false

		o.p.aint = 100 * 100 / 1000 + 100 / 100 * 10 
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 20 ) return false

		
		// rest
		System.out.println("-// rest")
		o.p.aint = 10 % 9 	
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 1 ) return false
		
		o.p.aint = 10 % 9 * 100 	
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 100 ) return false

		o.p.aint = 10 % 9 + 1	
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 2 ) return false

		o.p.aint = (5 + 5 ) % 9 + 1	
		System.out.println("o.p.aint="+o.p.aint)
		if( o.p.aint != 2 ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		o.p.aint = 100
		if( o.p.aint <= 100 ) { System.out.println( "o.p.aint(=" + o.p.aint+") <= 100" ) }
		else return false
		
		if( o.p.aint <= 101 ) { System.out.println( "o.p.aint(=" + o.p.aint+") <= 101" ) }
		else return false
		
		if( o.p.aint <= 99 ) return false
		else { System.out.println( "o.p.aint(=" + o.p.aint+") <= 99 : false" ) }
		
		if( o.p.aint >= 100 ) { System.out.println( "o.p.aint(=" + o.p.aint+") >= 100" ) }
		else return false
		
		if( o.p.aint >= 99 ) { System.out.println( "o.p.aint(=" + o.p.aint+") <= 99" ) }
		else return false

		if( o.p.aint >= 101 ) return false
		else { System.out.println( "o.p.aint(=" + o.p.aint+") <= 101 : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		o.p.aint = 0x1F
		o.p.bint = o.p.aint & 0xF0
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( o.p.bint != 0x10 ) return false

	
		//if( o.p.aint & 0xF0 != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( o.p.aint & 0xF0) != 0x10 ) return false
		o.p.bint = 0xF0 & o.p.aint
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( o.p.bint != 0x10 ) return false
		//if( 0xF0 & o.p.aint != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0 & o.p.aint ) != 0x10 ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		o.p.aint = 0x0F
		o.p.bint = o.p.aint ^ 0xFF
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( o.p.bint != 0xf0 ) return false
		
		
		if( ( o.p.aint ^ 0xFF) != 0xf0 ) return false
		o.p.bint = 0xFF ^ o.p.aint
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( 0xf0 != o.p.bint ) return false
		if( 0xf0 != ( 0xFF ^ o.p.aint) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		o.p.aint = 0x0F
		o.p.bint = o.p.aint | 0xF0
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( o.p.bint != 0xff ) return false
		
		if( ( o.p.aint | 0xF0) != 0xff ) return false
		o.p.bint = 0xF0 | o.p.aint
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( 0xff != o.p.bint ) return false
		if( 0xff != ( 0xF0 | o.p.aint) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		o.p.aint = 0x0F
		
		// logical and '&&'
		if(
			!( 
			   ( o.p.aint & 0xFF ) == 0x0F && 
			   ( o.p.aint ^ 0xFF ) == 0xF0 &&
			   ( o.p.aint | 0xF0 ) == 0xFF 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( o.p.aint & 0xFF ) != 0x0F || 
		   ( o.p.aint ^ 0xFF ) != 0xF0 ||
		   ( o.p.aint | 0xF0 ) != 0xFF 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		o.p.aint = 0x1
		
		o.p.bint = o.p.aint << 1
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( o.p.bint != 2 ) return false
	
		o.p.bint = o.p.aint << 4
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( o.p.bint != 0x10 ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		o.p.aint = 0x10
		o.p.bint = o.p.aint >> 1
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( o.p.bint != 0x8 ) return false
		
		o.p.bint = o.p.aint >> 4
		System.out.printf("o.p.bint=0x%x\n", o.p.bint)
		if( o.p.bint != 0x1 ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		o.p.aint = 0x01
		o.p.bint = ~o.p.aint
		System.out.printf("o.p.bint=0x%x(%d)\n", o.p.bint, o.p.bint)
		System.out.printf("0xfffffffe=0x%x(%d)\n", 0xfffffffe, 0xfffffffe)
		if( o.p.bint != 0xfffffffe ) return false

		
		// ++, --
		System.out.println("-// postfix ++")
		o.p.aint = 10
		o.p.bint = o.p.aint++
		if( !( o.p.aint == 11 && o.p.bint == 10 ) ) return false
		
		System.out.println("-// unary ++")
		o.p.aint = 10
		o.p.bint = ++o.p.aint
		if( !( o.p.aint == 11 && o.p.bint == 11 ) ) return false

		System.out.println("-// postfix --")
		o.p.aint = 10
		o.p.bint = o.p.aint--
		if( !( o.p.aint == 9 && o.p.bint == 10 ) ) return false
		
		
		
		System.out.println("-// unary --")
		o.p.aint = 10
		o.p.bint = --o.p.aint
		if( !( o.p.aint == 9 && o.p.bint == 9 ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		o.p.aint = 10 * -1
		System.out.println( "o.p.aint="+o.p.aint)
		if( o.p.aint != -10 ) return false
		
		o.p.aint = 10
		o.p.aint = -o.p.aint
		System.out.println( "o.p.aint="+o.p.aint)
		if( o.p.aint != -10 ) return false
		
		o.p.aint = -10
		o.p.aint = -o.p.aint 
		System.out.println( "o.p.aint="+o.p.aint)
		if( o.p.aint != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		o.p.aint = 10
		System.out.println("o.p.aint *= 10; o.p.aint = " + (o.p.aint *= 10) )
		System.out.println( o.p.aint  )
		if( o.p.aint != 100 ) return false
		
		if( ( o.p.aint *= 10 ) != 1000 ) return false
		if( ( o.p.aint *= -10 ) != -10000 ) return false
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		o.p.aint = 10000
		System.out.println("o.p.aint /= 10; o.p.aint = " + (o.p.aint /= 10) )
		System.out.println( o.p.aint  )
		if( o.p.aint != 1000 ) return false
		
		if( ( o.p.aint /= 10 ) != 100 ) return false
		if( ( o.p.aint /= -10 ) != -10 ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		o.p.aint = 15
		System.out.println("o.p.aint %= 9; o.p.aint = " + (o.p.aint %= 9) )
		System.out.println( o.p.aint  )
		if( o.p.aint != 6 ) return false

		if( ( o.p.aint %= 4 ) != 2 ) return false
		if( ( o.p.aint %= 2 ) != 0 ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		o.p.aint = 10
		System.out.println( o.p.aint += 10 )
		System.out.println( o.p.aint  )
		if( o.p.aint != 20 ) return false
		
		if( ( o.p.aint += 10 ) != 30 ) return false
		if( ( o.p.aint += -10 ) != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		o.p.aint = 30
		System.out.println( o.p.aint -= 10 )
		System.out.println( o.p.aint  )
		if( o.p.aint != 20 ) return false

		if( ( o.p.aint -= 10 ) != 10 ) return false
		if( ( o.p.aint -= -10 ) != 20 ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		o.p.aint = 1
		System.out.printf("o.p.aint <<= 1 ; o.p.aint = 0x%x\n", (o.p.aint <<= 1) )
		System.out.println( o.p.aint  )
		if( o.p.aint != 2 ) return false
		
		System.out.printf("o.p.aint <<= 4; o.p.aint = 0x%x\n",  o.p.aint <<= 4  )
		if( o.p.aint != 0x20 ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		o.p.aint = 0x10
		System.out.printf("o.p.aint >>= 1 ; o.p.aint = 0x%x\n",  (o.p.aint >>= 1) )
		System.out.println( "0x" + Integer.toHexString(o.p.aint)  )
		if( o.p.aint != 0x08 ) return false
		
			
		System.out.printf("o.p.aint >>= 3; o.p.aint = 0x%x\n",  o.p.aint >>= 3  )
		if( o.p.aint != 0x1 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		o.p.aint = 0x1
		System.out.printf("o.p.aint &= 1 ; o.p.aint = 0x%x\n", (o.p.aint &= 1) )
		System.out.println( "0x" + Integer.toHexString(o.p.aint)  )
		if( o.p.aint != 0x1 ) return false
		
		System.out.printf("o.p.aint &= 0; o.p.aint = 0x%x\n",  o.p.aint &= 0  )
		if( o.p.aint != 0 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		o.p.aint = 0x0F
		System.out.printf("o.p.aint ^= 0xFF ; o.p.aint = 0x%x\n",  (o.p.aint ^= 0xFF) )
		System.out.println( "0x" + Integer.toHexString(o.p.aint)  )
		if( o.p.aint != 0xF0 ) return false
		
		System.out.printf("o.p.aint ^= 0x0F; o.p.aint = 0x%x\n",  o.p.aint ^= 0x0F  )
		if( o.p.aint != 0xFF ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		o.p.aint = 0x0F
		System.out.printf("o.p.aint |= 0xF0 ; o.p.aint = 0x%x\n",  (o.p.aint |= 0xF0) )
		System.out.println( "0x" + Integer.toHexString(o.p.aint)  )
		if( o.p.aint != 0xFF ) return false
		
		System.out.printf("o.p.aint |= 0xF00; o.p.aint = 0x%x\n",  o.p.aint |= 0xF00  )
		if( o.p.aint != 0xFFF ) return false

		
		return true

	}
	
	// p.a[0]	
	fn int_member1_d1_map_var_operation_test()->boolean {
		
		System.out.println("#int_member1_d1_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		// multiply '*'
		System.out.println("-multiply '*'")
		p.arrint_1[0] = 100 * 100 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 10000 ) return false
		
		p.arrint_1[0] = 100 * 100 + 1 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 10001 ) return false
		
		p.arrint_1[0] = 100 * (100 + 1) 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 10100 ) return false
		
		p.arrint_1[0] = 100 * (100 + 10 * 10) 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 20000 ) return false
		
		// division
		System.out.println("-// division")

		p.arrint_1[0] = 100 / 100 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 1 ) return false

		p.arrint_1[0] = 100 / 100 + 1 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 2 ) return false
		
		p.arrint_1[0] = 100 / (99 + 1) 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 1 ) return false
		
		
		p.arrint_1[0] = 100 / (99 + 10 / 10) 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 1 ) return false

		p.arrint_1[0] = 100 * 100 / 1000 + 100 / 100 * 10 
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 20 ) return false

		
		// rest
		System.out.println("-// rest")
		p.arrint_1[0] = 10 % 9 	
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 1 ) return false
		
		p.arrint_1[0] = 10 % 9 * 100 	
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 100 ) return false

		p.arrint_1[0] = 10 % 9 + 1	
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 2 ) return false

		p.arrint_1[0] = (5 + 5 ) % 9 + 1	
		System.out.println("p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 2 ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.arrint_1[0] = 100
		if( p.arrint_1[0] <= 100 ) { System.out.println( "p.arrint_1[0](=" + p.arrint_1[0]+") <= 100" ) }
		else return false
		
		if( p.arrint_1[0] <= 101 ) { System.out.println( "p.arrint_1[0](=" + p.arrint_1[0]+") <= 101" ) }
		else return false
		
		if( p.arrint_1[0] <= 99 ) return false
		else { System.out.println( "p.arrint_1[0](=" + p.arrint_1[0]+") <= 99 : false" ) }
		
		if( p.arrint_1[0] >= 100 ) { System.out.println( "p.arrint_1[0](=" + p.arrint_1[0]+") >= 100" ) }
		else return false
		
		if( p.arrint_1[0] >= 99 ) { System.out.println( "p.arrint_1[0](=" + p.arrint_1[0]+") <= 99" ) }
		else return false

		if( p.arrint_1[0] >= 101 ) return false
		else { System.out.println( "p.arrint_1[0](=" + p.arrint_1[0]+") <= 101 : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		p.arrint_1[0] = 0x1F
		p.arrint_1[1] = p.arrint_1[0] & 0xF0
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( p.arrint_1[1] != 0x10 ) return false

	
		//if( p.arrint_1[0] & 0xF0 != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( p.arrint_1[0] & 0xF0) != 0x10 ) return false
		p.arrint_1[1] = 0xF0 & p.arrint_1[0]
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( p.arrint_1[1] != 0x10 ) return false
		//if( 0xF0 & p.arrint_1[0] != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0 & p.arrint_1[0] ) != 0x10 ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		p.arrint_1[0] = 0x0F
		p.arrint_1[1] = p.arrint_1[0] ^ 0xFF
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( p.arrint_1[1] != 0xf0 ) return false
		
		
		if( ( p.arrint_1[0] ^ 0xFF) != 0xf0 ) return false
		p.arrint_1[1] = 0xFF ^ p.arrint_1[0]
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( 0xf0 != p.arrint_1[1] ) return false
		if( 0xf0 != ( 0xFF ^ p.arrint_1[0]) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		p.arrint_1[0] = 0x0F
		p.arrint_1[1] = p.arrint_1[0] | 0xF0
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( p.arrint_1[1] != 0xff ) return false
		
		if( ( p.arrint_1[0] | 0xF0) != 0xff ) return false
		p.arrint_1[1] = 0xF0 | p.arrint_1[0]
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( 0xff != p.arrint_1[1] ) return false
		if( 0xff != ( 0xF0 | p.arrint_1[0]) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		p.arrint_1[0] = 0x0F
		
		// logical and '&&'
		if(
			!( 
			   ( p.arrint_1[0] & 0xFF ) == 0x0F && 
			   ( p.arrint_1[0] ^ 0xFF ) == 0xF0 &&
			   ( p.arrint_1[0] | 0xF0 ) == 0xFF 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( p.arrint_1[0] & 0xFF ) != 0x0F || 
		   ( p.arrint_1[0] ^ 0xFF ) != 0xF0 ||
		   ( p.arrint_1[0] | 0xF0 ) != 0xFF 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		p.arrint_1[0] = 0x1
		
		p.arrint_1[1] = p.arrint_1[0] << 1
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( p.arrint_1[1] != 2 ) return false
	
		p.arrint_1[1] = p.arrint_1[0] << 4
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( p.arrint_1[1] != 0x10 ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		p.arrint_1[0] = 0x10
		p.arrint_1[1] = p.arrint_1[0] >> 1
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( p.arrint_1[1] != 0x8 ) return false
		
		p.arrint_1[1] = p.arrint_1[0] >> 4
		System.out.printf("p.arrint_1[1]=0x%x\n", p.arrint_1[1])
		if( p.arrint_1[1] != 0x1 ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		p.arrint_1[0] = 0x01
		p.arrint_1[1] = ~p.arrint_1[0]
		System.out.printf("p.arrint_1[1]=0x%x(%d)\n", p.arrint_1[1], p.arrint_1[1])
		System.out.printf("0xfffffffe=0x%x(%d)\n", 0xfffffffe, 0xfffffffe)
		if( p.arrint_1[1] != 0xfffffffe ) return false

		
		// ++, --
		System.out.println("-// postfix ++")
		p.arrint_1[0] = 10
		p.arrint_1[1] = p.arrint_1[0]++
		if( !( p.arrint_1[0] == 11 && p.arrint_1[1] == 10 ) ) return false
		
		System.out.println("-// unary ++")
		p.arrint_1[0] = 10
		p.arrint_1[1] = ++p.arrint_1[0]
		if( !( p.arrint_1[0] == 11 && p.arrint_1[1] == 11 ) ) return false

		System.out.println("-// postfix --")
		p.arrint_1[0] = 10
		p.arrint_1[1] = p.arrint_1[0]--
		if( !( p.arrint_1[0] == 9 && p.arrint_1[1] == 10 ) ) return false
		
		
		
		System.out.println("-// unary --")
		p.arrint_1[0] = 10
		p.arrint_1[1] = --p.arrint_1[0]
		if( !( p.arrint_1[0] == 9 && p.arrint_1[1] == 9 ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		p.arrint_1[0] = 10 * -1
		System.out.println( "p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != -10 ) return false
		
		p.arrint_1[0] = 10
		p.arrint_1[0] = -p.arrint_1[0]
		System.out.println( "p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != -10 ) return false
		
		p.arrint_1[0] = -10
		p.arrint_1[0] = -p.arrint_1[0] 
		System.out.println( "p.arrint_1[0]="+p.arrint_1[0])
		if( p.arrint_1[0] != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.arrint_1[0] = 10
		System.out.println("p.arrint_1[0] *= 10; p.arrint_1[0] = " + (p.arrint_1[0] *= 10) )
		System.out.println( p.arrint_1[0]  )
		if( p.arrint_1[0] != 100 ) return false
		
		if( ( p.arrint_1[0] *= 10 ) != 1000 ) return false
		if( ( p.arrint_1[0] *= -10 ) != -10000 ) return false
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		p.arrint_1[0] = 10000
		System.out.println("p.arrint_1[0] /= 10; p.arrint_1[0] = " + (p.arrint_1[0] /= 10) )
		System.out.println( p.arrint_1[0]  )
		if( p.arrint_1[0] != 1000 ) return false
		
		if( ( p.arrint_1[0] /= 10 ) != 100 ) return false
		if( ( p.arrint_1[0] /= -10 ) != -10 ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.arrint_1[0] = 15
		System.out.println("p.arrint_1[0] %= 9; p.arrint_1[0] = " + (p.arrint_1[0] %= 9) )
		System.out.println( p.arrint_1[0]  )
		if( p.arrint_1[0] != 6 ) return false

		if( ( p.arrint_1[0] %= 4 ) != 2 ) return false
		if( ( p.arrint_1[0] %= 2 ) != 0 ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.arrint_1[0] = 10
		System.out.println( p.arrint_1[0] += 10 )
		System.out.println( p.arrint_1[0]  )
		if( p.arrint_1[0] != 20 ) return false
		
		if( ( p.arrint_1[0] += 10 ) != 30 ) return false
		if( ( p.arrint_1[0] += -10 ) != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.arrint_1[0] = 30
		System.out.println( p.arrint_1[0] -= 10 )
		System.out.println( p.arrint_1[0]  )
		if( p.arrint_1[0] != 20 ) return false

		if( ( p.arrint_1[0] -= 10 ) != 10 ) return false
		if( ( p.arrint_1[0] -= -10 ) != 20 ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		p.arrint_1[0] = 1
		System.out.printf("p.arrint_1[0] <<= 1 ; p.arrint_1[0] = 0x%x\n", (p.arrint_1[0] <<= 1) )
		System.out.println( p.arrint_1[0]  )
		if( p.arrint_1[0] != 2 ) return false
		
		System.out.printf("p.arrint_1[0] <<= 4; p.arrint_1[0] = 0x%x\n",  p.arrint_1[0] <<= 4  )
		if( p.arrint_1[0] != 0x20 ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		p.arrint_1[0] = 0x10
		System.out.printf("p.arrint_1[0] >>= 1 ; p.arrint_1[0] = 0x%x\n",  (p.arrint_1[0] >>= 1) )
		System.out.println( "0x" + Integer.toHexString(p.arrint_1[0])  )
		if( p.arrint_1[0] != 0x08 ) return false
		
			
		System.out.printf("p.arrint_1[0] >>= 3; p.arrint_1[0] = 0x%x\n",  p.arrint_1[0] >>= 3  )
		if( p.arrint_1[0] != 0x1 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		p.arrint_1[0] = 0x1
		System.out.printf("p.arrint_1[0] &= 1 ; p.arrint_1[0] = 0x%x\n", (p.arrint_1[0] &= 1) )
		System.out.println( "0x" + Integer.toHexString(p.arrint_1[0])  )
		if( p.arrint_1[0] != 0x1 ) return false
		
		System.out.printf("p.arrint_1[0] &= 0; p.arrint_1[0] = 0x%x\n",  p.arrint_1[0] &= 0  )
		if( p.arrint_1[0] != 0 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		p.arrint_1[0] = 0x0F
		System.out.printf("p.arrint_1[0] ^= 0xFF ; p.arrint_1[0] = 0x%x\n",  (p.arrint_1[0] ^= 0xFF) )
		System.out.println( "0x" + Integer.toHexString(p.arrint_1[0])  )
		if( p.arrint_1[0] != 0xF0 ) return false
		
		System.out.printf("p.arrint_1[0] ^= 0x0F; p.arrint_1[0] = 0x%x\n",  p.arrint_1[0] ^= 0x0F  )
		if( p.arrint_1[0] != 0xFF ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		p.arrint_1[0] = 0x0F
		System.out.printf("p.arrint_1[0] |= 0xF0 ; p.arrint_1[0] = 0x%x\n",  (p.arrint_1[0] |= 0xF0) )
		System.out.println( "0x" + Integer.toHexString(p.arrint_1[0])  )
		if( p.arrint_1[0] != 0xFF ) return false
		
		System.out.printf("p.arrint_1[0] |= 0xF00; p.arrint_1[0] = 0x%x\n",  p.arrint_1[0] |= 0xF00  )
		if( p.arrint_1[0] != 0xFFF ) return false

		
		return true

	}

	// p.singleton_a[0]	
	fn int_member_d1_singoletone_map_var_operation_test()->boolean {
		
		System.out.println("#int_member_d1_singoletone_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		// multiply '*'
		System.out.println("-multiply '*'")
		p.static_arrint_1[0] = 100 * 100 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 10000 ) return false
		
		p.static_arrint_1[0] = 100 * 100 + 1 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 10001 ) return false
		
		p.static_arrint_1[0] = 100 * (100 + 1) 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 10100 ) return false
		
		p.static_arrint_1[0] = 100 * (100 + 10 * 10) 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 20000 ) return false
		
		// division
		System.out.println("-// division")

		p.static_arrint_1[0] = 100 / 100 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 1 ) return false

		p.static_arrint_1[0] = 100 / 100 + 1 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 2 ) return false
		
		p.static_arrint_1[0] = 100 / (99 + 1) 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 1 ) return false
		
		
		p.static_arrint_1[0] = 100 / (99 + 10 / 10) 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 1 ) return false

		p.static_arrint_1[0] = 100 * 100 / 1000 + 100 / 100 * 10 
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 20 ) return false

		
		// rest
		System.out.println("-// rest")
		p.static_arrint_1[0] = 10 % 9 	
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 1 ) return false
		
		p.static_arrint_1[0] = 10 % 9 * 100 	
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 100 ) return false

		p.static_arrint_1[0] = 10 % 9 + 1	
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 2 ) return false

		p.static_arrint_1[0] = (5 + 5 ) % 9 + 1	
		System.out.println("p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 2 ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.static_arrint_1[0] = 100
		if( p.static_arrint_1[0] <= 100 ) { System.out.println( "p.static_arrint_1[0](=" + p.static_arrint_1[0]+") <= 100" ) }
		else return false
		
		if( p.static_arrint_1[0] <= 101 ) { System.out.println( "p.static_arrint_1[0](=" + p.static_arrint_1[0]+") <= 101" ) }
		else return false
		
		if( p.static_arrint_1[0] <= 99 ) return false
		else { System.out.println( "p.static_arrint_1[0](=" + p.static_arrint_1[0]+") <= 99 : false" ) }
		
		if( p.static_arrint_1[0] >= 100 ) { System.out.println( "p.static_arrint_1[0](=" + p.static_arrint_1[0]+") >= 100" ) }
		else return false
		
		if( p.static_arrint_1[0] >= 99 ) { System.out.println( "p.static_arrint_1[0](=" + p.static_arrint_1[0]+") <= 99" ) }
		else return false

		if( p.static_arrint_1[0] >= 101 ) return false
		else { System.out.println( "p.static_arrint_1[0](=" + p.static_arrint_1[0]+") <= 101 : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		p.static_arrint_1[0] = 0x1F
		p.static_arrint_1[1] = p.static_arrint_1[0] & 0xF0
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( p.static_arrint_1[1] != 0x10 ) return false

	
		//if( p.static_arrint_1[0] & 0xF0 != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( p.static_arrint_1[0] & 0xF0) != 0x10 ) return false
		p.static_arrint_1[1] = 0xF0 & p.static_arrint_1[0]
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( p.static_arrint_1[1] != 0x10 ) return false
		//if( 0xF0 & p.static_arrint_1[0] != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0 & p.static_arrint_1[0] ) != 0x10 ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		p.static_arrint_1[0] = 0x0F
		p.static_arrint_1[1] = p.static_arrint_1[0] ^ 0xFF
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( p.static_arrint_1[1] != 0xf0 ) return false
		
		
		if( ( p.static_arrint_1[0] ^ 0xFF) != 0xf0 ) return false
		p.static_arrint_1[1] = 0xFF ^ p.static_arrint_1[0]
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( 0xf0 != p.static_arrint_1[1] ) return false
		if( 0xf0 != ( 0xFF ^ p.static_arrint_1[0]) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		p.static_arrint_1[0] = 0x0F
		p.static_arrint_1[1] = p.static_arrint_1[0] | 0xF0
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( p.static_arrint_1[1] != 0xff ) return false
		
		if( ( p.static_arrint_1[0] | 0xF0) != 0xff ) return false
		p.static_arrint_1[1] = 0xF0 | p.static_arrint_1[0]
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( 0xff != p.static_arrint_1[1] ) return false
		if( 0xff != ( 0xF0 | p.static_arrint_1[0]) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		p.static_arrint_1[0] = 0x0F
		
		// logical and '&&'
		if(
			!( 
			   ( p.static_arrint_1[0] & 0xFF ) == 0x0F && 
			   ( p.static_arrint_1[0] ^ 0xFF ) == 0xF0 &&
			   ( p.static_arrint_1[0] | 0xF0 ) == 0xFF 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( p.static_arrint_1[0] & 0xFF ) != 0x0F || 
		   ( p.static_arrint_1[0] ^ 0xFF ) != 0xF0 ||
		   ( p.static_arrint_1[0] | 0xF0 ) != 0xFF 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		p.static_arrint_1[0] = 0x1
		
		p.static_arrint_1[1] = p.static_arrint_1[0] << 1
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( p.static_arrint_1[1] != 2 ) return false
	
		p.static_arrint_1[1] = p.static_arrint_1[0] << 4
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( p.static_arrint_1[1] != 0x10 ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		p.static_arrint_1[0] = 0x10
		p.static_arrint_1[1] = p.static_arrint_1[0] >> 1
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( p.static_arrint_1[1] != 0x8 ) return false
		
		p.static_arrint_1[1] = p.static_arrint_1[0] >> 4
		System.out.printf("p.static_arrint_1[1]=0x%x\n", p.static_arrint_1[1])
		if( p.static_arrint_1[1] != 0x1 ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		p.static_arrint_1[0] = 0x01
		p.static_arrint_1[1] = ~p.static_arrint_1[0]
		System.out.printf("p.static_arrint_1[1]=0x%x(%d)\n", p.static_arrint_1[1], p.static_arrint_1[1])
		System.out.printf("0xfffffffe=0x%x(%d)\n", 0xfffffffe, 0xfffffffe)
		if( p.static_arrint_1[1] != 0xfffffffe ) return false

		
		// ++, --
		System.out.println("-// postfix ++")
		p.static_arrint_1[0] = 10
		p.static_arrint_1[1] = p.static_arrint_1[0]++
		if( !( p.static_arrint_1[0] == 11 && p.static_arrint_1[1] == 10 ) ) return false
		
		System.out.println("-// unary ++")
		p.static_arrint_1[0] = 10
		p.static_arrint_1[1] = ++p.static_arrint_1[0]
		if( !( p.static_arrint_1[0] == 11 && p.static_arrint_1[1] == 11 ) ) return false

		System.out.println("-// postfix --")
		p.static_arrint_1[0] = 10
		p.static_arrint_1[1] = p.static_arrint_1[0]--
		if( !( p.static_arrint_1[0] == 9 && p.static_arrint_1[1] == 10 ) ) return false
		
		
		
		System.out.println("-// unary --")
		p.static_arrint_1[0] = 10
		p.static_arrint_1[1] = --p.static_arrint_1[0]
		if( !( p.static_arrint_1[0] == 9 && p.static_arrint_1[1] == 9 ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		p.static_arrint_1[0] = 10 * -1
		System.out.println( "p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != -10 ) return false
		
		p.static_arrint_1[0] = 10
		p.static_arrint_1[0] = -p.static_arrint_1[0]
		System.out.println( "p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != -10 ) return false
		
		p.static_arrint_1[0] = -10
		p.static_arrint_1[0] = -p.static_arrint_1[0] 
		System.out.println( "p.static_arrint_1[0]="+p.static_arrint_1[0])
		if( p.static_arrint_1[0] != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.static_arrint_1[0] = 10
		System.out.println("p.static_arrint_1[0] *= 10; p.static_arrint_1[0] = " + (p.static_arrint_1[0] *= 10) )
		System.out.println( p.static_arrint_1[0]  )
		if( p.static_arrint_1[0] != 100 ) return false
		
		if( ( p.static_arrint_1[0] *= 10 ) != 1000 ) return false
		if( ( p.static_arrint_1[0] *= -10 ) != -10000 ) return false
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		p.static_arrint_1[0] = 10000
		System.out.println("p.static_arrint_1[0] /= 10; p.static_arrint_1[0] = " + (p.static_arrint_1[0] /= 10) )
		System.out.println( p.static_arrint_1[0]  )
		if( p.static_arrint_1[0] != 1000 ) return false
		
		if( ( p.static_arrint_1[0] /= 10 ) != 100 ) return false
		if( ( p.static_arrint_1[0] /= -10 ) != -10 ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.static_arrint_1[0] = 15
		System.out.println("p.static_arrint_1[0] %= 9; p.static_arrint_1[0] = " + (p.static_arrint_1[0] %= 9) )
		System.out.println( p.static_arrint_1[0]  )
		if( p.static_arrint_1[0] != 6 ) return false

		if( ( p.static_arrint_1[0] %= 4 ) != 2 ) return false
		if( ( p.static_arrint_1[0] %= 2 ) != 0 ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.static_arrint_1[0] = 10
		System.out.println( p.static_arrint_1[0] += 10 )
		System.out.println( p.static_arrint_1[0]  )
		if( p.static_arrint_1[0] != 20 ) return false
		
		if( ( p.static_arrint_1[0] += 10 ) != 30 ) return false
		if( ( p.static_arrint_1[0] += -10 ) != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.static_arrint_1[0] = 30
		System.out.println( p.static_arrint_1[0] -= 10 )
		System.out.println( p.static_arrint_1[0]  )
		if( p.static_arrint_1[0] != 20 ) return false

		if( ( p.static_arrint_1[0] -= 10 ) != 10 ) return false
		if( ( p.static_arrint_1[0] -= -10 ) != 20 ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		p.static_arrint_1[0] = 1
		System.out.printf("p.static_arrint_1[0] <<= 1 ; p.static_arrint_1[0] = 0x%x\n", (p.static_arrint_1[0] <<= 1) )
		System.out.println( p.static_arrint_1[0]  )
		if( p.static_arrint_1[0] != 2 ) return false
		
		System.out.printf("p.static_arrint_1[0] <<= 4; p.static_arrint_1[0] = 0x%x\n",  p.static_arrint_1[0] <<= 4  )
		if( p.static_arrint_1[0] != 0x20 ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		p.static_arrint_1[0] = 0x10
		System.out.printf("p.static_arrint_1[0] >>= 1 ; p.static_arrint_1[0] = 0x%x\n",  (p.static_arrint_1[0] >>= 1) )
		System.out.println( "0x" + Integer.toHexString(p.static_arrint_1[0])  )
		if( p.static_arrint_1[0] != 0x08 ) return false
		
			
		System.out.printf("p.static_arrint_1[0] >>= 3; p.static_arrint_1[0] = 0x%x\n",  p.static_arrint_1[0] >>= 3  )
		if( p.static_arrint_1[0] != 0x1 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		p.static_arrint_1[0] = 0x1
		System.out.printf("p.static_arrint_1[0] &= 1 ; p.static_arrint_1[0] = 0x%x\n", (p.static_arrint_1[0] &= 1) )
		System.out.println( "0x" + Integer.toHexString(p.static_arrint_1[0])  )
		if( p.static_arrint_1[0] != 0x1 ) return false
		
		System.out.printf("p.static_arrint_1[0] &= 0; p.static_arrint_1[0] = 0x%x\n",  p.static_arrint_1[0] &= 0  )
		if( p.static_arrint_1[0] != 0 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		p.static_arrint_1[0] = 0x0F
		System.out.printf("p.static_arrint_1[0] ^= 0xFF ; p.static_arrint_1[0] = 0x%x\n",  (p.static_arrint_1[0] ^= 0xFF) )
		System.out.println( "0x" + Integer.toHexString(p.static_arrint_1[0])  )
		if( p.static_arrint_1[0] != 0xF0 ) return false
		
		System.out.printf("p.static_arrint_1[0] ^= 0x0F; p.static_arrint_1[0] = 0x%x\n",  p.static_arrint_1[0] ^= 0x0F  )
		if( p.static_arrint_1[0] != 0xFF ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		p.static_arrint_1[0] = 0x0F
		System.out.printf("p.static_arrint_1[0] |= 0xF0 ; p.static_arrint_1[0] = 0x%x\n",  (p.static_arrint_1[0] |= 0xF0) )
		System.out.println( "0x" + Integer.toHexString(p.static_arrint_1[0])  )
		if( p.static_arrint_1[0] != 0xFF ) return false
		
		System.out.printf("p.static_arrint_1[0] |= 0xF00; p.static_arrint_1[0] = 0x%x\n",  p.static_arrint_1[0] |= 0xF00  )
		if( p.static_arrint_1[0] != 0xFFF ) return false

		
		return true

	}
	
	//p[0].a
	fn int_member1_var_in_object_map_operation_test()->boolean {
		
		System.out.println("#int_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].aint = 100 * 100 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 10000 ) return false
		
		parr[0].aint = 100 * 100 + 1 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 10001 ) return false
		
		parr[0].aint = 100 * (100 + 1) 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 10100 ) return false
		
		parr[0].aint = 100 * (100 + 10 * 10) 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 20000 ) return false
		
		// division
		System.out.println("-// division")

		parr[0].aint = 100 / 100 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 1 ) return false

		parr[0].aint = 100 / 100 + 1 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 2 ) return false
		
		parr[0].aint = 100 / (99 + 1) 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 1 ) return false
		
		
		parr[0].aint = 100 / (99 + 10 / 10) 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 1 ) return false

		parr[0].aint = 100 * 100 / 1000 + 100 / 100 * 10 
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 20 ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].aint = 10 % 9 	
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 1 ) return false
		
		parr[0].aint = 10 % 9 * 100 	
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 100 ) return false

		parr[0].aint = 10 % 9 + 1	
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 2 ) return false

		parr[0].aint = (5 + 5 ) % 9 + 1	
		System.out.println("parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 2 ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].aint = 100
		if( parr[0].aint <= 100 ) { System.out.println( "parr[0].aint(=" + parr[0].aint+") <= 100" ) }
		else return false
		
		if( parr[0].aint <= 101 ) { System.out.println( "parr[0].aint(=" + parr[0].aint+") <= 101" ) }
		else return false
		
		if( parr[0].aint <= 99 ) return false
		else { System.out.println( "parr[0].aint(=" + parr[0].aint+") <= 99 : false" ) }
		
		if( parr[0].aint >= 100 ) { System.out.println( "parr[0].aint(=" + parr[0].aint+") >= 100" ) }
		else return false
		
		if( parr[0].aint >= 99 ) { System.out.println( "parr[0].aint(=" + parr[0].aint+") <= 99" ) }
		else return false

		if( parr[0].aint >= 101 ) return false
		else { System.out.println( "parr[0].aint(=" + parr[0].aint+") <= 101 : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		parr[0].aint = 0x1F
		parr[0].bint = parr[0].aint & 0xF0
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( parr[0].bint != 0x10 ) return false

	
		//if( parr[0].aint & 0xF0 != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( parr[0].aint & 0xF0) != 0x10 ) return false
		parr[0].bint = 0xF0 & parr[0].aint
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( parr[0].bint != 0x10 ) return false
		//if( 0xF0 & parr[0].aint != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0 & parr[0].aint ) != 0x10 ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		parr[0].aint = 0x0F
		parr[0].bint = parr[0].aint ^ 0xFF
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( parr[0].bint != 0xf0 ) return false
		
		
		if( ( parr[0].aint ^ 0xFF) != 0xf0 ) return false
		parr[0].bint = 0xFF ^ parr[0].aint
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( 0xf0 != parr[0].bint ) return false
		if( 0xf0 != ( 0xFF ^ parr[0].aint) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		parr[0].aint = 0x0F
		parr[0].bint = parr[0].aint | 0xF0
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( parr[0].bint != 0xff ) return false
		
		if( ( parr[0].aint | 0xF0) != 0xff ) return false
		parr[0].bint = 0xF0 | parr[0].aint
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( 0xff != parr[0].bint ) return false
		if( 0xff != ( 0xF0 | parr[0].aint) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		parr[0].aint = 0x0F
		
		// logical and '&&'
		if(
			!( 
			   ( parr[0].aint & 0xFF ) == 0x0F && 
			   ( parr[0].aint ^ 0xFF ) == 0xF0 &&
			   ( parr[0].aint | 0xF0 ) == 0xFF 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( parr[0].aint & 0xFF ) != 0x0F || 
		   ( parr[0].aint ^ 0xFF ) != 0xF0 ||
		   ( parr[0].aint | 0xF0 ) != 0xFF 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		parr[0].aint = 0x1
		
		parr[0].bint = parr[0].aint << 1
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( parr[0].bint != 2 ) return false
	
		parr[0].bint = parr[0].aint << 4
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( parr[0].bint != 0x10 ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		parr[0].aint = 0x10
		parr[0].bint = parr[0].aint >> 1
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( parr[0].bint != 0x8 ) return false
		
		parr[0].bint = parr[0].aint >> 4
		System.out.printf("parr[0].bint=0x%x\n", parr[0].bint)
		if( parr[0].bint != 0x1 ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		parr[0].aint = 0x01
		parr[0].bint = ~parr[0].aint
		System.out.printf("parr[0].bint=0x%x(%d)\n", parr[0].bint, parr[0].bint)
		System.out.printf("0xfffffffe=0x%x(%d)\n", 0xfffffffe, 0xfffffffe)
		if( parr[0].bint != 0xfffffffe ) return false

		// ++, --
		System.out.println("-// postfix ++")
		parr[0].aint = 10
		parr[0].bint = parr[0].aint++
		if( !( parr[0].aint == 11 && parr[0].bint == 10 ) ) return false

		
		System.out.println("-// unary ++")
		parr[0].aint = 10
		parr[0].bint = ++parr[0].aint
		if( !( parr[0].aint == 11 && parr[0].bint == 11 ) ) return false

		System.out.println("-// postfix --")
		parr[0].aint = 10
		parr[0].bint = parr[0].aint--
		if( !( parr[0].aint == 9 && parr[0].bint == 10 ) ) return false
		
		
		
		System.out.println("-// unary --")
		parr[0].aint = 10
		parr[0].bint = --parr[0].aint
		if( !( parr[0].aint == 9 && parr[0].bint == 9 ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].aint = 10 * -1
		System.out.println( "parr[0].aint="+parr[0].aint)
		if( parr[0].aint != -10 ) return false
		
		parr[0].aint = 10
		parr[0].aint = -parr[0].aint
		System.out.println( "parr[0].aint="+parr[0].aint)
		if( parr[0].aint != -10 ) return false
		
		parr[0].aint = -10
		parr[0].aint = -parr[0].aint 
		System.out.println( "parr[0].aint="+parr[0].aint)
		if( parr[0].aint != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].aint = 10
		System.out.println("parr[0].aint *= 10; parr[0].aint = " + (parr[0].aint *= 10) )
		System.out.println( parr[0].aint  )
		if( parr[0].aint != 100 ) return false
		
		if( ( parr[0].aint *= 10 ) != 1000 ) return false
		if( ( parr[0].aint *= -10 ) != -10000 ) return false
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].aint = 10000
		System.out.println("parr[0].aint /= 10; parr[0].aint = " + (parr[0].aint /= 10) )
		System.out.println( parr[0].aint  )
		if( parr[0].aint != 1000 ) return false
		
		if( ( parr[0].aint /= 10 ) != 100 ) return false
		if( ( parr[0].aint /= -10 ) != -10 ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].aint = 15
		System.out.println("parr[0].aint %= 9; parr[0].aint = " + (parr[0].aint %= 9) )
		System.out.println( parr[0].aint  )
		if( parr[0].aint != 6 ) return false

		if( ( parr[0].aint %= 4 ) != 2 ) return false
		if( ( parr[0].aint %= 2 ) != 0 ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].aint = 10
		System.out.println( parr[0].aint += 10 )
		System.out.println( parr[0].aint  )
		if( parr[0].aint != 20 ) return false
		
		if( ( parr[0].aint += 10 ) != 30 ) return false
		if( ( parr[0].aint += -10 ) != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].aint = 30
		System.out.println( parr[0].aint -= 10 )
		System.out.println( parr[0].aint  )
		if( parr[0].aint != 20 ) return false

		if( ( parr[0].aint -= 10 ) != 10 ) return false
		if( ( parr[0].aint -= -10 ) != 20 ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		parr[0].aint = 1
		System.out.printf("parr[0].aint <<= 1 ; parr[0].aint = 0x%x\n", (parr[0].aint <<= 1) )
		System.out.println( parr[0].aint  )
		if( parr[0].aint != 2 ) return false
		
		System.out.printf("parr[0].aint <<= 4; parr[0].aint = 0x%x\n",  parr[0].aint <<= 4  )
		if( parr[0].aint != 0x20 ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		parr[0].aint = 0x10
		System.out.printf("parr[0].aint >>= 1 ; parr[0].aint = 0x%x\n",  (parr[0].aint >>= 1) )
		System.out.println( "0x" + Integer.toHexString(parr[0].aint)  )
		if( parr[0].aint != 0x08 ) return false
		
			
		System.out.printf("parr[0].aint >>= 3; parr[0].aint = 0x%x\n",  parr[0].aint >>= 3  )
		if( parr[0].aint != 0x1 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		parr[0].aint = 0x1
		System.out.printf("parr[0].aint &= 1 ; parr[0].aint = 0x%x\n", (parr[0].aint &= 1) )
		System.out.println( "0x" + Integer.toHexString(parr[0].aint)  )
		if( parr[0].aint != 0x1 ) return false
		
		System.out.printf("parr[0].aint &= 0; parr[0].aint = 0x%x\n",  parr[0].aint &= 0  )
		if( parr[0].aint != 0 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		parr[0].aint = 0x0F
		System.out.printf("parr[0].aint ^= 0xFF ; parr[0].aint = 0x%x\n",  (parr[0].aint ^= 0xFF) )
		System.out.println( "0x" + Integer.toHexString(parr[0].aint)  )
		if( parr[0].aint != 0xF0 ) return false
		
		System.out.printf("parr[0].aint ^= 0x0F; parr[0].aint = 0x%x\n",  parr[0].aint ^= 0x0F  )
		if( parr[0].aint != 0xFF ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		parr[0].aint = 0x0F
		System.out.printf("parr[0].aint |= 0xF0 ; parr[0].aint = 0x%x\n",  (parr[0].aint |= 0xF0) )
		System.out.println( "0x" + Integer.toHexString(parr[0].aint)  )
		if( parr[0].aint != 0xFF ) return false
		
		System.out.printf("parr[0].aint |= 0xF00; parr[0].aint = 0x%x\n",  parr[0].aint |= 0xF00  )
		if( parr[0].aint != 0xFFF ) return false
	
		
		return true

	}
	
	//p[0].singleton_a
	fn int_singleton_member1_var_in_object_map_operation_test()->boolean {
		
		System.out.println("#int_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].aint_static = 100 * 100 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 10000 ) return false
		
		parr[0].aint_static = 100 * 100 + 1 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 10001 ) return false
		
		parr[0].aint_static = 100 * (100 + 1) 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 10100 ) return false
		
		parr[0].aint_static = 100 * (100 + 10 * 10) 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 20000 ) return false
		
		// division
		System.out.println("-// division")

		parr[0].aint_static = 100 / 100 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 1 ) return false

		parr[0].aint_static = 100 / 100 + 1 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 2 ) return false
		
		parr[0].aint_static = 100 / (99 + 1) 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 1 ) return false
		
		
		parr[0].aint_static = 100 / (99 + 10 / 10) 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 1 ) return false

		parr[0].aint_static = 100 * 100 / 1000 + 100 / 100 * 10 
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 20 ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].aint_static = 10 % 9 	
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 1 ) return false
		
		parr[0].aint_static = 10 % 9 * 100 	
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 100 ) return false

		parr[0].aint_static = 10 % 9 + 1	
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 2 ) return false

		parr[0].aint_static = (5 + 5 ) % 9 + 1	
		System.out.println("parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 2 ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].aint_static = 100
		if( parr[0].aint_static <= 100 ) { System.out.println( "parr[0].aint_static(=" + parr[0].aint_static+") <= 100" ) }
		else return false
		
		if( parr[0].aint_static <= 101 ) { System.out.println( "parr[0].aint_static(=" + parr[0].aint_static+") <= 101" ) }
		else return false
		
		if( parr[0].aint_static <= 99 ) return false
		else { System.out.println( "parr[0].aint_static(=" + parr[0].aint_static+") <= 99 : false" ) }
		
		if( parr[0].aint_static >= 100 ) { System.out.println( "parr[0].aint_static(=" + parr[0].aint_static+") >= 100" ) }
		else return false
		
		if( parr[0].aint_static >= 99 ) { System.out.println( "parr[0].aint_static(=" + parr[0].aint_static+") <= 99" ) }
		else return false

		if( parr[0].aint_static >= 101 ) return false
		else { System.out.println( "parr[0].aint_static(=" + parr[0].aint_static+") <= 101 : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		parr[0].aint_static = 0x1F
		parr[0].bint_static = parr[0].aint_static & 0xF0
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( parr[0].bint_static != 0x10 ) return false

	
		//if( parr[0].aint_static & 0xF0 != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( parr[0].aint_static & 0xF0) != 0x10 ) return false
		parr[0].bint_static = 0xF0 & parr[0].aint_static
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( parr[0].bint_static != 0x10 ) return false
		//if( 0xF0 & parr[0].aint_static != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0 & parr[0].aint_static ) != 0x10 ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		parr[0].aint_static = 0x0F
		parr[0].bint_static = parr[0].aint_static ^ 0xFF
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( parr[0].bint_static != 0xf0 ) return false
		
		
		if( ( parr[0].aint_static ^ 0xFF) != 0xf0 ) return false
		parr[0].bint_static = 0xFF ^ parr[0].aint_static
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( 0xf0 != parr[0].bint_static ) return false
		if( 0xf0 != ( 0xFF ^ parr[0].aint_static) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		parr[0].aint_static = 0x0F
		parr[0].bint_static = parr[0].aint_static | 0xF0
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( parr[0].bint_static != 0xff ) return false
		
		if( ( parr[0].aint_static | 0xF0) != 0xff ) return false
		parr[0].bint_static = 0xF0 | parr[0].aint_static
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( 0xff != parr[0].bint_static ) return false
		if( 0xff != ( 0xF0 | parr[0].aint_static) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		parr[0].aint_static = 0x0F
		
		// logical and '&&'
		if(
			!( 
			   ( parr[0].aint_static & 0xFF ) == 0x0F && 
			   ( parr[0].aint_static ^ 0xFF ) == 0xF0 &&
			   ( parr[0].aint_static | 0xF0 ) == 0xFF 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( parr[0].aint_static & 0xFF ) != 0x0F || 
		   ( parr[0].aint_static ^ 0xFF ) != 0xF0 ||
		   ( parr[0].aint_static | 0xF0 ) != 0xFF 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		parr[0].aint_static = 0x1
		
		parr[0].bint_static = parr[0].aint_static << 1
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( parr[0].bint_static != 2 ) return false
	
		parr[0].bint_static = parr[0].aint_static << 4
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( parr[0].bint_static != 0x10 ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		parr[0].aint_static = 0x10
		parr[0].bint_static = parr[0].aint_static >> 1
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( parr[0].bint_static != 0x8 ) return false
		
		parr[0].bint_static = parr[0].aint_static >> 4
		System.out.printf("parr[0].bint_static=0x%x\n", parr[0].bint_static)
		if( parr[0].bint_static != 0x1 ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		parr[0].aint_static = 0x01
		parr[0].bint_static = ~parr[0].aint_static
		System.out.printf("parr[0].bint_static=0x%x(%d)\n", parr[0].bint_static, parr[0].bint_static)
		System.out.printf("0xfffffffe=0x%x(%d)\n", 0xfffffffe, 0xfffffffe)
		if( parr[0].bint_static != 0xfffffffe ) return false

		// ++, --
		System.out.println("-// postfix ++")
		parr[0].aint_static = 10
		parr[0].bint_static = parr[0].aint_static++
		if( !( parr[0].aint_static == 11 && parr[0].bint_static == 10 ) ) return false

		
		System.out.println("-// unary ++")
		parr[0].aint_static = 10
		parr[0].bint_static = ++parr[0].aint_static
		if( !( parr[0].aint_static == 11 && parr[0].bint_static == 11 ) ) return false

		System.out.println("-// postfix --")
		parr[0].aint_static = 10
		parr[0].bint_static = parr[0].aint_static--
		if( !( parr[0].aint_static == 9 && parr[0].bint_static == 10 ) ) return false
		
		
		
		System.out.println("-// unary --")
		parr[0].aint_static = 10
		parr[0].bint_static = --parr[0].aint_static
		if( !( parr[0].aint_static == 9 && parr[0].bint_static == 9 ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].aint_static = 10 * -1
		System.out.println( "parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != -10 ) return false
		
		parr[0].aint_static = 10
		parr[0].aint_static = -parr[0].aint_static
		System.out.println( "parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != -10 ) return false
		
		parr[0].aint_static = -10
		parr[0].aint_static = -parr[0].aint_static 
		System.out.println( "parr[0].aint_static="+parr[0].aint_static)
		if( parr[0].aint_static != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].aint_static = 10
		System.out.println("parr[0].aint_static *= 10; parr[0].aint_static = " + (parr[0].aint_static *= 10) )
		System.out.println( parr[0].aint_static  )
		if( parr[0].aint_static != 100 ) return false
		
		if( ( parr[0].aint_static *= 10 ) != 1000 ) return false
		if( ( parr[0].aint_static *= -10 ) != -10000 ) return false
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].aint_static = 10000
		System.out.println("parr[0].aint_static /= 10; parr[0].aint_static = " + (parr[0].aint_static /= 10) )
		System.out.println( parr[0].aint_static  )
		if( parr[0].aint_static != 1000 ) return false
		
		if( ( parr[0].aint_static /= 10 ) != 100 ) return false
		if( ( parr[0].aint_static /= -10 ) != -10 ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].aint_static = 15
		System.out.println("parr[0].aint_static %= 9; parr[0].aint_static = " + (parr[0].aint_static %= 9) )
		System.out.println( parr[0].aint_static  )
		if( parr[0].aint_static != 6 ) return false

		if( ( parr[0].aint_static %= 4 ) != 2 ) return false
		if( ( parr[0].aint_static %= 2 ) != 0 ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].aint_static = 10
		System.out.println( parr[0].aint_static += 10 )
		System.out.println( parr[0].aint_static  )
		if( parr[0].aint_static != 20 ) return false
		
		if( ( parr[0].aint_static += 10 ) != 30 ) return false
		if( ( parr[0].aint_static += -10 ) != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].aint_static = 30
		System.out.println( parr[0].aint_static -= 10 )
		System.out.println( parr[0].aint_static  )
		if( parr[0].aint_static != 20 ) return false

		if( ( parr[0].aint_static -= 10 ) != 10 ) return false
		if( ( parr[0].aint_static -= -10 ) != 20 ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		parr[0].aint_static = 1
		System.out.printf("parr[0].aint_static <<= 1 ; parr[0].aint_static = 0x%x\n", (parr[0].aint_static <<= 1) )
		System.out.println( parr[0].aint_static  )
		if( parr[0].aint_static != 2 ) return false
		
		System.out.printf("parr[0].aint_static <<= 4; parr[0].aint_static = 0x%x\n",  parr[0].aint_static <<= 4  )
		if( parr[0].aint_static != 0x20 ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		parr[0].aint_static = 0x10
		System.out.printf("parr[0].aint_static >>= 1 ; parr[0].aint_static = 0x%x\n",  (parr[0].aint_static >>= 1) )
		System.out.println( "0x" + Integer.toHexString(parr[0].aint_static)  )
		if( parr[0].aint_static != 0x08 ) return false
		
			
		System.out.printf("parr[0].aint_static >>= 3; parr[0].aint_static = 0x%x\n",  parr[0].aint_static >>= 3  )
		if( parr[0].aint_static != 0x1 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		parr[0].aint_static = 0x1
		System.out.printf("parr[0].aint_static &= 1 ; parr[0].aint_static = 0x%x\n", (parr[0].aint_static &= 1) )
		System.out.println( "0x" + Integer.toHexString(parr[0].aint_static)  )
		if( parr[0].aint_static != 0x1 ) return false
		
		System.out.printf("parr[0].aint_static &= 0; parr[0].aint_static = 0x%x\n",  parr[0].aint_static &= 0  )
		if( parr[0].aint_static != 0 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		parr[0].aint_static = 0x0F
		System.out.printf("parr[0].aint_static ^= 0xFF ; parr[0].aint_static = 0x%x\n",  (parr[0].aint_static ^= 0xFF) )
		System.out.println( "0x" + Integer.toHexString(parr[0].aint_static)  )
		if( parr[0].aint_static != 0xF0 ) return false
		
		System.out.printf("parr[0].aint_static ^= 0x0F; parr[0].aint_static = 0x%x\n",  parr[0].aint_static ^= 0x0F  )
		if( parr[0].aint_static != 0xFF ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		parr[0].aint_static = 0x0F
		System.out.printf("parr[0].aint_static |= 0xF0 ; parr[0].aint_static = 0x%x\n",  (parr[0].aint_static |= 0xF0) )
		System.out.println( "0x" + Integer.toHexString(parr[0].aint_static)  )
		if( parr[0].aint_static != 0xFF ) return false
		
		System.out.printf("parr[0].aint_static |= 0xF00; parr[0].aint_static = 0x%x\n",  parr[0].aint_static |= 0xF00  )
		if( parr[0].aint_static != 0xFFF ) return false
	
		
		return true

	}

	// p[0].a[0]
	fn int_d1_map_in_object_map_operation_test()->boolean {
		
		System.out.println("#int_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].arrint_1[0] = 100 * 100 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 10000 ) return false
		
		parr[0].arrint_1[0] = 100 * 100 + 1 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 10001 ) return false
		
		parr[0].arrint_1[0] = 100 * (100 + 1) 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 10100 ) return false
		
		parr[0].arrint_1[0] = 100 * (100 + 10 * 10) 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 20000 ) return false
		
		// division
		System.out.println("-// division")

		parr[0].arrint_1[0] = 100 / 100 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 1 ) return false

		parr[0].arrint_1[0] = 100 / 100 + 1 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 2 ) return false
		
		parr[0].arrint_1[0] = 100 / (99 + 1) 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 1 ) return false
		
		
		parr[0].arrint_1[0] = 100 / (99 + 10 / 10) 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 1 ) return false

		parr[0].arrint_1[0] = 100 * 100 / 1000 + 100 / 100 * 10 
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 20 ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].arrint_1[0] = 10 % 9 	
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 1 ) return false
		
		parr[0].arrint_1[0] = 10 % 9 * 100 	
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 100 ) return false

		parr[0].arrint_1[0] = 10 % 9 + 1	
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 2 ) return false

		parr[0].arrint_1[0] = (5 + 5 ) % 9 + 1	
		System.out.println("parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 2 ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].arrint_1[0] = 100
		if( parr[0].arrint_1[0] <= 100 ) { System.out.println( "parr[0].arrint_1[0](=" + parr[0].arrint_1[0]+") <= 100" ) }
		else return false
		
		if( parr[0].arrint_1[0] <= 101 ) { System.out.println( "parr[0].arrint_1[0](=" + parr[0].arrint_1[0]+") <= 101" ) }
		else return false
		
		if( parr[0].arrint_1[0] <= 99 ) return false
		else { System.out.println( "parr[0].arrint_1[0](=" + parr[0].arrint_1[0]+") <= 99 : false" ) }
		
		if( parr[0].arrint_1[0] >= 100 ) { System.out.println( "parr[0].arrint_1[0](=" + parr[0].arrint_1[0]+") >= 100" ) }
		else return false
		
		if( parr[0].arrint_1[0] >= 99 ) { System.out.println( "parr[0].arrint_1[0](=" + parr[0].arrint_1[0]+") <= 99" ) }
		else return false

		if( parr[0].arrint_1[0] >= 101 ) return false
		else { System.out.println( "parr[0].arrint_1[0](=" + parr[0].arrint_1[0]+") <= 101 : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		parr[0].arrint_1[0] = 0x1F
		parr[0].arrint_1[1] = parr[0].arrint_1[0] & 0xF0
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( parr[0].arrint_1[1] != 0x10 ) return false

	
		//if( parr[0].arrint_1[0] & 0xF0 != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( parr[0].arrint_1[0] & 0xF0) != 0x10 ) return false
		parr[0].arrint_1[1] = 0xF0 & parr[0].arrint_1[0]
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( parr[0].arrint_1[1] != 0x10 ) return false
		//if( 0xF0 & parr[0].arrint_1[0] != 0x10 ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0 & parr[0].arrint_1[0] ) != 0x10 ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		parr[0].arrint_1[0] = 0x0F
		parr[0].arrint_1[1] = parr[0].arrint_1[0] ^ 0xFF
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( parr[0].arrint_1[1] != 0xf0 ) return false
		
		
		if( ( parr[0].arrint_1[0] ^ 0xFF) != 0xf0 ) return false
		parr[0].arrint_1[1] = 0xFF ^ parr[0].arrint_1[0]
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( 0xf0 != parr[0].arrint_1[1] ) return false
		if( 0xf0 != ( 0xFF ^ parr[0].arrint_1[0]) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		parr[0].arrint_1[0] = 0x0F
		parr[0].arrint_1[1] = parr[0].arrint_1[0] | 0xF0
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( parr[0].arrint_1[1] != 0xff ) return false
		
		if( ( parr[0].arrint_1[0] | 0xF0) != 0xff ) return false
		parr[0].arrint_1[1] = 0xF0 | parr[0].arrint_1[0]
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( 0xff != parr[0].arrint_1[1] ) return false
		if( 0xff != ( 0xF0 | parr[0].arrint_1[0]) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		parr[0].arrint_1[0] = 0x0F
		
		// logical and '&&'
		if(
			!( 
			   ( parr[0].arrint_1[0] & 0xFF ) == 0x0F && 
			   ( parr[0].arrint_1[0] ^ 0xFF ) == 0xF0 &&
			   ( parr[0].arrint_1[0] | 0xF0 ) == 0xFF 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( parr[0].arrint_1[0] & 0xFF ) != 0x0F || 
		   ( parr[0].arrint_1[0] ^ 0xFF ) != 0xF0 ||
		   ( parr[0].arrint_1[0] | 0xF0 ) != 0xFF 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		parr[0].arrint_1[0] = 0x1
		
		parr[0].arrint_1[1] = parr[0].arrint_1[0] << 1
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( parr[0].arrint_1[1] != 2 ) return false
	
		parr[0].arrint_1[1] = parr[0].arrint_1[0] << 4
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( parr[0].arrint_1[1] != 0x10 ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		parr[0].arrint_1[0] = 0x10
		parr[0].arrint_1[1] = parr[0].arrint_1[0] >> 1
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( parr[0].arrint_1[1] != 0x8 ) return false
		
		parr[0].arrint_1[1] = parr[0].arrint_1[0] >> 4
		System.out.printf("parr[0].arrint_1[1]=0x%x\n", parr[0].arrint_1[1])
		if( parr[0].arrint_1[1] != 0x1 ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		parr[0].arrint_1[0] = 0x01
		parr[0].arrint_1[1] = ~parr[0].arrint_1[0]
		System.out.printf("parr[0].arrint_1[1]=0x%x(%d)\n", parr[0].arrint_1[1], parr[0].arrint_1[1])
		System.out.printf("0xfffffffe=0x%x(%d)\n", 0xfffffffe, 0xfffffffe)
		if( parr[0].arrint_1[1] != 0xfffffffe ) return false

		// ++, --
		System.out.println("-// postfix ++")
		parr[0].arrint_1[0] = 10
		parr[0].arrint_1[1] = parr[0].arrint_1[0]++
		if( !( parr[0].arrint_1[0] == 11 && parr[0].arrint_1[1] == 10 ) ) return false

		
		System.out.println("-// unary ++")
		parr[0].arrint_1[0] = 10
		parr[0].arrint_1[1] = ++parr[0].arrint_1[0]
		if( !( parr[0].arrint_1[0] == 11 && parr[0].arrint_1[1] == 11 ) ) return false

		System.out.println("-// postfix --")
		parr[0].arrint_1[0] = 10
		parr[0].arrint_1[1] = parr[0].arrint_1[0]--
		if( !( parr[0].arrint_1[0] == 9 && parr[0].arrint_1[1] == 10 ) ) return false
		
		
		
		System.out.println("-// unary --")
		parr[0].arrint_1[0] = 10
		parr[0].arrint_1[1] = --parr[0].arrint_1[0]
		if( !( parr[0].arrint_1[0] == 9 && parr[0].arrint_1[1] == 9 ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].arrint_1[0] = 10 * -1
		System.out.println( "parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != -10 ) return false
		
		parr[0].arrint_1[0] = 10
		parr[0].arrint_1[0] = -parr[0].arrint_1[0]
		System.out.println( "parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != -10 ) return false
		
		parr[0].arrint_1[0] = -10
		parr[0].arrint_1[0] = -parr[0].arrint_1[0] 
		System.out.println( "parr[0].arrint_1[0]="+parr[0].arrint_1[0])
		if( parr[0].arrint_1[0] != 10 ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].arrint_1[0] = 10
		System.out.println("parr[0].arrint_1[0] *= 10; parr[0].arrint_1[0] = " + (parr[0].arrint_1[0] *= 10) )
		System.out.println( parr[0].arrint_1[0]  )
		if( parr[0].arrint_1[0] != 100 ) return false
		
		if( ( parr[0].arrint_1[0] *= 10 ) != 1000 ) return false
		if( ( parr[0].arrint_1[0] *= -10 ) != -10000 ) return false
		
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].arrint_1[0] = 10000
		System.out.println("parr[0].arrint_1[0] /= 10; parr[0].arrint_1[0] = " + (parr[0].arrint_1[0] /= 10) )
		System.out.println( parr[0].arrint_1[0]  )
		if( parr[0].arrint_1[0] != 1000 ) return false
		
		if( ( parr[0].arrint_1[0] /= 10 ) != 100 ) return false
		if( ( parr[0].arrint_1[0] /= -10 ) != -10 ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].arrint_1[0] = 15
		System.out.println("parr[0].arrint_1[0] %= 9; parr[0].arrint_1[0] = " + (parr[0].arrint_1[0] %= 9) )
		System.out.println( parr[0].arrint_1[0]  )
		if( parr[0].arrint_1[0] != 6 ) return false

		if( ( parr[0].arrint_1[0] %= 4 ) != 2 ) return false
		if( ( parr[0].arrint_1[0] %= 2 ) != 0 ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].arrint_1[0] = 10
		System.out.println( parr[0].arrint_1[0] += 10 )
		System.out.println( parr[0].arrint_1[0]  )
		if( parr[0].arrint_1[0] != 20 ) return false
		
		if( ( parr[0].arrint_1[0] += 10 ) != 30 ) return false
		if( ( parr[0].arrint_1[0] += -10 ) != 20 ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].arrint_1[0] = 30
		System.out.println( parr[0].arrint_1[0] -= 10 )
		System.out.println( parr[0].arrint_1[0]  )
		if( parr[0].arrint_1[0] != 20 ) return false

		if( ( parr[0].arrint_1[0] -= 10 ) != 10 ) return false
		if( ( parr[0].arrint_1[0] -= -10 ) != 20 ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		parr[0].arrint_1[0] = 1
		System.out.printf("parr[0].arrint_1[0] <<= 1 ; parr[0].arrint_1[0] = 0x%x\n", (parr[0].arrint_1[0] <<= 1) )
		System.out.println( parr[0].arrint_1[0]  )
		if( parr[0].arrint_1[0] != 2 ) return false
		
		System.out.printf("parr[0].arrint_1[0] <<= 4; parr[0].arrint_1[0] = 0x%x\n",  parr[0].arrint_1[0] <<= 4  )
		if( parr[0].arrint_1[0] != 0x20 ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		parr[0].arrint_1[0] = 0x10
		System.out.printf("parr[0].arrint_1[0] >>= 1 ; parr[0].arrint_1[0] = 0x%x\n",  (parr[0].arrint_1[0] >>= 1) )
		System.out.println( "0x" + Integer.toHexString(parr[0].arrint_1[0])  )
		if( parr[0].arrint_1[0] != 0x08 ) return false
		
			
		System.out.printf("parr[0].arrint_1[0] >>= 3; parr[0].arrint_1[0] = 0x%x\n",  parr[0].arrint_1[0] >>= 3  )
		if( parr[0].arrint_1[0] != 0x1 ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		parr[0].arrint_1[0] = 0x1
		System.out.printf("parr[0].arrint_1[0] &= 1 ; parr[0].arrint_1[0] = 0x%x\n", (parr[0].arrint_1[0] &= 1) )
		System.out.println( "0x" + Integer.toHexString(parr[0].arrint_1[0])  )
		if( parr[0].arrint_1[0] != 0x1 ) return false
		
		System.out.printf("parr[0].arrint_1[0] &= 0; parr[0].arrint_1[0] = 0x%x\n",  parr[0].arrint_1[0] &= 0  )
		if( parr[0].arrint_1[0] != 0 ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		parr[0].arrint_1[0] = 0x0F
		System.out.printf("parr[0].arrint_1[0] ^= 0xFF ; parr[0].arrint_1[0] = 0x%x\n",  (parr[0].arrint_1[0] ^= 0xFF) )
		System.out.println( "0x" + Integer.toHexString(parr[0].arrint_1[0])  )
		if( parr[0].arrint_1[0] != 0xF0 ) return false
		
		System.out.printf("parr[0].arrint_1[0] ^= 0x0F; parr[0].arrint_1[0] = 0x%x\n",  parr[0].arrint_1[0] ^= 0x0F  )
		if( parr[0].arrint_1[0] != 0xFF ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		parr[0].arrint_1[0] = 0x0F
		System.out.printf("parr[0].arrint_1[0] |= 0xF0 ; parr[0].arrint_1[0] = 0x%x\n",  (parr[0].arrint_1[0] |= 0xF0) )
		System.out.println( "0x" + Integer.toHexString(parr[0].arrint_1[0])  )
		if( parr[0].arrint_1[0] != 0xFF ) return false
		
		System.out.printf("parr[0].arrint_1[0] |= 0xF00; parr[0].arrint_1[0] = 0x%x\n",  parr[0].arrint_1[0] |= 0xF00  )
		if( parr[0].arrint_1[0] != 0xFFF ) return false
	
		
		return true

	}


	
	
	/* character type operation test */	
	// a
	fn char_var_operation_test()->boolean {
		
		System.out.println("#char_var_operation_test");
		
		achar:char = '0'
		bchar:char = '0'

		System.out.println("achar=" + achar)

		// comparation
		System.out.println("-// comparation")
		achar = '8'
		if( achar <= '8' ) { System.out.println( "achar(=" + achar+") <= '8'" ) }
		else return false

		if( achar <= '9' ) { System.out.println( "achar(=" + achar+") <= '9'" ) }
		else return false
		
		if( achar <= '7' ) return false
		else { System.out.println( "achar(=" + achar+") <= '7' : false" ) }
		
		if( achar >= '8' ) { System.out.println( "achar(=" + achar+") >= '8'" ) }
		else return false
		
		if( achar >= '7' ) { System.out.println( "achar(=" + achar+") <= '7'" ) }
		else return false

		if( achar >= '9' ) return false
		else { System.out.println( "achar(=" + achar+") <= '9' : false" ) }
		
		return true

	}

	// a[0]
	fn char_d1_map_operation_test()->boolean {
		
		System.out.println("#char_d1_map_operation_test");
		
		arrchar:char[] = char[100]
		
		arrchar[0] = '0'
		arrchar[1] = '0'

		System.out.println("arrchar[0]=" + arrchar[0])

		// comparation
		System.out.println("-// comparation")
		arrchar[0] = '8'
		if( arrchar[0] <= '8' ) { System.out.println( "arrchar[0](=" + arrchar[0]+") <= '8'" ) }
		else return false

		if( arrchar[0] <= '9' ) { System.out.println( "arrchar[0](=" + arrchar[0]+") <= '9'" ) }
		else return false
		
		if( arrchar[0] <= '7' ) return false
		else { System.out.println( "arrchar[0](=" + arrchar[0]+") <= '7' : false" ) }
		
		if( arrchar[0] >= '8' ) { System.out.println( "arrchar[0](=" + arrchar[0]+") >= '8'" ) }
		else return false
		
		if( arrchar[0] >= '7' ) { System.out.println( "arrchar[0](=" + arrchar[0]+") <= '7'" ) }
		else return false

		if( arrchar[0] >= '9' ) return false
		else { System.out.println( "arrchar[0](=" + arrchar[0]+") <= '9' : false" ) }
		
		return true

	}	

	// a[0][0]
	fn char_d2_map_operation_test()->boolean {
		
		System.out.println("#char_d2_map_operation_test");
		
		arrchar2:char[][] = char[100][]
		arrchar2[0] = char[100]
		
		arrchar2[0][0] = '0'
		arrchar2[0][1] = '0'

		System.out.println("arrchar2[0][0]=" + arrchar2[0][0])

		// comparation
		System.out.println("-// comparation")
		arrchar2[0][0] = '8'
		if( arrchar2[0][0] <= '8' ) { System.out.println( "arrchar2[0][0](=" + arrchar2[0][0]+") <= '8'" ) }
		else return false

		if( arrchar2[0][0] <= '9' ) { System.out.println( "arrchar2[0][0](=" + arrchar2[0][0]+") <= '9'" ) }
		else return false
		
		if( arrchar2[0][0] <= '7' ) return false
		else { System.out.println( "arrchar2[0][0](=" + arrchar2[0][0]+") <= '7' : false" ) }
		
		if( arrchar2[0][0] >= '8' ) { System.out.println( "arrchar2[0][0](=" + arrchar2[0][0]+") >= '8'" ) }
		else return false
		
		if( arrchar2[0][0] >= '7' ) { System.out.println( "arrchar2[0][0](=" + arrchar2[0][0]+") <= '7'" ) }
		else return false

		if( arrchar2[0][0] >= '9' ) return false
		else { System.out.println( "arrchar2[0][0](=" + arrchar2[0][0]+") <= '9' : false" ) }
		
		return true

	}

	// p.a
	fn char_member1_var_operation_test()->boolean {
		
		System.out.println("#char_member1_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.achar = '0'
		p.bchar = '0'

		System.out.println("p.achar=" + p.achar)

		// comparation
		System.out.println("-// comparation")
		p.achar = '8'
		if( p.achar <= '8' ) { System.out.println( "p.achar(=" + p.achar+") <= '8'" ) }
		else return false

		if( p.achar <= '9' ) { System.out.println( "p.achar(=" + p.achar+") <= '9'" ) }
		else return false
		
		if( p.achar <= '7' ) return false
		else { System.out.println( "p.achar(=" + p.achar+") <= '7' : false" ) }
		
		if( p.achar >= '8' ) { System.out.println( "p.achar(=" + p.achar+") >= '8'" ) }
		else return false
		
		if( p.achar >= '7' ) { System.out.println( "p.achar(=" + p.achar+") <= '7'" ) }
		else return false

		if( p.achar >= '9' ) return false
		else { System.out.println( "p.achar(=" + p.achar+") <= '9' : false" ) }
		
		return true

	}	
	
	// p.a[0]
	fn char_member1_d1_map_var_operation_test()->boolean {
		
		System.out.println("#char_member1_d1_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.arrchar_1[0] = '0'
		p.arrchar_1[1] = '0'

		System.out.println("p.arrchar_1[0]=" + p.arrchar_1[0])

		// comparation
		System.out.println("-// comparation")
		p.arrchar_1[0] = '8'
		if( p.arrchar_1[0] <= '8' ) { System.out.println( "p.arrchar_1[0](=" + p.arrchar_1[0]+") <= '8'" ) }
		else return false

		if( p.arrchar_1[0] <= '9' ) { System.out.println( "p.arrchar_1[0](=" + p.arrchar_1[0]+") <= '9'" ) }
		else return false
		
		if( p.arrchar_1[0] <= '7' ) return false
		else { System.out.println( "p.arrchar_1[0](=" + p.arrchar_1[0]+") <= '7' : false" ) }
		
		if( p.arrchar_1[0] >= '8' ) { System.out.println( "p.arrchar_1[0](=" + p.arrchar_1[0]+") >= '8'" ) }
		else return false
		
		if( p.arrchar_1[0] >= '7' ) { System.out.println( "p.arrchar_1[0](=" + p.arrchar_1[0]+") <= '7'" ) }
		else return false

		if( p.arrchar_1[0] >= '9' ) return false
		else { System.out.println( "p.arrchar_1[0](=" + p.arrchar_1[0]+") <= '9' : false" ) }
		
		return true

	}
	

	
	/* short type operation test */	
	fn short_var_operation_test()->boolean {
		
		System.out.println("#short_var_operation_test");
		
		ashort:short = 0s
		bshort:short = 0s

		System.out.println("ashort=" + ashort)

		// comparation
		System.out.println("-// comparation")
		ashort = 8s
		if( ashort <= 8s ) { System.out.println( "ashort(=" + ashort+") <= 8s" ) }
		else return false

		if( ashort <= 9s ) { System.out.println( "ashort(=" + ashort+") <= 9s" ) }
		else return false
		
		if( ashort <= 7s ) return false
		else { System.out.println( "ashort(=" + ashort+") <= 7s : false" ) }
		
		if( ashort >= 8s ) { System.out.println( "ashort(=" + ashort+") >= 8s" ) }
		else return false
		
		if( ashort >= 7s ) { System.out.println( "ashort(=" + ashort+") <= 7s" ) }
		else return false

		if( ashort >= 9s ) return false
		else { System.out.println( "ashort(=" + ashort+") <= 9s : false" ) }
		
		return true

	}

	// a[0]
	fn short_d1_map_operation_test()->boolean {
		
		System.out.println("#short_d1_map_operation_test");
		
		arrshort:short[] = short[100]
		
		arrshort[0] = 0s
		arrshort[1] = 0s

		System.out.println("arrshort[0]=" + arrshort[0])

		// comparation
		System.out.println("-// comparation")
		arrshort[0] = 8s
		if( arrshort[0] <= 8s ) { System.out.println( "arrshort[0](=" + arrshort[0]+") <= 8s" ) }
		else return false

		if( arrshort[0] <= 9s ) { System.out.println( "arrshort[0](=" + arrshort[0]+") <= 9s" ) }
		else return false
		
		if( arrshort[0] <= 7s ) return false
		else { System.out.println( "arrshort[0](=" + arrshort[0]+") <= 7s : false" ) }
		
		if( arrshort[0] >= 8s ) { System.out.println( "arrshort[0](=" + arrshort[0]+") >= 8s" ) }
		else return false
		
		if( arrshort[0] >= 7s ) { System.out.println( "arrshort[0](=" + arrshort[0]+") <= 7s" ) }
		else return false

		if( arrshort[0] >= 9s ) return false
		else { System.out.println( "arrshort[0](=" + arrshort[0]+") <= 9s : false" ) }
		
		return true

	}	

	// a[0][0]
	fn short_d2_map_operation_test()->boolean {
		
		System.out.println("#short_d2_map_operation_test");
		
		arrshort2:short[][] = short[100][]
		arrshort2[0] = short[100]
		
		arrshort2[0][0] = 0s
		arrshort2[0][1] = 0s

		System.out.println("arrshort2[0][0]=" + arrshort2[0][0])

		// comparation
		System.out.println("-// comparation")
		arrshort2[0][0] = 8s
		if( arrshort2[0][0] <= 8s ) { System.out.println( "arrshort2[0][0](=" + arrshort2[0][0]+") <= 8s" ) }
		else return false

		if( arrshort2[0][0] <= 9s ) { System.out.println( "arrshort2[0][0](=" + arrshort2[0][0]+") <= 9s" ) }
		else return false
		
		if( arrshort2[0][0] <= 7s ) return false
		else { System.out.println( "arrshort2[0][0](=" + arrshort2[0][0]+") <= 7s : false" ) }
		
		if( arrshort2[0][0] >= 8s ) { System.out.println( "arrshort2[0][0](=" + arrshort2[0][0]+") >= 8s" ) }
		else return false
		
		if( arrshort2[0][0] >= 7s ) { System.out.println( "arrshort2[0][0](=" + arrshort2[0][0]+") <= 7s" ) }
		else return false

		if( arrshort2[0][0] >= 9s ) return false
		else { System.out.println( "arrshort2[0][0](=" + arrshort2[0][0]+") <= 9s : false" ) }
		
		return true

	}

	// p.a
	fn short_member1_var_operation_test()->boolean {
		
		System.out.println("#short_member1_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.ashort = 0s
		p.bshort = 0s

		System.out.println("p.ashort=" + p.ashort)

		// comparation
		System.out.println("-// comparation")
		p.ashort = 8s
		if( p.ashort <= 8s ) { System.out.println( "p.ashort(=" + p.ashort+") <= 8s" ) }
		else return false

		if( p.ashort <= 9s ) { System.out.println( "p.ashort(=" + p.ashort+") <= 9s" ) }
		else return false
		
		if( p.ashort <= 7s ) return false
		else { System.out.println( "p.ashort(=" + p.ashort+") <= 7s : false" ) }
		
		if( p.ashort >= 8s ) { System.out.println( "p.ashort(=" + p.ashort+") >= 8s" ) }
		else return false
		
		if( p.ashort >= 7s ) { System.out.println( "p.ashort(=" + p.ashort+") <= 7s" ) }
		else return false

		if( p.ashort >= 9s ) return false
		else { System.out.println( "p.ashort(=" + p.ashort+") <= 9s : false" ) }
		
		return true

	}	
	
	// p.a[0]
	fn short_member1_d1_map_var_operation_test()->boolean {
		
		System.out.println("#short_member1_d1_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.arrshort_1[0] = 0s
		p.arrshort_1[1] = 0s

		System.out.println("p.arrshort_1[0]=" + p.arrshort_1[0])

		// comparation
		System.out.println("-// comparation")
		p.arrshort_1[0] = 8s
		if( p.arrshort_1[0] <= 8s ) { System.out.println( "p.arrshort_1[0](=" + p.arrshort_1[0]+") <= 8s" ) }
		else return false

		if( p.arrshort_1[0] <= 9s ) { System.out.println( "p.arrshort_1[0](=" + p.arrshort_1[0]+") <= 9s" ) }
		else return false
		
		if( p.arrshort_1[0] <= 7s ) return false
		else { System.out.println( "p.arrshort_1[0](=" + p.arrshort_1[0]+") <= 7s : false" ) }
		
		if( p.arrshort_1[0] >= 8s ) { System.out.println( "p.arrshort_1[0](=" + p.arrshort_1[0]+") >= 8s" ) }
		else return false
		
		if( p.arrshort_1[0] >= 7s ) { System.out.println( "p.arrshort_1[0](=" + p.arrshort_1[0]+") <= 7s" ) }
		else return false

		if( p.arrshort_1[0] >= 9s ) return false
		else { System.out.println( "p.arrshort_1[0](=" + p.arrshort_1[0]+") <= 9s : false" ) }
		
		return true

	}
	
	
	/* byte type operation test */		
	// a
	fn byte_var_operation_test()->boolean {
		
		System.out.println("#byte_var_operation_test");
		
		abyte:byte = 0b
		bbyte:byte = 0b

		System.out.println("abyte=" + abyte)

		// comparation
		System.out.println("-// comparation")
		abyte = 8b
		if( abyte <= 8b ) { System.out.println( "abyte(=" + abyte+") <= 8b" ) }
		else return false

		if( abyte <= 9b ) { System.out.println( "abyte(=" + abyte+") <= 9b" ) }
		else return false
		
		if( abyte <= 7b ) return false
		else { System.out.println( "abyte(=" + abyte+") <= 7b : false" ) }
		
		if( abyte >= 8b ) { System.out.println( "abyte(=" + abyte+") >= 8b" ) }
		else return false
		
		if( abyte >= 7b ) { System.out.println( "abyte(=" + abyte+") <= 7b" ) }
		else return false

		if( abyte >= 9b ) return false
		else { System.out.println( "abyte(=" + abyte+") <= 9b : false" ) }
		
		return true

	}

	// a[0]
	fn byte_d1_map_operation_test()->boolean {
		
		System.out.println("#byte_d1_map_operation_test");
		
		arrbyte:byte[] = byte[100]
		
		arrbyte[0] = 0b
		arrbyte[1] = 0b

		System.out.println("arrbyte[0]=" + arrbyte[0])

		// comparation
		System.out.println("-// comparation")
		arrbyte[0] = 8b
		if( arrbyte[0] <= 8b ) { System.out.println( "arrbyte[0](=" + arrbyte[0]+") <= 8b" ) }
		else return false

		if( arrbyte[0] <= 9b ) { System.out.println( "arrbyte[0](=" + arrbyte[0]+") <= 9b" ) }
		else return false
		
		if( arrbyte[0] <= 7b ) return false
		else { System.out.println( "arrbyte[0](=" + arrbyte[0]+") <= 7b : false" ) }
		
		if( arrbyte[0] >= 8b ) { System.out.println( "arrbyte[0](=" + arrbyte[0]+") >= 8b" ) }
		else return false
		
		if( arrbyte[0] >= 7b ) { System.out.println( "arrbyte[0](=" + arrbyte[0]+") <= 7b" ) }
		else return false

		if( arrbyte[0] >= 9b ) return false
		else { System.out.println( "arrbyte[0](=" + arrbyte[0]+") <= 9b : false" ) }
		
		return true

	}	

	// a[0][0]
	fn byte_d2_map_operation_test()->boolean {
		
		System.out.println("#byte_d2_map_operation_test");
		
		arrbyte2:byte[][] = byte[100][]
		arrbyte2[0] = byte[100]
		
		arrbyte2[0][0] = 0b
		arrbyte2[0][1] = 0b

		System.out.println("arrbyte2[0][0]=" + arrbyte2[0][0])

		// comparation
		System.out.println("-// comparation")
		arrbyte2[0][0] = 8b
		if( arrbyte2[0][0] <= 8b ) { System.out.println( "arrbyte2[0][0](=" + arrbyte2[0][0]+") <= 8b" ) }
		else return false

		if( arrbyte2[0][0] <= 9b ) { System.out.println( "arrbyte2[0][0](=" + arrbyte2[0][0]+") <= 9b" ) }
		else return false
		
		if( arrbyte2[0][0] <= 7b ) return false
		else { System.out.println( "arrbyte2[0][0](=" + arrbyte2[0][0]+") <= 7b : false" ) }
		
		if( arrbyte2[0][0] >= 8b ) { System.out.println( "arrbyte2[0][0](=" + arrbyte2[0][0]+") >= 8b" ) }
		else return false
		
		if( arrbyte2[0][0] >= 7b ) { System.out.println( "arrbyte2[0][0](=" + arrbyte2[0][0]+") <= 7b" ) }
		else return false

		if( arrbyte2[0][0] >= 9b ) return false
		else { System.out.println( "arrbyte2[0][0](=" + arrbyte2[0][0]+") <= 9b : false" ) }
		
		return true

	}

	// p.a
	fn byte_member1_var_operation_test()->boolean {
		
		System.out.println("#byte_member1_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.abyte = 0b
		p.bbyte = 0b

		System.out.println("p.abyte=" + p.abyte)

		// comparation
		System.out.println("-// comparation")
		p.abyte = 8b
		if( p.abyte <= 8b ) { System.out.println( "p.abyte(=" + p.abyte+") <= 8b" ) }
		else return false

		if( p.abyte <= 9b ) { System.out.println( "p.abyte(=" + p.abyte+") <= 9b" ) }
		else return false
		
		if( p.abyte <= 7b ) return false
		else { System.out.println( "p.abyte(=" + p.abyte+") <= 7b : false" ) }
		
		if( p.abyte >= 8b ) { System.out.println( "p.abyte(=" + p.abyte+") >= 8b" ) }
		else return false
		
		if( p.abyte >= 7b ) { System.out.println( "p.abyte(=" + p.abyte+") <= 7b" ) }
		else return false

		if( p.abyte >= 9b ) return false
		else { System.out.println( "p.abyte(=" + p.abyte+") <= 9b : false" ) }
		
		return true

	}	
	
	// p.a[0]
	fn byte_member1_d1_map_var_operation_test()->boolean {
		
		System.out.println("#byte_member1_d1_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.arrbyte_1[0] = 0b
		p.arrbyte_1[1] = 0b

		System.out.println("p.arrbyte_1[0]=" + p.arrbyte_1[0])

		// comparation
		System.out.println("-// comparation")
		p.arrbyte_1[0] = 8b
		if( p.arrbyte_1[0] <= 8b ) { System.out.println( "p.arrbyte_1[0](=" + p.arrbyte_1[0]+") <= 8b" ) }
		else return false

		if( p.arrbyte_1[0] <= 9b ) { System.out.println( "p.arrbyte_1[0](=" + p.arrbyte_1[0]+") <= 9b" ) }
		else return false
		
		if( p.arrbyte_1[0] <= 7b ) return false
		else { System.out.println( "p.arrbyte_1[0](=" + p.arrbyte_1[0]+") <= 7b : false" ) }
		
		if( p.arrbyte_1[0] >= 8b ) { System.out.println( "p.arrbyte_1[0](=" + p.arrbyte_1[0]+") >= 8b" ) }
		else return false
		
		if( p.arrbyte_1[0] >= 7b ) { System.out.println( "p.arrbyte_1[0](=" + p.arrbyte_1[0]+") <= 7b" ) }
		else return false

		if( p.arrbyte_1[0] >= 9b ) return false
		else { System.out.println( "p.arrbyte_1[0](=" + p.arrbyte_1[0]+") <= 9b : false" ) }
		
		return true

	}
	
	
	
	
	/* boolean type operation test */	
	
	fn boolean_operation_test()->boolean {
		
		System.out.println("#boolean_d1_map_operation_test");
		
		abool:boolean = true
		bbool:boolean = false
		cbool:boolean = true
		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( abool == true ) {} else return false
		if( abool == false ) return false
		if( abool != true ) return false
		if( abool != false ) {} else return false 

		if( true == abool ) {} else return false
		if( false == abool ) return false
		if( true != abool ) return false
		if( false != abool ) {} else return false 
		
		if( abool == bbool ) return false
		if( !abool == bbool ) {} else return false
		if( abool == ! bbool ) {} else return false
		if( ! abool == ! bbool ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		abool = true bbool = true
		if( abool && bbool ) {} else return false
		abool = true, bbool = false
		if( abool && bbool ) return false
		abool = false, bbool = true
		if( abool && bbool ) return false
		abool = false, bbool = false
		if( abool && bbool ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		abool = true bbool = true
		if( abool || bbool ) {} else return false
		abool = true bbool = false
		if( abool || bbool ) {} else return false
		abool = false bbool = true
		if( abool || bbool ) {} else return false
		abool = false, bbool = false
		if( abool || bbool )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		abool = true, bbool = true, cbool = true
		if( abool && bbool && cbool ) {} else return false
		
		abool = true, bbool = false, cbool = true
		if( abool && bbool && cbool ) return false
		
		abool = true, bbool = false, cbool = false
		if( abool && bbool && cbool ) return false
		
		
		i:int = 10
		System.out.println( "i == 10 && true ->" + (i == 10 && true) ) 
		if( i == 10 && true ) {} else return false
		if( i != 10 && true ) return false
		if( i == 10 && false ) return false
		if( true && i == 10 ) {} else return false
		if( true && i != 10 ) return false
		if( false && i == 10 ) return false

		if( ( i == 10) && (true) ) {} else return false
		if( (i != 10) && (true) ) return false
		if( (i == 10) && (false) ) return false
		if( (true) && (i == 10) ) {} else return false
		if( (true) && (i != 10) ) return false
		if( (false) && (i == 10) ) return false
		
		i2:int = 20
		System.out.println( "i == 10 && i2 == 20 ->" + (i == 10 && i2 == 20) ) 
		if( i == 10 && i2 == 20 ) {} else return false
		System.out.println( "i != 10 && i2 == 20  ->" + (i != 10 && i2 == 20 ) ) 
		if( i != 10 && i2 == 20 ) return false
		System.out.println( "i == 10 && i2 != 20  ->" + (i == 10 && i2 != 20 ) ) 
		if( i == 10 && i2 != 20 ) return false

		if( (i == 10) && (i2 == 20) ) {} else return false
		if( (i != 10) && (i2 == 20) ) return false
		if( (i == 10) && (i2 != 20) ) return false
		
		if( i == 10 || true ) {} else return false
		if( i != 10 || true ) {} else return false
		if( i == 10 || false ) {} else  return false
		if( i != 10 || false ) return false

		if( true || i == 10 ) {} else return false
		if( true || i != 10 ) {} else return false
		if( false || i == 10 ) {} else return false
		if( false || i != 10 ) return false

		if( (i == 10) || (true) ) {} else return false
		if( (i != 10) || (true) ) {} else return false
		if( (i == 10) || (false) ) {} else  return false
		if( (i != 10) || (false) ) return false

		if( (true) || (i == 10) ) {} else return false
		if( (true) || (i != 10) ) {} else return false
		if( (false) || (i == 10) ) {} else return false
		if( (false) || (i != 10) ) return false
		
		if( i == 10 || i2 == 20 ) {} else return false
		if( i != 10 || i2 == 20 ) {} else return false
		if( i == 10 || i2 != 20 ) {} else return false
		if( i != 10 || i2 != 20 ) return false

		if( (i == 10) || (i2 == 20) ) {} else return false
		if( (i != 10) || (i2 == 20) ) {} else return false
		if( (i == 10) || (i2 != 20) ) {} else return false
		if( (i != 10) || (i2 != 20) ) return false
		
		return true
	}


	fn boolean_d1_map_operation_test()->boolean {
		
		System.out.println("#boolean_d1_map_operation_test");
		
		arrbool:boolean[] = boolean[100]
		arrbool[0] = true
		arrbool[1] = false
		arrbool[2] = true
		
		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( arrbool[0] == true ) {} else return false
		if( arrbool[0] == false ) return false
		if( arrbool[0] != true ) return false
		if( arrbool[0] != false ) {} else return false 

		if( true == arrbool[0] ) {} else return false
		if( false == arrbool[0] ) return false
		if( true != arrbool[0] ) return false
		if( false != arrbool[0] ) {} else return false 
		
		if( arrbool[0] == arrbool[1] ) return false
		if( !arrbool[0] == arrbool[1] ) {} else return false
		if( arrbool[0] == ! arrbool[1] ) {} else return false
		if( ! arrbool[0] == ! arrbool[1] ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		arrbool[0] = true arrbool[1] = true
		if( arrbool[0] && arrbool[1] ) {} else return false
		arrbool[0] = true, arrbool[1] = false
		if( arrbool[0] && arrbool[1] ) return false
		arrbool[0] = false, arrbool[1] = true
		if( arrbool[0] && arrbool[1] ) return false
		arrbool[0] = false, arrbool[1] = false
		if( arrbool[0] && arrbool[1] ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		arrbool[0] = true arrbool[1] = true
		if( arrbool[0] || arrbool[1] ) {} else return false
		arrbool[0] = true arrbool[1] = false
		if( arrbool[0] || arrbool[1] ) {} else return false
		arrbool[0] = false arrbool[1] = true
		if( arrbool[0] || arrbool[1] ) {} else return false
		arrbool[0] = false, arrbool[1] = false
		if( arrbool[0] || arrbool[1] )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		arrbool[0] = true, arrbool[1] = true, arrbool[2] = true
		if( arrbool[0] && arrbool[1] && arrbool[2] ) {} else return false
		
		arrbool[0] = true, arrbool[1] = false, arrbool[2] = true
		if( arrbool[0] && arrbool[1] && arrbool[2] ) return false
		
		arrbool[0] = true, arrbool[1] = false, arrbool[2] = false
		if( arrbool[0] && arrbool[1] && arrbool[2] ) return false
		
	
		
		return true
	}
	
	
	fn boolean_d2_map_operation_test()->boolean {
		
		System.out.println("#boolean_d1_map_operation_test");
		
		arrbool2:boolean[][] = boolean[100][]
		arrbool2[0] = boolean[100]
		
		arrbool2[0][0] = true
		arrbool2[0][1] = false
		arrbool2[0][2] = true
		
		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( arrbool2[0][0] == true ) {} else return false
		if( arrbool2[0][0] == false ) return false
		if( arrbool2[0][0] != true ) return false
		if( arrbool2[0][0] != false ) {} else return false 

		if( true == arrbool2[0][0] ) {} else return false
		if( false == arrbool2[0][0] ) return false
		if( true != arrbool2[0][0] ) return false
		if( false != arrbool2[0][0] ) {} else return false 
		
		if( arrbool2[0][0] == arrbool2[0][1] ) return false
		if( !arrbool2[0][0] == arrbool2[0][1] ) {} else return false
		if( arrbool2[0][0] == ! arrbool2[0][1] ) {} else return false
		if( ! arrbool2[0][0] == ! arrbool2[0][1] ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		arrbool2[0][0] = true arrbool2[0][1] = true
		if( arrbool2[0][0] && arrbool2[0][1] ) {} else return false
		arrbool2[0][0] = true, arrbool2[0][1] = false
		if( arrbool2[0][0] && arrbool2[0][1] ) return false
		arrbool2[0][0] = false, arrbool2[0][1] = true
		if( arrbool2[0][0] && arrbool2[0][1] ) return false
		arrbool2[0][0] = false, arrbool2[0][1] = false
		if( arrbool2[0][0] && arrbool2[0][1] ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		arrbool2[0][0] = true arrbool2[0][1] = true
		if( arrbool2[0][0] || arrbool2[0][1] ) {} else return false
		arrbool2[0][0] = true arrbool2[0][1] = false
		if( arrbool2[0][0] || arrbool2[0][1] ) {} else return false
		arrbool2[0][0] = false arrbool2[0][1] = true
		if( arrbool2[0][0] || arrbool2[0][1] ) {} else return false
		arrbool2[0][0] = false, arrbool2[0][1] = false
		if( arrbool2[0][0] || arrbool2[0][1] )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		arrbool2[0][0] = true, arrbool2[0][1] = true, arrbool2[0][2] = true
		if( arrbool2[0][0] && arrbool2[0][1] && arrbool2[0][2] ) {} else return false
		
		arrbool2[0][0] = true, arrbool2[0][1] = false, arrbool2[0][2] = true
		if( arrbool2[0][0] && arrbool2[0][1] && arrbool2[0][2] ) return false
		
		arrbool2[0][0] = true, arrbool2[0][1] = false, arrbool2[0][2] = false
		if( arrbool2[0][0] && arrbool2[0][1] && arrbool2[0][2] ) return false
		
	
		
		return true
	}


	fn boolean_member1_var_operation_test()->boolean {
	
		
		System.out.println("#boolean_member1_var_operation_test");

		p:TestSuperParent = TestSuperParent()

		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( p.abool == true ) {} else return false
		if( p.abool == false ) return false
		if( p.abool != true ) return false
		if( p.abool != false ) {} else return false 

		if( true == p.abool ) {} else return false
		if( false == p.abool ) return false
		if( true != p.abool ) return false
		if( false != p.abool ) {} else return false 
		
		if( p.abool == p.bbool ) return false
		if( !p.abool == p.bbool ) {} else return false
		if( p.abool == ! p.bbool ) {} else return false
		if( ! p.abool == ! p.bbool ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		p.abool = true p.bbool = true
		if( p.abool && p.bbool ) {} else return false
		p.abool = true, p.bbool = false
		if( p.abool && p.bbool ) return false
		p.abool = false, p.bbool = true
		if( p.abool && p.bbool ) return false
		p.abool = false, p.bbool = false
		if( p.abool && p.bbool ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		p.abool = true p.bbool = true
		if( p.abool || p.bbool ) {} else return false
		p.abool = true p.bbool = false
		if( p.abool || p.bbool ) {} else return false
		p.abool = false p.bbool = true
		if( p.abool || p.bbool ) {} else return false
		p.abool = false, p.bbool = false
		if( p.abool || p.bbool )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		p.abool = true, p.bbool = true, p.cbool = true
		if( p.abool && p.bbool && p.cbool ) {} else return false
		
		p.abool = true, p.bbool = false, p.cbool = true
		if( p.abool && p.bbool && p.cbool ) return false
		
		p.abool = true, p.bbool = false, p.cbool = false
		if( p.abool && p.bbool && p.cbool ) return false
		
		
		
		return true
	}	


	fn boolean_member2_var_operation_test()->boolean {
	
		
		System.out.println("#boolean_member2_var_operation_test");

		o:TestSuperParentOwner = TestSuperParentOwner()

		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( o.p.abool == true ) {} else return false
		if( o.p.abool == false ) return false
		if( o.p.abool != true ) return false
		if( o.p.abool != false ) {} else return false 

		if( true == o.p.abool ) {} else return false
		if( false == o.p.abool ) return false
		if( true != o.p.abool ) return false
		if( false != o.p.abool ) {} else return false 
		
		if( o.p.abool == o.p.bbool ) return false
		if( !o.p.abool == o.p.bbool ) {} else return false
		if( o.p.abool == ! o.p.bbool ) {} else return false
		if( ! o.p.abool == ! o.p.bbool ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		o.p.abool = true o.p.bbool = true
		if( o.p.abool && o.p.bbool ) {} else return false
		o.p.abool = true, o.p.bbool = false
		if( o.p.abool && o.p.bbool ) return false
		o.p.abool = false, o.p.bbool = true
		if( o.p.abool && o.p.bbool ) return false
		o.p.abool = false, o.p.bbool = false
		if( o.p.abool && o.p.bbool ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		o.p.abool = true o.p.bbool = true
		if( o.p.abool || o.p.bbool ) {} else return false
		o.p.abool = true o.p.bbool = false
		if( o.p.abool || o.p.bbool ) {} else return false
		o.p.abool = false o.p.bbool = true
		if( o.p.abool || o.p.bbool ) {} else return false
		o.p.abool = false, o.p.bbool = false
		if( o.p.abool || o.p.bbool )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		o.p.abool = true, o.p.bbool = true, o.p.cbool = true
		if( o.p.abool && o.p.bbool && o.p.cbool ) {} else return false
		
		o.p.abool = true, o.p.bbool = false, o.p.cbool = true
		if( o.p.abool && o.p.bbool && o.p.cbool ) return false
		
		o.p.abool = true, o.p.bbool = false, o.p.cbool = false
		if( o.p.abool && o.p.bbool && o.p.cbool ) return false
		
		
		
		return true
	}


	fn boolean_member1_d1_map_var_operation_test()->boolean {
	
		
		System.out.println("#boolean_member1_d1_map_var_operation_test");

		p:TestSuperParent = TestSuperParent()

		p.arrbool_1[0] = true
		p.arrbool_1[1] = false
		p.arrbool_1[2] = true

		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( p.arrbool_1[0] == true ) {} else return false
		if( p.arrbool_1[0] == false ) return false
		if( p.arrbool_1[0] != true ) return false
		if( p.arrbool_1[0] != false ) {} else return false 

		if( true == p.arrbool_1[0] ) {} else return false
		if( false == p.arrbool_1[0] ) return false
		if( true != p.arrbool_1[0] ) return false
		if( false != p.arrbool_1[0] ) {} else return false 
		
		if( p.arrbool_1[0] == p.arrbool_1[1] ) return false
		if( !p.arrbool_1[0] == p.arrbool_1[1] ) {} else return false
		if( p.arrbool_1[0] == ! p.arrbool_1[1] ) {} else return false
		if( ! p.arrbool_1[0] == ! p.arrbool_1[1] ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		p.arrbool_1[0] = true p.arrbool_1[1] = true
		if( p.arrbool_1[0] && p.arrbool_1[1] ) {} else return false
		p.arrbool_1[0] = true, p.arrbool_1[1] = false
		if( p.arrbool_1[0] && p.arrbool_1[1] ) return false
		p.arrbool_1[0] = false, p.arrbool_1[1] = true
		if( p.arrbool_1[0] && p.arrbool_1[1] ) return false
		p.arrbool_1[0] = false, p.arrbool_1[1] = false
		if( p.arrbool_1[0] && p.arrbool_1[1] ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		p.arrbool_1[0] = true p.arrbool_1[1] = true
		if( p.arrbool_1[0] || p.arrbool_1[1] ) {} else return false
		p.arrbool_1[0] = true p.arrbool_1[1] = false
		if( p.arrbool_1[0] || p.arrbool_1[1] ) {} else return false
		p.arrbool_1[0] = false p.arrbool_1[1] = true
		if( p.arrbool_1[0] || p.arrbool_1[1] ) {} else return false
		p.arrbool_1[0] = false, p.arrbool_1[1] = false
		if( p.arrbool_1[0] || p.arrbool_1[1] )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		p.arrbool_1[0] = true, p.arrbool_1[1] = true, p.arrbool_1[2] = true
		if( p.arrbool_1[0] && p.arrbool_1[1] && p.arrbool_1[2] ) {} else return false
		
		p.arrbool_1[0] = true, p.arrbool_1[1] = false, p.arrbool_1[2] = true
		if( p.arrbool_1[0] && p.arrbool_1[1] && p.arrbool_1[2] ) return false
		
		p.arrbool_1[0] = true, p.arrbool_1[1] = false, p.arrbool_1[2] = false
		if( p.arrbool_1[0] && p.arrbool_1[1] && p.arrbool_1[2] ) return false
		
		
		
		return true
	}


	fn boolean_member1_d1_singleton_map_var_operation_test()->boolean {
		
		System.out.println("#boolean_member1_d1_singleton_map_var_operation_test");

		p:TestSuperParent = TestSuperParent()

		p.static_arrbool_1[0] = true
		p.static_arrbool_1[1] = false
		p.static_arrbool_1[2] = true

		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( p.static_arrbool_1[0] == true ) {} else return false
		if( p.static_arrbool_1[0] == false ) return false
		if( p.static_arrbool_1[0] != true ) return false
		if( p.static_arrbool_1[0] != false ) {} else return false 

		if( true == p.static_arrbool_1[0] ) {} else return false
		if( false == p.static_arrbool_1[0] ) return false
		if( true != p.static_arrbool_1[0] ) return false
		if( false != p.static_arrbool_1[0] ) {} else return false 
		
		if( p.static_arrbool_1[0] == p.static_arrbool_1[1] ) return false
		if( !p.static_arrbool_1[0] == p.static_arrbool_1[1] ) {} else return false
		if( p.static_arrbool_1[0] == ! p.static_arrbool_1[1] ) {} else return false
		if( ! p.static_arrbool_1[0] == ! p.static_arrbool_1[1] ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		p.static_arrbool_1[0] = true p.static_arrbool_1[1] = true
		if( p.static_arrbool_1[0] && p.static_arrbool_1[1] ) {} else return false
		p.static_arrbool_1[0] = true, p.static_arrbool_1[1] = false
		if( p.static_arrbool_1[0] && p.static_arrbool_1[1] ) return false
		p.static_arrbool_1[0] = false, p.static_arrbool_1[1] = true
		if( p.static_arrbool_1[0] && p.static_arrbool_1[1] ) return false
		p.static_arrbool_1[0] = false, p.static_arrbool_1[1] = false
		if( p.static_arrbool_1[0] && p.static_arrbool_1[1] ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		p.static_arrbool_1[0] = true p.static_arrbool_1[1] = true
		if( p.static_arrbool_1[0] || p.static_arrbool_1[1] ) {} else return false
		p.static_arrbool_1[0] = true p.static_arrbool_1[1] = false
		if( p.static_arrbool_1[0] || p.static_arrbool_1[1] ) {} else return false
		p.static_arrbool_1[0] = false p.static_arrbool_1[1] = true
		if( p.static_arrbool_1[0] || p.static_arrbool_1[1] ) {} else return false
		p.static_arrbool_1[0] = false, p.static_arrbool_1[1] = false
		if( p.static_arrbool_1[0] || p.static_arrbool_1[1] )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		p.static_arrbool_1[0] = true, p.static_arrbool_1[1] = true, p.static_arrbool_1[2] = true
		if( p.static_arrbool_1[0] && p.static_arrbool_1[1] && p.static_arrbool_1[2] ) {} else return false
		
		p.static_arrbool_1[0] = true, p.static_arrbool_1[1] = false, p.static_arrbool_1[2] = true
		if( p.static_arrbool_1[0] && p.static_arrbool_1[1] && p.static_arrbool_1[2] ) return false
		
		p.static_arrbool_1[0] = true, p.static_arrbool_1[1] = false, p.static_arrbool_1[2] = false
		if( p.static_arrbool_1[0] && p.static_arrbool_1[1] && p.static_arrbool_1[2] ) return false
		
		return true
	}


	fn boolean_member1_var_in_object_map_operation_test()->boolean {
	
		
		System.out.println("#boolean_member1_var_in_object_map_operation_test");

		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( parr[0].abool == true ) {} else return false
		if( parr[0].abool == false ) return false
		if( parr[0].abool != true ) return false
		if( parr[0].abool != false ) {} else return false 

		if( true == parr[0].abool ) {} else return false
		if( false == parr[0].abool ) return false
		if( true != parr[0].abool ) return false
		if( false != parr[0].abool ) {} else return false 
		
		if( parr[0].abool == parr[0].bbool ) return false
		if( !parr[0].abool == parr[0].bbool ) {} else return false
		if( parr[0].abool == ! parr[0].bbool ) {} else return false
		if( ! parr[0].abool == ! parr[0].bbool ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		parr[0].abool = true parr[0].bbool = true
		if( parr[0].abool && parr[0].bbool ) {} else return false
		parr[0].abool = true, parr[0].bbool = false
		if( parr[0].abool && parr[0].bbool ) return false
		parr[0].abool = false, parr[0].bbool = true
		if( parr[0].abool && parr[0].bbool ) return false
		parr[0].abool = false, parr[0].bbool = false
		if( parr[0].abool && parr[0].bbool ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		parr[0].abool = true parr[0].bbool = true
		if( parr[0].abool || parr[0].bbool ) {} else return false
		parr[0].abool = true parr[0].bbool = false
		if( parr[0].abool || parr[0].bbool ) {} else return false
		parr[0].abool = false parr[0].bbool = true
		if( parr[0].abool || parr[0].bbool ) {} else return false
		parr[0].abool = false, parr[0].bbool = false
		if( parr[0].abool || parr[0].bbool )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		parr[0].abool = true, parr[0].bbool = true, parr[0].cbool = true
		if( parr[0].abool && parr[0].bbool && parr[0].cbool ) {} else return false
		
		parr[0].abool = true, parr[0].bbool = false, parr[0].cbool = true
		if( parr[0].abool && parr[0].bbool && parr[0].cbool ) return false
		
		parr[0].abool = true, parr[0].bbool = false, parr[0].cbool = false
		if( parr[0].abool && parr[0].bbool && parr[0].cbool ) return false
		
		
		
		return true
	}	


	fn boolean_d1_map_in_object_map_operation_test()->boolean {
		
		System.out.println("#boolean_d1_map_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		 parr[0].arrbool_1[0] = true
		 parr[0].arrbool_1[1] = false
		 parr[0].arrbool_1[2] = true
		
		
		if( true ) {} else return false 
		if( false ) return false		
		
		if( ! true ) return false
		if( ! false ) {} else return false
	
		if( parr[0].arrbool_1[0] == true ) {} else return false
		if( parr[0].arrbool_1[0] == false ) return false
		if( parr[0].arrbool_1[0] != true ) return false
		if( parr[0].arrbool_1[0] != false ) {} else return false 

		if( true == parr[0].arrbool_1[0] ) {} else return false
		if( false == parr[0].arrbool_1[0] ) return false
		if( true != parr[0].arrbool_1[0] ) return false
		if( false != parr[0].arrbool_1[0] ) {} else return false 
		
		if( parr[0].arrbool_1[0] == parr[0].arrbool_1[1] ) return false
		if( !parr[0].arrbool_1[0] == parr[0].arrbool_1[1] ) {} else return false
		if( parr[0].arrbool_1[0] == ! parr[0].arrbool_1[1] ) {} else return false
		if( ! parr[0].arrbool_1[0] == ! parr[0].arrbool_1[1] ) return false
		
		if( true && true ) {} else return false
		if( true && false ) return false
		if( false && true ) return false 
		if( false && false ) return false

		parr[0].arrbool_1[0] = true parr[0].arrbool_1[1] = true
		if( parr[0].arrbool_1[0] && parr[0].arrbool_1[1] ) {} else return false
		parr[0].arrbool_1[0] = true, parr[0].arrbool_1[1] = false
		if( parr[0].arrbool_1[0] && parr[0].arrbool_1[1] ) return false
		parr[0].arrbool_1[0] = false, parr[0].arrbool_1[1] = true
		if( parr[0].arrbool_1[0] && parr[0].arrbool_1[1] ) return false
		parr[0].arrbool_1[0] = false, parr[0].arrbool_1[1] = false
		if( parr[0].arrbool_1[0] && parr[0].arrbool_1[1] ) return false

		if( true || true ) {} else return false 
		if( true || false ) {} else return false
		if( false || true ) {} else return false
		if( false || false ) return false 
		
		parr[0].arrbool_1[0] = true parr[0].arrbool_1[1] = true
		if( parr[0].arrbool_1[0] || parr[0].arrbool_1[1] ) {} else return false
		parr[0].arrbool_1[0] = true parr[0].arrbool_1[1] = false
		if( parr[0].arrbool_1[0] || parr[0].arrbool_1[1] ) {} else return false
		parr[0].arrbool_1[0] = false parr[0].arrbool_1[1] = true
		if( parr[0].arrbool_1[0] || parr[0].arrbool_1[1] ) {} else return false
		parr[0].arrbool_1[0] = false, parr[0].arrbool_1[1] = false
		if( parr[0].arrbool_1[0] || parr[0].arrbool_1[1] )  return false
		
		
		if( true && true && true ) {} else return false
		if( true && false && true ) return false
		if( false && true && true ) return false 
		if( false && false && true ) return false
		
		parr[0].arrbool_1[0] = true, parr[0].arrbool_1[1] = true, parr[0].arrbool_1[2] = true
		if( parr[0].arrbool_1[0] && parr[0].arrbool_1[1] && parr[0].arrbool_1[2] ) {} else return false
		
		parr[0].arrbool_1[0] = true, parr[0].arrbool_1[1] = false, parr[0].arrbool_1[2] = true
		if( parr[0].arrbool_1[0] && parr[0].arrbool_1[1] && parr[0].arrbool_1[2] ) return false
		
		parr[0].arrbool_1[0] = true, parr[0].arrbool_1[1] = false, parr[0].arrbool_1[2] = false
		if( parr[0].arrbool_1[0] && parr[0].arrbool_1[1] && parr[0].arrbool_1[2] ) return false
	
		
		return true
	}
	
	
	
	/* long type operation test */
	// a
	fn long_var_operation_test()->boolean {
		
		System.out.println("#long_var_operation_test");
		
		along:long = 0L
		blong:long = 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		along = 100L * 100L 
		System.out.println("along="+along)
		if( along != 10000L ) return false
		
		along = 100L * 100L + 1L 
		System.out.println("along="+along)
		if( along != 10001L ) return false
		
		along = 100L * (100L + 1L) 
		System.out.println("along="+along)
		if( along != 10100L ) return false
		
		along = 100L * (100L + 10L * 10L) 
		System.out.println("along="+along)
		if( along != 20000L ) return false
		
		// division
		System.out.println("-// division")

		along = 100L / 100L 
		System.out.println("along="+along)
		if( along != 1L ) return false

		along = 100L / 100L + 1L 
		System.out.println("along="+along)
		if( along != 2L ) return false
		
		along = 100L / (99L + 1L) 
		System.out.println("along="+along)
		if( along != 1L ) return false
		
		
		along = 100L / (99L + 10L / 10L ) 
		System.out.println("along="+along)
		if( along != 1L ) return false

		along = 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("along="+along)
		if( along != 20L ) return false

		
		// rest
		System.out.println("-// rest")
		along = 10L % 9L 	
		System.out.println("along="+along)
		if( along != 1L ) return false
		
		along = 10L % 9L * 100L 	
		System.out.println("along="+along)
		if( along != 100L ) return false

		along = 10L % 9L + 1L	
		System.out.println("along="+along)
		if( along != 2L ) return false

		along = (5L + 5L ) % 9L + 1L	
		System.out.println("along="+along)
		if( along != 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		along = 100L
		if( along <= 100L ) { System.out.println( "along(=" + along+") <= 100L" ) }
		else return false
		
		if( along <= 101L ) { System.out.println( "along(=" + along+") <= 101L" ) }
		else return false
		
		if( along <= 99L ) return false
		else { System.out.println( "along(=" + along+") <= 99L : false" ) }
		
		if( along >= 100L ) { System.out.println( "along(=" + along+") >= 100L" ) }
		else return false
		
		if( along >= 99L ) { System.out.println( "along(=" + along+") <= 99L" ) }
		else return false

		if( along >= 101L ) return false
		else { System.out.println( "along(=" + along+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		along = 0x1FL
		blong = along & 0xF0L
		System.out.printf("blong=0x%x\n", blong)
		if( blong != 0x10L ) return false

		//if( along & 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( along & 0xF0L) != 0x10L ) return false
		blong = 0xF0L & along
		System.out.printf("blong=0x%x\n", blong)
		if( blong != 0x10L ) return false
		//if( 0xF0L & along != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & along ) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		along = 0x0FL
		blong = along ^ 0xFFL
		System.out.printf("blong=0x%x\n", blong)
		if( blong != 0xf0L ) return false
		
		
		if( ( along ^ 0xFFL) != 0xf0L ) return false
		blong = 0xFFL ^ along
		System.out.printf("blong=0x%x\n", blong)
		if( 0xf0L != blong ) return false
		if( 0xf0L != ( 0xFFL ^ along) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		along = 0x0FL
		blong = along | 0xF0L
		System.out.printf("blong=0x%x\n", blong)
		if( blong != 0xffL ) return false
		
		if( ( along | 0xF0L) != 0xffL ) return false
		blong = 0xF0L | along
		System.out.printf("blong=0x%x\n", blong)
		if( 0xffL != blong ) return false
		if( 0xffL != ( 0xF0L | along) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		along = 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( along & 0xFFL ) == 0x0FL && 
			   ( along ^ 0xFFL ) == 0xF0L &&
			   ( along | 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( along & 0xFFL ) != 0x0FL || 
		   ( along ^ 0xFFL ) != 0xF0L ||
		   ( along | 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		along = 0x1L
		
		blong = along << 1
		System.out.printf("blong=0x%x\n", blong)
		if( blong != 2L ) return false
	
		blong = along << 4
		System.out.printf("blong=0x%x\n", blong)
		if( blong != 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		along = 0x10L
		blong = along >> 1
		System.out.printf("blong=0x%x\n", blong)
		if( blong != 0x8L ) return false
		
		blong = along >> 4
		System.out.printf("blong=0x%x\n", blong)
		if( blong != 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		along = 0x01L
		blong = ~along
		System.out.printf("blong=0x%x(%d)\n", blong, blong)
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( blong != 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		along = 10L
		blong = along++
		if( !( along == 11L && blong == 10L ) ) return false
		
		System.out.println("-// unary ++")
		along = 10L
		blong = ++along
		if( !( along == 11L && blong == 11L ) ) return false

		System.out.println("-// postfix --")
		along = 10L
		blong = along--
		if( !( along == 9L && blong == 10L ) ) return false
		
		
		System.out.println("-// unary --")
		along = 10L
		blong = --along
		if( !( along == 9L && blong == 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		along = 10L * -1L
		System.out.println( "along="+along)
		if( along != -10L ) return false
		
		
		along = 10L
		along = -along
		System.out.println( "along="+along)
		if( along != -10L ) return false
		
		along = -10L
		along = -along 
		System.out.println( "along="+along)
		if( along != 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		along = 10L
		System.out.println("along *= 10L; along = " + (along *= 10L) )
		System.out.println( along  )
		if( along != 100L ) return false

		if( ( along *= 10L ) != 1000L ) return false
		if( ( along *= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		along = 10000L
		System.out.println("along /= 10L; along = " + (along /= 10L) )
		System.out.println( along  )
		if( along != 1000L ) return false
		
		if( ( along /= 10L ) != 100L ) return false
		if( ( along /= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		along = 15L
		System.out.println("along %= 9L; along = " + (along %= 9L) )
		System.out.println( along  )
		if( along != 6L ) return false

		if( ( along %= 4L ) != 2L ) return false
		if( ( along %= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		along = 10L
		System.out.println( along += 10L )
		System.out.println( along  )
		if( along != 20L ) return false
		
		if( ( along += 10L ) != 30L ) return false
		if( ( along += -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		along = 30L
		System.out.println( along -= 10L )
		System.out.println( along  )
		if( along != 20L ) return false

		if( ( along -= 10L ) != 10L ) return false
		if( ( along -= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		along = 1L
		System.out.printf("along <<= 1 ; along = 0x%x\n", (along <<= 1) )
		System.out.println( along  )
		if( along != 2L ) return false
		
		System.out.printf("along <<= 4; along = 0x%x\n",  along <<= 4  )
		if( along != 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		along = 0x10L
		System.out.printf("along >>= 1 ; along = 0x%x\n",  (along >>= 1) )
		System.out.println( "0x" + Long.toHexString(along)  )
		if( along != 0x08L ) return false
		
			
		System.out.printf("along >>= 3; along = 0x%x\n",  along >>= 3  )
		if( along != 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		along = 0x1L
		System.out.printf("along &= 1L ; along = 0x%x\n", (along &= 1L) )
		System.out.println( "0x" + Long.toHexString(along)  )
		if( along != 0x1L ) return false
		
		System.out.printf("along &= 0L; along = 0x%x\n",  along &= 0L  )
		if( along != 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		along = 0x0FL
		System.out.printf("along ^= 0xFFL ; along = 0x%x\n",  (along ^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(along)  )
		if( along != 0xF0L ) return false
		
		System.out.printf("along ^= 0x0FL; along = 0x%x\n",  along ^= 0x0FL  )
		if( along != 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		along = 0x0FL
		System.out.printf("along |= 0xF0L ; along = 0x%x\n",  (along |= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(along)  )
		if( along != 0xFFL ) return false
		
		System.out.printf("along |= 0xF00L; along = 0x%x\n",  along |= 0xF00L  )
		if( along != 0xFFFL ) return false

		
		return true

	}	
	
	// a[0]
	fn long_d1_map_operation_test()->boolean {
		
		System.out.println("#long_d1_map_operation_test");
		
		arrlong:long[] = long[100]
				
		arrlong[0] = 0L
		arrlong[1] = 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		arrlong[0] = 100L * 100L 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 10000L ) return false
		
		arrlong[0] = 100L * 100L + 1L 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 10001L ) return false
		
		arrlong[0] = 100L * (100L + 1L) 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 10100L ) return false
		
		arrlong[0] = 100L * (100L + 10L * 10L) 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 20000L ) return false
		
		// division
		System.out.println("-// division")

		arrlong[0] = 100L / 100L 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 1L ) return false

		arrlong[0] = 100L / 100L + 1L 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 2L ) return false
		
		arrlong[0] = 100L / (99L + 1L) 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 1L ) return false
		
		
		arrlong[0] = 100L / (99L + 10L / 10L ) 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 1L ) return false

		arrlong[0] = 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 20L ) return false

		
		// rest
		System.out.println("-// rest")
		arrlong[0] = 10L % 9L 	
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 1L ) return false
		
		arrlong[0] = 10L % 9L * 100L 	
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 100L ) return false

		arrlong[0] = 10L % 9L + 1L	
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 2L ) return false

		arrlong[0] = (5L + 5L ) % 9L + 1L	
		System.out.println("arrlong[0]="+arrlong[0])
		if( arrlong[0] != 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		arrlong[0] = 100L
		if( arrlong[0] <= 100L ) { System.out.println( "arrlong[0](=" + arrlong[0]+") <= 100L" ) }
		else return false
		
		if( arrlong[0] <= 101L ) { System.out.println( "arrlong[0](=" + arrlong[0]+") <= 101L" ) }
		else return false
		
		if( arrlong[0] <= 99L ) return false
		else { System.out.println( "arrlong[0](=" + arrlong[0]+") <= 99L : false" ) }
		
		if( arrlong[0] >= 100L ) { System.out.println( "arrlong[0](=" + arrlong[0]+") >= 100L" ) }
		else return false
		
		if( arrlong[0] >= 99L ) { System.out.println( "arrlong[0](=" + arrlong[0]+") <= 99L" ) }
		else return false

		if( arrlong[0] >= 101L ) return false
		else { System.out.println( "arrlong[0](=" + arrlong[0]+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		arrlong[0] = 0x1FL
		arrlong[1] = arrlong[0] & 0xF0L
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( arrlong[1] != 0x10L ) return false

		//if( arrlong[0] & 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( arrlong[0] & 0xF0L) != 0x10L ) return false
		arrlong[1] = 0xF0L & arrlong[0]
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( arrlong[1] != 0x10L ) return false
		//if( 0xF0L & arrlong[0] != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & arrlong[0] ) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		arrlong[0] = 0x0FL
		arrlong[1] = arrlong[0] ^ 0xFFL
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( arrlong[1] != 0xf0L ) return false
		
		
		if( ( arrlong[0] ^ 0xFFL) != 0xf0L ) return false
		arrlong[1] = 0xFFL ^ arrlong[0]
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( 0xf0L != arrlong[1] ) return false
		if( 0xf0L != ( 0xFFL ^ arrlong[0]) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		arrlong[0] = 0x0FL
		arrlong[1] = arrlong[0] | 0xF0L
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( arrlong[1] != 0xffL ) return false
		
		if( ( arrlong[0] | 0xF0L) != 0xffL ) return false
		arrlong[1] = 0xF0L | arrlong[0]
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( 0xffL != arrlong[1] ) return false
		if( 0xffL != ( 0xF0L | arrlong[0]) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		arrlong[0] = 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( arrlong[0] & 0xFFL ) == 0x0FL && 
			   ( arrlong[0] ^ 0xFFL ) == 0xF0L &&
			   ( arrlong[0] | 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( arrlong[0] & 0xFFL ) != 0x0FL || 
		   ( arrlong[0] ^ 0xFFL ) != 0xF0L ||
		   ( arrlong[0] | 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		arrlong[0] = 0x1L
		
		arrlong[1] = arrlong[0] << 1
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( arrlong[1] != 2L ) return false
	
		arrlong[1] = arrlong[0] << 4
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( arrlong[1] != 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		arrlong[0] = 0x10L
		arrlong[1] = arrlong[0] >> 1
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( arrlong[1] != 0x8L ) return false
		
		arrlong[1] = arrlong[0] >> 4
		System.out.printf("arrlong[1]=0x%x\n", arrlong[1])
		if( arrlong[1] != 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		arrlong[0] = 0x01L
		arrlong[1] = ~arrlong[0]
		System.out.printf("arrlong[1]=0x%x(%d)\n", arrlong[1], arrlong[1])
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( arrlong[1] != 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		arrlong[0] = 10L
		arrlong[1] = arrlong[0]++
		if( !( arrlong[0] == 11L && arrlong[1] == 10L ) ) return false
		
		System.out.println("-// unary ++")
		arrlong[0] = 10L
		arrlong[1] = ++arrlong[0]
		if( !( arrlong[0] == 11L && arrlong[1] == 11L ) ) return false

		System.out.println("-// postfix --")
		arrlong[0] = 10L
		arrlong[1] = arrlong[0]--
		if( !( arrlong[0] == 9L && arrlong[1] == 10L ) ) return false
		
		
		System.out.println("-// unary --")
		arrlong[0] = 10L
		arrlong[1] = --arrlong[0]
		if( !( arrlong[0] == 9L && arrlong[1] == 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		arrlong[0] = 10L * -1L
		System.out.println( "arrlong[0]="+arrlong[0])
		if( arrlong[0] != -10L ) return false
		
		
		arrlong[0] = 10L
		arrlong[0] = -arrlong[0]
		System.out.println( "arrlong[0]="+arrlong[0])
		if( arrlong[0] != -10L ) return false
		
		arrlong[0] = -10L
		arrlong[0] = -arrlong[0] 
		System.out.println( "arrlong[0]="+arrlong[0])
		if( arrlong[0] != 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		arrlong[0] = 10L
		System.out.println("arrlong[0] *= 10L; arrlong[0] = " + (arrlong[0] *= 10L) )
		System.out.println( arrlong[0]  )
		if( arrlong[0] != 100L ) return false

		if( ( arrlong[0] *= 10L ) != 1000L ) return false
		if( ( arrlong[0] *= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		arrlong[0] = 10000L
		System.out.println("arrlong[0] /= 10L; arrlong[0] = " + (arrlong[0] /= 10L) )
		System.out.println( arrlong[0]  )
		if( arrlong[0] != 1000L ) return false
		
		if( ( arrlong[0] /= 10L ) != 100L ) return false
		if( ( arrlong[0] /= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		arrlong[0] = 15L
		System.out.println("arrlong[0] %= 9L; arrlong[0] = " + (arrlong[0] %= 9L) )
		System.out.println( arrlong[0]  )
		if( arrlong[0] != 6L ) return false

		if( ( arrlong[0] %= 4L ) != 2L ) return false
		if( ( arrlong[0] %= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		arrlong[0] = 10L
		System.out.println( arrlong[0] += 10L )
		System.out.println( arrlong[0]  )
		if( arrlong[0] != 20L ) return false
		
		if( ( arrlong[0] += 10L ) != 30L ) return false
		if( ( arrlong[0] += -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		arrlong[0] = 30L
		System.out.println( arrlong[0] -= 10L )
		System.out.println( arrlong[0]  )
		if( arrlong[0] != 20L ) return false

		if( ( arrlong[0] -= 10L ) != 10L ) return false
		if( ( arrlong[0] -= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		arrlong[0] = 1L
		System.out.printf("arrlong[0] <<= 1 ; arrlong[0] = 0x%x\n", (arrlong[0] <<= 1) )
		System.out.println( arrlong[0]  )
		if( arrlong[0] != 2L ) return false
		
		System.out.printf("arrlong[0] <<= 4; arrlong[0] = 0x%x\n",  arrlong[0] <<= 4  )
		if( arrlong[0] != 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		arrlong[0] = 0x10L
		System.out.printf("arrlong[0] >>= 1 ; arrlong[0] = 0x%x\n",  (arrlong[0] >>= 1) )
		System.out.println( "0x" + Long.toHexString(arrlong[0])  )
		if( arrlong[0] != 0x08L ) return false
		
			
		System.out.printf("arrlong[0] >>= 3; arrlong[0] = 0x%x\n",  arrlong[0] >>= 3  )
		if( arrlong[0] != 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		arrlong[0] = 0x1L
		System.out.printf("arrlong[0] &= 1L ; arrlong[0] = 0x%x\n", (arrlong[0] &= 1L) )
		System.out.println( "0x" + Long.toHexString(arrlong[0])  )
		if( arrlong[0] != 0x1L ) return false
		
		System.out.printf("arrlong[0] &= 0L; arrlong[0] = 0x%x\n",  arrlong[0] &= 0L  )
		if( arrlong[0] != 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		arrlong[0] = 0x0FL
		System.out.printf("arrlong[0] ^= 0xFFL ; arrlong[0] = 0x%x\n",  (arrlong[0] ^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(arrlong[0])  )
		if( arrlong[0] != 0xF0L ) return false
		
		System.out.printf("arrlong[0] ^= 0x0FL; arrlong[0] = 0x%x\n",  arrlong[0] ^= 0x0FL  )
		if( arrlong[0] != 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		arrlong[0] = 0x0FL
		System.out.printf("arrlong[0] |= 0xF0L ; arrlong[0] = 0x%x\n",  (arrlong[0] |= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(arrlong[0])  )
		if( arrlong[0] != 0xFFL ) return false
		
		System.out.printf("arrlong[0] |= 0xF00L; arrlong[0] = 0x%x\n",  arrlong[0] |= 0xF00L  )
		if( arrlong[0] != 0xFFFL ) return false

		
		return true

	}	
	
	// a[0][0]
	fn long_d2_map_operation_test()->boolean {
		
		System.out.println("#long_d2_map_operation_test");
		
		arrlong2:long[][] = long[100][]
		arrlong2[0] = long[100]
				
		arrlong2[0][0] = 0L
		arrlong2[0][1] = 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		arrlong2[0][0] = 100L * 100L 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 10000L ) return false
		
		arrlong2[0][0] = 100L * 100L + 1L 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 10001L ) return false
		
		arrlong2[0][0] = 100L * (100L + 1L) 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 10100L ) return false
		
		arrlong2[0][0] = 100L * (100L + 10L * 10L) 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 20000L ) return false
		
		// division
		System.out.println("-// division")

		arrlong2[0][0] = 100L / 100L 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 1L ) return false

		arrlong2[0][0] = 100L / 100L + 1L 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 2L ) return false
		
		arrlong2[0][0] = 100L / (99L + 1L) 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 1L ) return false
		
		
		arrlong2[0][0] = 100L / (99L + 10L / 10L ) 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 1L ) return false

		arrlong2[0][0] = 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 20L ) return false

		
		// rest
		System.out.println("-// rest")
		arrlong2[0][0] = 10L % 9L 	
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 1L ) return false
		
		arrlong2[0][0] = 10L % 9L * 100L 	
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 100L ) return false

		arrlong2[0][0] = 10L % 9L + 1L	
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 2L ) return false

		arrlong2[0][0] = (5L + 5L ) % 9L + 1L	
		System.out.println("arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		arrlong2[0][0] = 100L
		if( arrlong2[0][0] <= 100L ) { System.out.println( "arrlong2[0][0](=" + arrlong2[0][0]+") <= 100L" ) }
		else return false
		
		if( arrlong2[0][0] <= 101L ) { System.out.println( "arrlong2[0][0](=" + arrlong2[0][0]+") <= 101L" ) }
		else return false
		
		if( arrlong2[0][0] <= 99L ) return false
		else { System.out.println( "arrlong2[0][0](=" + arrlong2[0][0]+") <= 99L : false" ) }
		
		if( arrlong2[0][0] >= 100L ) { System.out.println( "arrlong2[0][0](=" + arrlong2[0][0]+") >= 100L" ) }
		else return false
		
		if( arrlong2[0][0] >= 99L ) { System.out.println( "arrlong2[0][0](=" + arrlong2[0][0]+") <= 99L" ) }
		else return false

		if( arrlong2[0][0] >= 101L ) return false
		else { System.out.println( "arrlong2[0][0](=" + arrlong2[0][0]+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		arrlong2[0][0] = 0x1FL
		arrlong2[0][1] = arrlong2[0][0] & 0xF0L
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( arrlong2[0][1] != 0x10L ) return false

		//if( arrlong2[0][0] & 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( arrlong2[0][0] & 0xF0L) != 0x10L ) return false
		arrlong2[0][1] = 0xF0L & arrlong2[0][0]
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( arrlong2[0][1] != 0x10L ) return false
		//if( 0xF0L & arrlong2[0][0] != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & arrlong2[0][0] ) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		arrlong2[0][0] = 0x0FL
		arrlong2[0][1] = arrlong2[0][0] ^ 0xFFL
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( arrlong2[0][1] != 0xf0L ) return false
		
		
		if( ( arrlong2[0][0] ^ 0xFFL) != 0xf0L ) return false
		arrlong2[0][1] = 0xFFL ^ arrlong2[0][0]
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( 0xf0L != arrlong2[0][1] ) return false
		if( 0xf0L != ( 0xFFL ^ arrlong2[0][0]) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		arrlong2[0][0] = 0x0FL
		arrlong2[0][1] = arrlong2[0][0] | 0xF0L
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( arrlong2[0][1] != 0xffL ) return false
		
		if( ( arrlong2[0][0] | 0xF0L) != 0xffL ) return false
		arrlong2[0][1] = 0xF0L | arrlong2[0][0]
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( 0xffL != arrlong2[0][1] ) return false
		if( 0xffL != ( 0xF0L | arrlong2[0][0]) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		arrlong2[0][0] = 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( arrlong2[0][0] & 0xFFL ) == 0x0FL && 
			   ( arrlong2[0][0] ^ 0xFFL ) == 0xF0L &&
			   ( arrlong2[0][0] | 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( arrlong2[0][0] & 0xFFL ) != 0x0FL || 
		   ( arrlong2[0][0] ^ 0xFFL ) != 0xF0L ||
		   ( arrlong2[0][0] | 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		arrlong2[0][0] = 0x1L
		
		arrlong2[0][1] = arrlong2[0][0] << 1
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( arrlong2[0][1] != 2L ) return false
	
		arrlong2[0][1] = arrlong2[0][0] << 4
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( arrlong2[0][1] != 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		arrlong2[0][0] = 0x10L
		arrlong2[0][1] = arrlong2[0][0] >> 1
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( arrlong2[0][1] != 0x8L ) return false
		
		arrlong2[0][1] = arrlong2[0][0] >> 4
		System.out.printf("arrlong2[0][1]=0x%x\n", arrlong2[0][1])
		if( arrlong2[0][1] != 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		arrlong2[0][0] = 0x01L
		arrlong2[0][1] = ~arrlong2[0][0]
		System.out.printf("arrlong2[0][1]=0x%x(%d)\n", arrlong2[0][1], arrlong2[0][1])
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( arrlong2[0][1] != 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		arrlong2[0][0] = 10L
		arrlong2[0][1] = arrlong2[0][0]++
		if( !( arrlong2[0][0] == 11L && arrlong2[0][1] == 10L ) ) return false
		
		System.out.println("-// unary ++")
		arrlong2[0][0] = 10L
		arrlong2[0][1] = ++arrlong2[0][0]
		if( !( arrlong2[0][0] == 11L && arrlong2[0][1] == 11L ) ) return false

		System.out.println("-// postfix --")
		arrlong2[0][0] = 10L
		arrlong2[0][1] = arrlong2[0][0]--
		if( !( arrlong2[0][0] == 9L && arrlong2[0][1] == 10L ) ) return false
		
		
		System.out.println("-// unary --")
		arrlong2[0][0] = 10L
		arrlong2[0][1] = --arrlong2[0][0]
		if( !( arrlong2[0][0] == 9L && arrlong2[0][1] == 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		arrlong2[0][0] = 10L * -1L
		System.out.println( "arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != -10L ) return false
		
		
		arrlong2[0][0] = 10L
		arrlong2[0][0] = -arrlong2[0][0]
		System.out.println( "arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != -10L ) return false
		
		arrlong2[0][0] = -10L
		arrlong2[0][0] = -arrlong2[0][0] 
		System.out.println( "arrlong2[0][0]="+arrlong2[0][0])
		if( arrlong2[0][0] != 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		arrlong2[0][0] = 10L
		System.out.println("arrlong2[0][0] *= 10L; arrlong2[0][0] = " + (arrlong2[0][0] *= 10L) )
		System.out.println( arrlong2[0][0]  )
		if( arrlong2[0][0] != 100L ) return false

		if( ( arrlong2[0][0] *= 10L ) != 1000L ) return false
		if( ( arrlong2[0][0] *= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		arrlong2[0][0] = 10000L
		System.out.println("arrlong2[0][0] /= 10L; arrlong2[0][0] = " + (arrlong2[0][0] /= 10L) )
		System.out.println( arrlong2[0][0]  )
		if( arrlong2[0][0] != 1000L ) return false
		
		if( ( arrlong2[0][0] /= 10L ) != 100L ) return false
		if( ( arrlong2[0][0] /= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		arrlong2[0][0] = 15L
		System.out.println("arrlong2[0][0] %= 9L; arrlong2[0][0] = " + (arrlong2[0][0] %= 9L) )
		System.out.println( arrlong2[0][0]  )
		if( arrlong2[0][0] != 6L ) return false

		if( ( arrlong2[0][0] %= 4L ) != 2L ) return false
		if( ( arrlong2[0][0] %= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		arrlong2[0][0] = 10L
		System.out.println( arrlong2[0][0] += 10L )
		System.out.println( arrlong2[0][0]  )
		if( arrlong2[0][0] != 20L ) return false
		
		if( ( arrlong2[0][0] += 10L ) != 30L ) return false
		if( ( arrlong2[0][0] += -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		arrlong2[0][0] = 30L
		System.out.println( arrlong2[0][0] -= 10L )
		System.out.println( arrlong2[0][0]  )
		if( arrlong2[0][0] != 20L ) return false

		if( ( arrlong2[0][0] -= 10L ) != 10L ) return false
		if( ( arrlong2[0][0] -= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		arrlong2[0][0] = 1L
		System.out.printf("arrlong2[0][0] <<= 1 ; arrlong2[0][0] = 0x%x\n", (arrlong2[0][0] <<= 1) )
		System.out.println( arrlong2[0][0]  )
		if( arrlong2[0][0] != 2L ) return false
		
		System.out.printf("arrlong2[0][0] <<= 4; arrlong2[0][0] = 0x%x\n",  arrlong2[0][0] <<= 4  )
		if( arrlong2[0][0] != 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		arrlong2[0][0] = 0x10L
		System.out.printf("arrlong2[0][0] >>= 1 ; arrlong2[0][0] = 0x%x\n",  (arrlong2[0][0] >>= 1) )
		System.out.println( "0x" + Long.toHexString(arrlong2[0][0])  )
		if( arrlong2[0][0] != 0x08L ) return false
		
			
		System.out.printf("arrlong2[0][0] >>= 3; arrlong2[0][0] = 0x%x\n",  arrlong2[0][0] >>= 3  )
		if( arrlong2[0][0] != 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		arrlong2[0][0] = 0x1L
		System.out.printf("arrlong2[0][0] &= 1L ; arrlong2[0][0] = 0x%x\n", (arrlong2[0][0] &= 1L) )
		System.out.println( "0x" + Long.toHexString(arrlong2[0][0])  )
		if( arrlong2[0][0] != 0x1L ) return false
		
		System.out.printf("arrlong2[0][0] &= 0L; arrlong2[0][0] = 0x%x\n",  arrlong2[0][0] &= 0L  )
		if( arrlong2[0][0] != 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		arrlong2[0][0] = 0x0FL
		System.out.printf("arrlong2[0][0] ^= 0xFFL ; arrlong2[0][0] = 0x%x\n",  (arrlong2[0][0] ^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(arrlong2[0][0])  )
		if( arrlong2[0][0] != 0xF0L ) return false
		
		System.out.printf("arrlong2[0][0] ^= 0x0FL; arrlong2[0][0] = 0x%x\n",  arrlong2[0][0] ^= 0x0FL  )
		if( arrlong2[0][0] != 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		arrlong2[0][0] = 0x0FL
		System.out.printf("arrlong2[0][0] |= 0xF0L ; arrlong2[0][0] = 0x%x\n",  (arrlong2[0][0] |= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(arrlong2[0][0])  )
		if( arrlong2[0][0] != 0xFFL ) return false
		
		System.out.printf("arrlong2[0][0] |= 0xF00L; arrlong2[0][0] = 0x%x\n",  arrlong2[0][0] |= 0xF00L  )
		if( arrlong2[0][0] != 0xFFFL ) return false

		
		return true

	}	
	
	// p.a
	fn long_member1_var_operation_test()->boolean {
		
		System.out.println("#long_member1_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.along = 0L
		p.blong = 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.along = 100L * 100L 
		System.out.println("p.along="+p.along)
		if( p.along != 10000L ) return false
		
		p.along = 100L * 100L + 1L 
		System.out.println("p.along="+p.along)
		if( p.along != 10001L ) return false
		
		p.along = 100L * (100L + 1L) 
		System.out.println("p.along="+p.along)
		if( p.along != 10100L ) return false
		
		p.along = 100L * (100L + 10L * 10L) 
		System.out.println("p.along="+p.along)
		if( p.along != 20000L ) return false
		
		// division
		System.out.println("-// division")

		p.along = 100L / 100L 
		System.out.println("p.along="+p.along)
		if( p.along != 1L ) return false

		p.along = 100L / 100L + 1L 
		System.out.println("p.along="+p.along)
		if( p.along != 2L ) return false
		
		p.along = 100L / (99L + 1L) 
		System.out.println("p.along="+p.along)
		if( p.along != 1L ) return false
		
		
		p.along = 100L / (99L + 10L / 10L ) 
		System.out.println("p.along="+p.along)
		if( p.along != 1L ) return false

		p.along = 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("p.along="+p.along)
		if( p.along != 20L ) return false

		
		// rest
		System.out.println("-// rest")
		p.along = 10L % 9L 	
		System.out.println("p.along="+p.along)
		if( p.along != 1L ) return false
		
		p.along = 10L % 9L * 100L 	
		System.out.println("p.along="+p.along)
		if( p.along != 100L ) return false

		p.along = 10L % 9L + 1L	
		System.out.println("p.along="+p.along)
		if( p.along != 2L ) return false

		p.along = (5L + 5L ) % 9L + 1L	
		System.out.println("p.along="+p.along)
		if( p.along != 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.along = 100L
		if( p.along <= 100L ) { System.out.println( "p.along(=" + p.along+") <= 100L" ) }
		else return false
		
		if( p.along <= 101L ) { System.out.println( "p.along(=" + p.along+") <= 101L" ) }
		else return false
		
		if( p.along <= 99L ) return false
		else { System.out.println( "p.along(=" + p.along+") <= 99L : false" ) }
		
		if( p.along >= 100L ) { System.out.println( "p.along(=" + p.along+") >= 100L" ) }
		else return false
		
		if( p.along >= 99L ) { System.out.println( "p.along(=" + p.along+") <= 99L" ) }
		else return false

		if( p.along >= 101L ) return false
		else { System.out.println( "p.along(=" + p.along+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		p.along = 0x1FL
		p.blong = p.along & 0xF0L
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( p.blong != 0x10L ) return false

		//if( p.along & 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( p.along & 0xF0L) != 0x10L ) return false
		p.blong = 0xF0L & p.along
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( p.blong != 0x10L ) return false
		//if( 0xF0L & p.along != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & p.along ) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		p.along = 0x0FL
		p.blong = p.along ^ 0xFFL
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( p.blong != 0xf0L ) return false
		
		
		if( ( p.along ^ 0xFFL) != 0xf0L ) return false
		p.blong = 0xFFL ^ p.along
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( 0xf0L != p.blong ) return false
		if( 0xf0L != ( 0xFFL ^ p.along) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		p.along = 0x0FL
		p.blong = p.along | 0xF0L
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( p.blong != 0xffL ) return false
		
		if( ( p.along | 0xF0L) != 0xffL ) return false
		p.blong = 0xF0L | p.along
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( 0xffL != p.blong ) return false
		if( 0xffL != ( 0xF0L | p.along) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		p.along = 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( p.along & 0xFFL ) == 0x0FL && 
			   ( p.along ^ 0xFFL ) == 0xF0L &&
			   ( p.along | 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( p.along & 0xFFL ) != 0x0FL || 
		   ( p.along ^ 0xFFL ) != 0xF0L ||
		   ( p.along | 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		p.along = 0x1L
		
		p.blong = p.along << 1
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( p.blong != 2L ) return false
	
		p.blong = p.along << 4
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( p.blong != 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		p.along = 0x10L
		p.blong = p.along >> 1
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( p.blong != 0x8L ) return false
		
		p.blong = p.along >> 4
		System.out.printf("p.blong=0x%x\n", p.blong)
		if( p.blong != 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		p.along = 0x01L
		p.blong = ~p.along
		System.out.printf("p.blong=0x%x(%d)\n", p.blong, p.blong)
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( p.blong != 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		p.along = 10L
		p.blong = p.along++
		if( !( p.along == 11L && p.blong == 10L ) ) return false
		
		System.out.println("-// unary ++")
		p.along = 10L
		p.blong = ++p.along
		if( !( p.along == 11L && p.blong == 11L ) ) return false

		System.out.println("-// postfix --")
		p.along = 10L
		p.blong = p.along--
		if( !( p.along == 9L && p.blong == 10L ) ) return false
		
		
		System.out.println("-// unary --")
		System.out.println("p.along="+p.along+" p.blong="+p.blong)
		p.along = 10L
		p.blong = --p.along
		System.out.println("p.along="+p.along+" p.blong="+p.blong)
		
		if( !( p.along == 9L && p.blong == 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		p.along = 10L * -1L
		System.out.println( "p.along="+p.along)
		if( p.along != -10L ) return false
		
		
		p.along = 10L
		p.along = -p.along
		System.out.println( "p.along="+p.along)
		if( p.along != -10L ) return false
		
		p.along = -10L
		p.along = -p.along 
		System.out.println( "p.along="+p.along)
		if( p.along != 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.along = 10L
		System.out.println("p.along *= 10L; p.along = " + (p.along *= 10L) )
		System.out.println( p.along  )
		if( p.along != 100L ) return false

		if( ( p.along *= 10L ) != 1000L ) return false
		if( ( p.along *= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		p.along = 10000L
		System.out.println("p.along /= 10L; p.along = " + (p.along /= 10L) )
		System.out.println( p.along  )
		if( p.along != 1000L ) return false
		
		if( ( p.along /= 10L ) != 100L ) return false
		if( ( p.along /= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.along = 15L
		System.out.println("p.along %= 9L; p.along = " + (p.along %= 9L) )
		System.out.println( p.along  )
		if( p.along != 6L ) return false

		if( ( p.along %= 4L ) != 2L ) return false
		if( ( p.along %= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.along = 10L
		System.out.println( p.along += 10L )
		System.out.println( p.along  )
		if( p.along != 20L ) return false
		
		if( ( p.along += 10L ) != 30L ) return false
		if( ( p.along += -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.along = 30L
		System.out.println( p.along -= 10L )
		System.out.println( p.along  )
		if( p.along != 20L ) return false

		if( ( p.along -= 10L ) != 10L ) return false
		if( ( p.along -= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		p.along = 1L
		System.out.printf("p.along <<= 1 ; p.along = 0x%x\n", (p.along <<= 1) )
		System.out.println( p.along  )
		if( p.along != 2L ) return false
		
		System.out.printf("p.along <<= 4; p.along = 0x%x\n",  p.along <<= 4  )
		if( p.along != 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		p.along = 0x10L
		System.out.printf("p.along >>= 1 ; p.along = 0x%x\n",  (p.along >>= 1) )
		System.out.println( "0x" + Long.toHexString(p.along)  )
		if( p.along != 0x08L ) return false
		
			
		System.out.printf("p.along >>= 3; p.along = 0x%x\n",  p.along >>= 3  )
		if( p.along != 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		p.along = 0x1L
		System.out.printf("p.along &= 1L ; p.along = 0x%x\n", (p.along &= 1L) )
		System.out.println( "0x" + Long.toHexString(p.along)  )
		if( p.along != 0x1L ) return false
		
		System.out.printf("p.along &= 0L; p.along = 0x%x\n",  p.along &= 0L  )
		if( p.along != 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		p.along = 0x0FL
		System.out.printf("p.along ^= 0xFFL ; p.along = 0x%x\n",  (p.along ^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(p.along)  )
		if( p.along != 0xF0L ) return false
		
		System.out.printf("p.along ^= 0x0FL; p.along = 0x%x\n",  p.along ^= 0x0FL  )
		if( p.along != 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		p.along = 0x0FL
		System.out.printf("p.along |= 0xF0L ; p.along = 0x%x\n",  (p.along |= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(p.along)  )
		if( p.along != 0xFFL ) return false
		
		System.out.printf("p.along |= 0xF00L; p.along = 0x%x\n",  p.along |= 0xF00L  )
		if( p.along != 0xFFFL ) return false

		
		return true

	}

	// o.p.a
	fn long_member2_var_operation_test()->boolean {
		
		System.out.println("#long_member2_var_operation_test");
		
		o:TestSuperParentOwner = TestSuperParentOwner()
		
		o.p.along = 0L
		o.p.blong = 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		o.p.along = 100L * 100L 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 10000L ) return false
		
		o.p.along = 100L * 100L + 1L 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 10001L ) return false
		
		o.p.along = 100L * (100L + 1L) 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 10100L ) return false
		
		o.p.along = 100L * (100L + 10L * 10L) 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 20000L ) return false
		
		// division
		System.out.println("-// division")

		o.p.along = 100L / 100L 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 1L ) return false

		o.p.along = 100L / 100L + 1L 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 2L ) return false
		
		o.p.along = 100L / (99L + 1L) 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 1L ) return false
		
		
		o.p.along = 100L / (99L + 10L / 10L ) 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 1L ) return false

		o.p.along = 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 20L ) return false

		
		// rest
		System.out.println("-// rest")
		o.p.along = 10L % 9L 	
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 1L ) return false
		
		o.p.along = 10L % 9L * 100L 	
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 100L ) return false

		o.p.along = 10L % 9L + 1L	
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 2L ) return false

		o.p.along = (5L + 5L ) % 9L + 1L	
		System.out.println("o.p.along="+o.p.along)
		if( o.p.along != 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		o.p.along = 100L
		if( o.p.along <= 100L ) { System.out.println( "o.p.along(=" + o.p.along+") <= 100L" ) }
		else return false
		
		if( o.p.along <= 101L ) { System.out.println( "o.p.along(=" + o.p.along+") <= 101L" ) }
		else return false
		
		if( o.p.along <= 99L ) return false
		else { System.out.println( "o.p.along(=" + o.p.along+") <= 99L : false" ) }
		
		if( o.p.along >= 100L ) { System.out.println( "o.p.along(=" + o.p.along+") >= 100L" ) }
		else return false
		
		if( o.p.along >= 99L ) { System.out.println( "o.p.along(=" + o.p.along+") <= 99L" ) }
		else return false

		if( o.p.along >= 101L ) return false
		else { System.out.println( "o.p.along(=" + o.p.along+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		o.p.along = 0x1FL
		o.p.blong = o.p.along & 0xF0L
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( o.p.blong != 0x10L ) return false

		//if( o.p.along & 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( o.p.along & 0xF0L) != 0x10L ) return false
		o.p.blong = 0xF0L & o.p.along
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( o.p.blong != 0x10L ) return false
		//if( 0xF0L & o.p.along != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & o.p.along ) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		o.p.along = 0x0FL
		o.p.blong = o.p.along ^ 0xFFL
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( o.p.blong != 0xf0L ) return false
		
		
		if( ( o.p.along ^ 0xFFL) != 0xf0L ) return false
		o.p.blong = 0xFFL ^ o.p.along
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( 0xf0L != o.p.blong ) return false
		if( 0xf0L != ( 0xFFL ^ o.p.along) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		o.p.along = 0x0FL
		o.p.blong = o.p.along | 0xF0L
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( o.p.blong != 0xffL ) return false
		
		if( ( o.p.along | 0xF0L) != 0xffL ) return false
		o.p.blong = 0xF0L | o.p.along
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( 0xffL != o.p.blong ) return false
		if( 0xffL != ( 0xF0L | o.p.along) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		o.p.along = 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( o.p.along & 0xFFL ) == 0x0FL && 
			   ( o.p.along ^ 0xFFL ) == 0xF0L &&
			   ( o.p.along | 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( o.p.along & 0xFFL ) != 0x0FL || 
		   ( o.p.along ^ 0xFFL ) != 0xF0L ||
		   ( o.p.along | 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		o.p.along = 0x1L
		
		o.p.blong = o.p.along << 1
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( o.p.blong != 2L ) return false
	
		o.p.blong = o.p.along << 4
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( o.p.blong != 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		o.p.along = 0x10L
		o.p.blong = o.p.along >> 1
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( o.p.blong != 0x8L ) return false
		
		o.p.blong = o.p.along >> 4
		System.out.printf("o.p.blong=0x%x\n", o.p.blong)
		if( o.p.blong != 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		o.p.along = 0x01L
		o.p.blong = ~o.p.along
		System.out.printf("o.p.blong=0x%x(%d)\n", o.p.blong, o.p.blong)
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( o.p.blong != 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		o.p.along = 10L
		o.p.blong = o.p.along++
		if( !( o.p.along == 11L && o.p.blong == 10L ) ) return false
		
		System.out.println("-// unary ++")
		o.p.along = 10L
		o.p.blong = ++o.p.along
		if( !( o.p.along == 11L && o.p.blong == 11L ) ) return false

		System.out.println("-// postfix --")
		o.p.along = 10L
		o.p.blong = o.p.along--
		if( !( o.p.along == 9L && o.p.blong == 10L ) ) return false
		
		
		System.out.println("-// unary --")
		System.out.println("o.p.along="+o.p.along+" o.p.blong="+o.p.blong)
		o.p.along = 10L
		o.p.blong = --o.p.along
		System.out.println("o.p.along="+o.p.along+" o.p.blong="+o.p.blong)
		
		if( !( o.p.along == 9L && o.p.blong == 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		o.p.along = 10L * -1L
		System.out.println( "o.p.along="+o.p.along)
		if( o.p.along != -10L ) return false
		
		
		o.p.along = 10L
		o.p.along = -o.p.along
		System.out.println( "o.p.along="+o.p.along)
		if( o.p.along != -10L ) return false
		
		o.p.along = -10L
		o.p.along = -o.p.along 
		System.out.println( "o.p.along="+o.p.along)
		if( o.p.along != 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		o.p.along = 10L
		System.out.println("o.p.along *= 10L; o.p.along = " + (o.p.along *= 10L) )
		System.out.println( o.p.along  )
		if( o.p.along != 100L ) return false

		if( ( o.p.along *= 10L ) != 1000L ) return false
		if( ( o.p.along *= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		o.p.along = 10000L
		System.out.println("o.p.along /= 10L; o.p.along = " + (o.p.along /= 10L) )
		System.out.println( o.p.along  )
		if( o.p.along != 1000L ) return false
		
		if( ( o.p.along /= 10L ) != 100L ) return false
		if( ( o.p.along /= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		o.p.along = 15L
		System.out.println("o.p.along %= 9L; o.p.along = " + (o.p.along %= 9L) )
		System.out.println( o.p.along  )
		if( o.p.along != 6L ) return false

		if( ( o.p.along %= 4L ) != 2L ) return false
		if( ( o.p.along %= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		o.p.along = 10L
		System.out.println( o.p.along += 10L )
		System.out.println( o.p.along  )
		if( o.p.along != 20L ) return false
		
		if( ( o.p.along += 10L ) != 30L ) return false
		if( ( o.p.along += -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		o.p.along = 30L
		System.out.println( o.p.along -= 10L )
		System.out.println( o.p.along  )
		if( o.p.along != 20L ) return false

		if( ( o.p.along -= 10L ) != 10L ) return false
		if( ( o.p.along -= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		o.p.along = 1L
		System.out.printf("o.p.along <<= 1 ; o.p.along = 0x%x\n", (o.p.along <<= 1) )
		System.out.println( o.p.along  )
		if( o.p.along != 2L ) return false
		
		System.out.printf("o.p.along <<= 4; o.p.along = 0x%x\n",  o.p.along <<= 4  )
		if( o.p.along != 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		o.p.along = 0x10L
		System.out.printf("o.p.along >>= 1 ; o.p.along = 0x%x\n",  (o.p.along >>= 1) )
		System.out.println( "0x" + Long.toHexString(o.p.along)  )
		if( o.p.along != 0x08L ) return false
		
			
		System.out.printf("o.p.along >>= 3; o.p.along = 0x%x\n",  o.p.along >>= 3  )
		if( o.p.along != 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		o.p.along = 0x1L
		System.out.printf("o.p.along &= 1L ; o.p.along = 0x%x\n", (o.p.along &= 1L) )
		System.out.println( "0x" + Long.toHexString(o.p.along)  )
		if( o.p.along != 0x1L ) return false
		
		System.out.printf("o.p.along &= 0L; o.p.along = 0x%x\n",  o.p.along &= 0L  )
		if( o.p.along != 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		o.p.along = 0x0FL
		System.out.printf("o.p.along ^= 0xFFL ; o.p.along = 0x%x\n",  (o.p.along ^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(o.p.along)  )
		if( o.p.along != 0xF0L ) return false
		
		System.out.printf("o.p.along ^= 0x0FL; o.p.along = 0x%x\n",  o.p.along ^= 0x0FL  )
		if( o.p.along != 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		o.p.along = 0x0FL
		System.out.printf("o.p.along |= 0xF0L ; o.p.along = 0x%x\n",  (o.p.along |= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(o.p.along)  )
		if( o.p.along != 0xFFL ) return false
		
		System.out.printf("o.p.along |= 0xF00L; o.p.along = 0x%x\n",  o.p.along |= 0xF00L  )
		if( o.p.along != 0xFFFL ) return false

		
		return true

	}
	
	// p.a[0]
	fn long_member1_d1_map_var_operation_test()->boolean {
		
		System.out.println("#long_member2_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.arrlong_1[0]= 0L
		p.arrlong_1[1]= 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.arrlong_1[0]= 100L * 100L 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 10000L ) return false
		
		p.arrlong_1[0]= 100L * 100L + 1L 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 10001L ) return false
		
		p.arrlong_1[0]= 100L * (100L + 1L) 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 10100L ) return false
		
		p.arrlong_1[0]= 100L * (100L + 10L * 10L) 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 20000L ) return false
		
		// division
		System.out.println("-// division")

		p.arrlong_1[0]= 100L / 100L 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 1L ) return false

		p.arrlong_1[0]= 100L / 100L + 1L 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 2L ) return false
		
		p.arrlong_1[0]= 100L / (99L + 1L) 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 1L ) return false
		
		
		p.arrlong_1[0]= 100L / (99L + 10L / 10L ) 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 1L ) return false

		p.arrlong_1[0]= 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 20L ) return false

		
		// rest
		System.out.println("-// rest")
		p.arrlong_1[0]= 10L % 9L 	
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 1L ) return false
		
		p.arrlong_1[0]= 10L % 9L * 100L 	
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 100L ) return false

		p.arrlong_1[0]= 10L % 9L + 1L	
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 2L ) return false

		p.arrlong_1[0]= (5L + 5L ) % 9L + 1L	
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.arrlong_1[0]= 100L
		if( p.arrlong_1[0]<= 100L ) { System.out.println( "p.arrlong_1[0](=" + p.arrlong_1[0]+") <= 100L" ) }
		else return false
		
		if( p.arrlong_1[0]<= 101L ) { System.out.println( "p.arrlong_1[0](=" + p.arrlong_1[0]+") <= 101L" ) }
		else return false
		
		if( p.arrlong_1[0]<= 99L ) return false
		else { System.out.println( "p.arrlong_1[0](=" + p.arrlong_1[0]+") <= 99L : false" ) }
		
		if( p.arrlong_1[0]>= 100L ) { System.out.println( "p.arrlong_1[0](=" + p.arrlong_1[0]+") >= 100L" ) }
		else return false
		
		if( p.arrlong_1[0]>= 99L ) { System.out.println( "p.arrlong_1[0](=" + p.arrlong_1[0]+") <= 99L" ) }
		else return false

		if( p.arrlong_1[0]>= 101L ) return false
		else { System.out.println( "p.arrlong_1[0](=" + p.arrlong_1[0]+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		p.arrlong_1[0]= 0x1FL
		p.arrlong_1[1]= p.arrlong_1[0]& 0xF0L
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( p.arrlong_1[1]!= 0x10L ) return false

		//if( p.arrlong_1[0]& 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( p.arrlong_1[0]& 0xF0L) != 0x10L ) return false
		p.arrlong_1[1]= 0xF0L & p.arrlong_1[0]
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( p.arrlong_1[1]!= 0x10L ) return false
		//if( 0xF0L & p.arrlong_1[0]!= 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & p.arrlong_1[0]) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		p.arrlong_1[0]= 0x0FL
		p.arrlong_1[1]= p.arrlong_1[0]^ 0xFFL
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( p.arrlong_1[1]!= 0xf0L ) return false
		
		
		if( ( p.arrlong_1[0]^ 0xFFL) != 0xf0L ) return false
		p.arrlong_1[1]= 0xFFL ^ p.arrlong_1[0]
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( 0xf0L != p.arrlong_1[1]) return false
		if( 0xf0L != ( 0xFFL ^ p.arrlong_1[0]) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		p.arrlong_1[0]= 0x0FL
		p.arrlong_1[1]= p.arrlong_1[0]| 0xF0L
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( p.arrlong_1[1]!= 0xffL ) return false
		
		if( ( p.arrlong_1[0]| 0xF0L) != 0xffL ) return false
		p.arrlong_1[1]= 0xF0L | p.arrlong_1[0]
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( 0xffL != p.arrlong_1[1]) return false
		if( 0xffL != ( 0xF0L | p.arrlong_1[0]) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		p.arrlong_1[0]= 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( p.arrlong_1[0]& 0xFFL ) == 0x0FL && 
			   ( p.arrlong_1[0]^ 0xFFL ) == 0xF0L &&
			   ( p.arrlong_1[0]| 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( p.arrlong_1[0]& 0xFFL ) != 0x0FL || 
		   ( p.arrlong_1[0]^ 0xFFL ) != 0xF0L ||
		   ( p.arrlong_1[0]| 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		p.arrlong_1[0]= 0x1L
		
		p.arrlong_1[1]= p.arrlong_1[0]<< 1
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( p.arrlong_1[1]!= 2L ) return false
	
		p.arrlong_1[1]= p.arrlong_1[0]<< 4
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( p.arrlong_1[1]!= 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		p.arrlong_1[0]= 0x10L
		p.arrlong_1[1]= p.arrlong_1[0]>> 1
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( p.arrlong_1[1]!= 0x8L ) return false
		
		p.arrlong_1[1]= p.arrlong_1[0]>> 4
		System.out.printf("p.arrlong_1[1]=0x%x\n", p.arrlong_1[1])
		if( p.arrlong_1[1]!= 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		p.arrlong_1[0]= 0x01L
		p.arrlong_1[1]= ~p.arrlong_1[0]
		System.out.printf("p.arrlong_1[1]=0x%x(%d)\n", p.arrlong_1[1], p.arrlong_1[1])
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( p.arrlong_1[1]!= 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		p.arrlong_1[0]= 10L
		p.arrlong_1[1]= p.arrlong_1[0]++
		if( !( p.arrlong_1[0]== 11L && p.arrlong_1[1]== 10L ) ) return false
		
		System.out.println("-// unary ++")
		p.arrlong_1[0]= 10L
		p.arrlong_1[1]= ++p.arrlong_1[0]
		if( !( p.arrlong_1[0]== 11L && p.arrlong_1[1]== 11L ) ) return false

		System.out.println("-// postfix --")
		p.arrlong_1[0]= 10L
		p.arrlong_1[1]= p.arrlong_1[0]--
		if( !( p.arrlong_1[0]== 9L && p.arrlong_1[1]== 10L ) ) return false
		
		
		System.out.println("-// unary --")
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0]+" p.arrlong_1[1]="+p.arrlong_1[1])
		p.arrlong_1[0]= 10L
		p.arrlong_1[1]= --p.arrlong_1[0]
		System.out.println("p.arrlong_1[0]="+p.arrlong_1[0]+" p.arrlong_1[1]="+p.arrlong_1[1])
		
		if( !( p.arrlong_1[0]== 9L && p.arrlong_1[1]== 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		p.arrlong_1[0]= 10L * -1L
		System.out.println( "p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= -10L ) return false
		
		
		p.arrlong_1[0]= 10L
		p.arrlong_1[0]= -p.arrlong_1[0]
		System.out.println( "p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= -10L ) return false
		
		p.arrlong_1[0]= -10L
		p.arrlong_1[0]= -p.arrlong_1[0]
		System.out.println( "p.arrlong_1[0]="+p.arrlong_1[0])
		if( p.arrlong_1[0]!= 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.arrlong_1[0]= 10L
		System.out.println("p.arrlong_1[0]*= 10L; p.arrlong_1[0]= " + (p.arrlong_1[0]*= 10L) )
		System.out.println( p.arrlong_1[0] )
		if( p.arrlong_1[0]!= 100L ) return false

		if( ( p.arrlong_1[0]*= 10L ) != 1000L ) return false
		if( ( p.arrlong_1[0]*= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		p.arrlong_1[0]= 10000L
		System.out.println("p.arrlong_1[0]/= 10L; p.arrlong_1[0]= " + (p.arrlong_1[0]/= 10L) )
		System.out.println( p.arrlong_1[0] )
		if( p.arrlong_1[0]!= 1000L ) return false
		
		if( ( p.arrlong_1[0]/= 10L ) != 100L ) return false
		if( ( p.arrlong_1[0]/= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.arrlong_1[0]= 15L
		System.out.println("p.arrlong_1[0]%= 9L; p.arrlong_1[0]= " + (p.arrlong_1[0]%= 9L) )
		System.out.println( p.arrlong_1[0] )
		if( p.arrlong_1[0]!= 6L ) return false

		if( ( p.arrlong_1[0]%= 4L ) != 2L ) return false
		if( ( p.arrlong_1[0]%= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.arrlong_1[0]= 10L
		System.out.println( p.arrlong_1[0]+= 10L )
		System.out.println( p.arrlong_1[0] )
		if( p.arrlong_1[0]!= 20L ) return false
		
		if( ( p.arrlong_1[0]+= 10L ) != 30L ) return false
		if( ( p.arrlong_1[0]+= -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.arrlong_1[0]= 30L
		System.out.println( p.arrlong_1[0]-= 10L )
		System.out.println( p.arrlong_1[0] )
		if( p.arrlong_1[0]!= 20L ) return false

		if( ( p.arrlong_1[0]-= 10L ) != 10L ) return false
		if( ( p.arrlong_1[0]-= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		p.arrlong_1[0]= 1L
		System.out.printf("p.arrlong_1[0]<<= 1 ; p.arrlong_1[0]= 0x%x\n", (p.arrlong_1[0]<<= 1) )
		System.out.println( p.arrlong_1[0] )
		if( p.arrlong_1[0]!= 2L ) return false
		
		System.out.printf("p.arrlong_1[0]<<= 4; p.arrlong_1[0]= 0x%x\n",  p.arrlong_1[0]<<= 4  )
		if( p.arrlong_1[0]!= 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		p.arrlong_1[0]= 0x10L
		System.out.printf("p.arrlong_1[0]>>= 1 ; p.arrlong_1[0]= 0x%x\n",  (p.arrlong_1[0]>>= 1) )
		System.out.println( "0x" + Long.toHexString(p.arrlong_1[0])  )
		if( p.arrlong_1[0]!= 0x08L ) return false
		
			
		System.out.printf("p.arrlong_1[0]>>= 3; p.arrlong_1[0]= 0x%x\n",  p.arrlong_1[0]>>= 3  )
		if( p.arrlong_1[0]!= 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		p.arrlong_1[0]= 0x1L
		System.out.printf("p.arrlong_1[0]&= 1L ; p.arrlong_1[0]= 0x%x\n", (p.arrlong_1[0]&= 1L) )
		System.out.println( "0x" + Long.toHexString(p.arrlong_1[0])  )
		if( p.arrlong_1[0]!= 0x1L ) return false
		
		System.out.printf("p.arrlong_1[0]&= 0L; p.arrlong_1[0]= 0x%x\n",  p.arrlong_1[0]&= 0L  )
		if( p.arrlong_1[0]!= 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		p.arrlong_1[0]= 0x0FL
		System.out.printf("p.arrlong_1[0]^= 0xFFL ; p.arrlong_1[0]= 0x%x\n",  (p.arrlong_1[0]^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(p.arrlong_1[0])  )
		if( p.arrlong_1[0]!= 0xF0L ) return false
		
		System.out.printf("p.arrlong_1[0]^= 0x0FL; p.arrlong_1[0]= 0x%x\n",  p.arrlong_1[0]^= 0x0FL  )
		if( p.arrlong_1[0]!= 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		p.arrlong_1[0]= 0x0FL
		System.out.printf("p.arrlong_1[0]|= 0xF0L ; p.arrlong_1[0]= 0x%x\n",  (p.arrlong_1[0]|= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(p.arrlong_1[0])  )
		if( p.arrlong_1[0]!= 0xFFL ) return false
		
		System.out.printf("p.arrlong_1[0]|= 0xF00L; p.arrlong_1[0]= 0x%x\n",  p.arrlong_1[0]|= 0xF00L  )
		if( p.arrlong_1[0]!= 0xFFFL ) return false

		
		return true

	}
		
	// p.singleton_a[0]
	fn long_member_d1_singoletone_map_var_operation_test()->boolean {
		
		System.out.println("#long_member_d1_singoletone_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.static_arrlong_1[0]= 0L
		p.static_arrlong_1[1]= 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.static_arrlong_1[0]= 100L * 100L 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 10000L ) return false
		
		p.static_arrlong_1[0]= 100L * 100L + 1L 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 10001L ) return false
		
		p.static_arrlong_1[0]= 100L * (100L + 1L) 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 10100L ) return false
		
		p.static_arrlong_1[0]= 100L * (100L + 10L * 10L) 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 20000L ) return false
		
		// division
		System.out.println("-// division")

		p.static_arrlong_1[0]= 100L / 100L 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 1L ) return false

		p.static_arrlong_1[0]= 100L / 100L + 1L 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 2L ) return false
		
		p.static_arrlong_1[0]= 100L / (99L + 1L) 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 1L ) return false
		
		
		p.static_arrlong_1[0]= 100L / (99L + 10L / 10L ) 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 1L ) return false

		p.static_arrlong_1[0]= 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 20L ) return false

		
		// rest
		System.out.println("-// rest")
		p.static_arrlong_1[0]= 10L % 9L 	
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 1L ) return false
		
		p.static_arrlong_1[0]= 10L % 9L * 100L 	
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 100L ) return false

		p.static_arrlong_1[0]= 10L % 9L + 1L	
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 2L ) return false

		p.static_arrlong_1[0]= (5L + 5L ) % 9L + 1L	
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.static_arrlong_1[0]= 100L
		if( p.static_arrlong_1[0]<= 100L ) { System.out.println( "p.static_arrlong_1[0](=" + p.static_arrlong_1[0]+") <= 100L" ) }
		else return false
		
		if( p.static_arrlong_1[0]<= 101L ) { System.out.println( "p.static_arrlong_1[0](=" + p.static_arrlong_1[0]+") <= 101L" ) }
		else return false
		
		if( p.static_arrlong_1[0]<= 99L ) return false
		else { System.out.println( "p.static_arrlong_1[0](=" + p.static_arrlong_1[0]+") <= 99L : false" ) }
		
		if( p.static_arrlong_1[0]>= 100L ) { System.out.println( "p.static_arrlong_1[0](=" + p.static_arrlong_1[0]+") >= 100L" ) }
		else return false
		
		if( p.static_arrlong_1[0]>= 99L ) { System.out.println( "p.static_arrlong_1[0](=" + p.static_arrlong_1[0]+") <= 99L" ) }
		else return false

		if( p.static_arrlong_1[0]>= 101L ) return false
		else { System.out.println( "p.static_arrlong_1[0](=" + p.static_arrlong_1[0]+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		p.static_arrlong_1[0]= 0x1FL
		p.static_arrlong_1[1]= p.static_arrlong_1[0]& 0xF0L
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( p.static_arrlong_1[1]!= 0x10L ) return false

		//if( p.static_arrlong_1[0]& 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( p.static_arrlong_1[0]& 0xF0L) != 0x10L ) return false
		p.static_arrlong_1[1]= 0xF0L & p.static_arrlong_1[0]
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( p.static_arrlong_1[1]!= 0x10L ) return false
		//if( 0xF0L & p.static_arrlong_1[0]!= 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & p.static_arrlong_1[0]) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		p.static_arrlong_1[0]= 0x0FL
		p.static_arrlong_1[1]= p.static_arrlong_1[0]^ 0xFFL
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( p.static_arrlong_1[1]!= 0xf0L ) return false
		
		
		if( ( p.static_arrlong_1[0]^ 0xFFL) != 0xf0L ) return false
		p.static_arrlong_1[1]= 0xFFL ^ p.static_arrlong_1[0]
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( 0xf0L != p.static_arrlong_1[1]) return false
		if( 0xf0L != ( 0xFFL ^ p.static_arrlong_1[0]) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		p.static_arrlong_1[0]= 0x0FL
		p.static_arrlong_1[1]= p.static_arrlong_1[0]| 0xF0L
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( p.static_arrlong_1[1]!= 0xffL ) return false
		
		if( ( p.static_arrlong_1[0]| 0xF0L) != 0xffL ) return false
		p.static_arrlong_1[1]= 0xF0L | p.static_arrlong_1[0]
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( 0xffL != p.static_arrlong_1[1]) return false
		if( 0xffL != ( 0xF0L | p.static_arrlong_1[0]) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		p.static_arrlong_1[0]= 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( p.static_arrlong_1[0]& 0xFFL ) == 0x0FL && 
			   ( p.static_arrlong_1[0]^ 0xFFL ) == 0xF0L &&
			   ( p.static_arrlong_1[0]| 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( p.static_arrlong_1[0]& 0xFFL ) != 0x0FL || 
		   ( p.static_arrlong_1[0]^ 0xFFL ) != 0xF0L ||
		   ( p.static_arrlong_1[0]| 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		p.static_arrlong_1[0]= 0x1L
		
		p.static_arrlong_1[1]= p.static_arrlong_1[0]<< 1
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( p.static_arrlong_1[1]!= 2L ) return false
	
		p.static_arrlong_1[1]= p.static_arrlong_1[0]<< 4
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( p.static_arrlong_1[1]!= 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		p.static_arrlong_1[0]= 0x10L
		p.static_arrlong_1[1]= p.static_arrlong_1[0]>> 1
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( p.static_arrlong_1[1]!= 0x8L ) return false
		
		p.static_arrlong_1[1]= p.static_arrlong_1[0]>> 4
		System.out.printf("p.static_arrlong_1[1]=0x%x\n", p.static_arrlong_1[1])
		if( p.static_arrlong_1[1]!= 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		p.static_arrlong_1[0]= 0x01L
		p.static_arrlong_1[1]= ~p.static_arrlong_1[0]
		System.out.printf("p.static_arrlong_1[1]=0x%x(%d)\n", p.static_arrlong_1[1], p.static_arrlong_1[1])
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( p.static_arrlong_1[1]!= 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		p.static_arrlong_1[0]= 10L
		p.static_arrlong_1[1]= p.static_arrlong_1[0]++
		if( !( p.static_arrlong_1[0]== 11L && p.static_arrlong_1[1]== 10L ) ) return false
		
		System.out.println("-// unary ++")
		p.static_arrlong_1[0]= 10L
		p.static_arrlong_1[1]= ++p.static_arrlong_1[0]
		if( !( p.static_arrlong_1[0]== 11L && p.static_arrlong_1[1]== 11L ) ) return false

		System.out.println("-// postfix --")
		p.static_arrlong_1[0]= 10L
		p.static_arrlong_1[1]= p.static_arrlong_1[0]--
		if( !( p.static_arrlong_1[0]== 9L && p.static_arrlong_1[1]== 10L ) ) return false
		
		
		System.out.println("-// unary --")
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0]+" p.static_arrlong_1[1]="+p.static_arrlong_1[1])
		p.static_arrlong_1[0]= 10L
		p.static_arrlong_1[1]= --p.static_arrlong_1[0]
		System.out.println("p.static_arrlong_1[0]="+p.static_arrlong_1[0]+" p.static_arrlong_1[1]="+p.static_arrlong_1[1])
		
		if( !( p.static_arrlong_1[0]== 9L && p.static_arrlong_1[1]== 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		p.static_arrlong_1[0]= 10L * -1L
		System.out.println( "p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= -10L ) return false
		
		
		p.static_arrlong_1[0]= 10L
		p.static_arrlong_1[0]= -p.static_arrlong_1[0]
		System.out.println( "p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= -10L ) return false
		
		p.static_arrlong_1[0]= -10L
		p.static_arrlong_1[0]= -p.static_arrlong_1[0]
		System.out.println( "p.static_arrlong_1[0]="+p.static_arrlong_1[0])
		if( p.static_arrlong_1[0]!= 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.static_arrlong_1[0]= 10L
		System.out.println("p.static_arrlong_1[0]*= 10L; p.static_arrlong_1[0]= " + (p.static_arrlong_1[0]*= 10L) )
		System.out.println( p.static_arrlong_1[0] )
		if( p.static_arrlong_1[0]!= 100L ) return false

		if( ( p.static_arrlong_1[0]*= 10L ) != 1000L ) return false
		if( ( p.static_arrlong_1[0]*= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		p.static_arrlong_1[0]= 10000L
		System.out.println("p.static_arrlong_1[0]/= 10L; p.static_arrlong_1[0]= " + (p.static_arrlong_1[0]/= 10L) )
		System.out.println( p.static_arrlong_1[0] )
		if( p.static_arrlong_1[0]!= 1000L ) return false
		
		if( ( p.static_arrlong_1[0]/= 10L ) != 100L ) return false
		if( ( p.static_arrlong_1[0]/= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.static_arrlong_1[0]= 15L
		System.out.println("p.static_arrlong_1[0]%= 9L; p.static_arrlong_1[0]= " + (p.static_arrlong_1[0]%= 9L) )
		System.out.println( p.static_arrlong_1[0] )
		if( p.static_arrlong_1[0]!= 6L ) return false

		if( ( p.static_arrlong_1[0]%= 4L ) != 2L ) return false
		if( ( p.static_arrlong_1[0]%= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.static_arrlong_1[0]= 10L
		System.out.println( p.static_arrlong_1[0]+= 10L )
		System.out.println( p.static_arrlong_1[0] )
		if( p.static_arrlong_1[0]!= 20L ) return false
		
		if( ( p.static_arrlong_1[0]+= 10L ) != 30L ) return false
		if( ( p.static_arrlong_1[0]+= -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.static_arrlong_1[0]= 30L
		System.out.println( p.static_arrlong_1[0]-= 10L )
		System.out.println( p.static_arrlong_1[0] )
		if( p.static_arrlong_1[0]!= 20L ) return false

		if( ( p.static_arrlong_1[0]-= 10L ) != 10L ) return false
		if( ( p.static_arrlong_1[0]-= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		p.static_arrlong_1[0]= 1L
		System.out.printf("p.static_arrlong_1[0]<<= 1 ; p.static_arrlong_1[0]= 0x%x\n", (p.static_arrlong_1[0]<<= 1) )
		System.out.println( p.static_arrlong_1[0] )
		if( p.static_arrlong_1[0]!= 2L ) return false
		
		System.out.printf("p.static_arrlong_1[0]<<= 4; p.static_arrlong_1[0]= 0x%x\n",  p.static_arrlong_1[0]<<= 4  )
		if( p.static_arrlong_1[0]!= 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		p.static_arrlong_1[0]= 0x10L
		System.out.printf("p.static_arrlong_1[0]>>= 1 ; p.static_arrlong_1[0]= 0x%x\n",  (p.static_arrlong_1[0]>>= 1) )
		System.out.println( "0x" + Long.toHexString(p.static_arrlong_1[0])  )
		if( p.static_arrlong_1[0]!= 0x08L ) return false
		
			
		System.out.printf("p.static_arrlong_1[0]>>= 3; p.static_arrlong_1[0]= 0x%x\n",  p.static_arrlong_1[0]>>= 3  )
		if( p.static_arrlong_1[0]!= 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		p.static_arrlong_1[0]= 0x1L
		System.out.printf("p.static_arrlong_1[0]&= 1L ; p.static_arrlong_1[0]= 0x%x\n", (p.static_arrlong_1[0]&= 1L) )
		System.out.println( "0x" + Long.toHexString(p.static_arrlong_1[0])  )
		if( p.static_arrlong_1[0]!= 0x1L ) return false
		
		System.out.printf("p.static_arrlong_1[0]&= 0L; p.static_arrlong_1[0]= 0x%x\n",  p.static_arrlong_1[0]&= 0L  )
		if( p.static_arrlong_1[0]!= 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		p.static_arrlong_1[0]= 0x0FL
		System.out.printf("p.static_arrlong_1[0]^= 0xFFL ; p.static_arrlong_1[0]= 0x%x\n",  (p.static_arrlong_1[0]^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(p.static_arrlong_1[0])  )
		if( p.static_arrlong_1[0]!= 0xF0L ) return false
		
		System.out.printf("p.static_arrlong_1[0]^= 0x0FL; p.static_arrlong_1[0]= 0x%x\n",  p.static_arrlong_1[0]^= 0x0FL  )
		if( p.static_arrlong_1[0]!= 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		p.static_arrlong_1[0]= 0x0FL
		System.out.printf("p.static_arrlong_1[0]|= 0xF0L ; p.static_arrlong_1[0]= 0x%x\n",  (p.static_arrlong_1[0]|= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(p.static_arrlong_1[0])  )
		if( p.static_arrlong_1[0]!= 0xFFL ) return false
		
		System.out.printf("p.static_arrlong_1[0]|= 0xF00L; p.static_arrlong_1[0]= 0x%x\n",  p.static_arrlong_1[0]|= 0xF00L  )
		if( p.static_arrlong_1[0]!= 0xFFFL ) return false

		
		return true

	}
		
	//p[0].a
	fn long_member1_var_in_object_map_operation_test()->boolean {
		
		System.out.println("#long_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		
		parr[0].along = 0L
		parr[0].blong = 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].along = 100L * 100L 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 10000L ) return false
		
		parr[0].along = 100L * 100L + 1L 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 10001L ) return false
		
		parr[0].along = 100L * (100L + 1L) 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 10100L ) return false
		
		parr[0].along = 100L * (100L + 10L * 10L) 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 20000L ) return false
		
		// division
		System.out.println("-// division")

		parr[0].along = 100L / 100L 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 1L ) return false

		parr[0].along = 100L / 100L + 1L 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 2L ) return false
		
		parr[0].along = 100L / (99L + 1L) 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 1L ) return false
		
		
		parr[0].along = 100L / (99L + 10L / 10L ) 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 1L ) return false

		parr[0].along = 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 20L ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].along = 10L % 9L 	
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 1L ) return false
		
		parr[0].along = 10L % 9L * 100L 	
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 100L ) return false

		parr[0].along = 10L % 9L + 1L	
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 2L ) return false

		parr[0].along = (5L + 5L ) % 9L + 1L	
		System.out.println("parr[0].along="+parr[0].along)
		if( parr[0].along != 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].along = 100L
		if( parr[0].along <= 100L ) { System.out.println( "parr[0].along(=" + parr[0].along+") <= 100L" ) }
		else return false
		
		if( parr[0].along <= 101L ) { System.out.println( "parr[0].along(=" + parr[0].along+") <= 101L" ) }
		else return false
		
		if( parr[0].along <= 99L ) return false
		else { System.out.println( "parr[0].along(=" + parr[0].along+") <= 99L : false" ) }
		
		if( parr[0].along >= 100L ) { System.out.println( "parr[0].along(=" + parr[0].along+") >= 100L" ) }
		else return false
		
		if( parr[0].along >= 99L ) { System.out.println( "parr[0].along(=" + parr[0].along+") <= 99L" ) }
		else return false

		if( parr[0].along >= 101L ) return false
		else { System.out.println( "parr[0].along(=" + parr[0].along+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		parr[0].along = 0x1FL
		parr[0].blong = parr[0].along & 0xF0L
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( parr[0].blong != 0x10L ) return false

		//if( parr[0].along & 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( parr[0].along & 0xF0L) != 0x10L ) return false
		parr[0].blong = 0xF0L & parr[0].along
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( parr[0].blong != 0x10L ) return false
		//if( 0xF0L & parr[0].along != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & parr[0].along ) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		parr[0].along = 0x0FL
		parr[0].blong = parr[0].along ^ 0xFFL
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( parr[0].blong != 0xf0L ) return false
		
		
		if( ( parr[0].along ^ 0xFFL) != 0xf0L ) return false
		parr[0].blong = 0xFFL ^ parr[0].along
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( 0xf0L != parr[0].blong ) return false
		if( 0xf0L != ( 0xFFL ^ parr[0].along) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		parr[0].along = 0x0FL
		parr[0].blong = parr[0].along | 0xF0L
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( parr[0].blong != 0xffL ) return false
		
		if( ( parr[0].along | 0xF0L) != 0xffL ) return false
		parr[0].blong = 0xF0L | parr[0].along
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( 0xffL != parr[0].blong ) return false
		if( 0xffL != ( 0xF0L | parr[0].along) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		parr[0].along = 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( parr[0].along & 0xFFL ) == 0x0FL && 
			   ( parr[0].along ^ 0xFFL ) == 0xF0L &&
			   ( parr[0].along | 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( parr[0].along & 0xFFL ) != 0x0FL || 
		   ( parr[0].along ^ 0xFFL ) != 0xF0L ||
		   ( parr[0].along | 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		parr[0].along = 0x1L
		
		parr[0].blong = parr[0].along << 1
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( parr[0].blong != 2L ) return false
	
		parr[0].blong = parr[0].along << 4
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( parr[0].blong != 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		parr[0].along = 0x10L
		parr[0].blong = parr[0].along >> 1
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( parr[0].blong != 0x8L ) return false
		
		parr[0].blong = parr[0].along >> 4
		System.out.printf("parr[0].blong=0x%x\n", parr[0].blong)
		if( parr[0].blong != 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		parr[0].along = 0x01L
		parr[0].blong = ~parr[0].along
		System.out.printf("parr[0].blong=0x%x(%d)\n", parr[0].blong, parr[0].blong)
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( parr[0].blong != 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].along = 10L
		parr[0].blong = parr[0].along++
		if( !( parr[0].along == 11L && parr[0].blong == 10L ) ) return false
		
		System.out.println("-// unary ++")
		parr[0].along = 10L
		parr[0].blong = ++parr[0].along
		if( !( parr[0].along == 11L && parr[0].blong == 11L ) ) return false

		System.out.println("-// postfix --")
		parr[0].along = 10L
		parr[0].blong = parr[0].along--
		if( !( parr[0].along == 9L && parr[0].blong == 10L ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].along = 10L
		parr[0].blong = --parr[0].along
		if( !( parr[0].along == 9L && parr[0].blong == 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].along = 10L * -1L
		System.out.println( "parr[0].along="+parr[0].along)
		if( parr[0].along != -10L ) return false
		
		
		parr[0].along = 10L
		parr[0].along = -parr[0].along
		System.out.println( "parr[0].along="+parr[0].along)
		if( parr[0].along != -10L ) return false
		
		parr[0].along = -10L
		parr[0].along = -parr[0].along 
		System.out.println( "parr[0].along="+parr[0].along)
		if( parr[0].along != 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].along = 10L
		System.out.println("parr[0].along *= 10L; parr[0].along = " + (parr[0].along *= 10L) )
		System.out.println( parr[0].along  )
		if( parr[0].along != 100L ) return false

		if( ( parr[0].along *= 10L ) != 1000L ) return false
		if( ( parr[0].along *= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].along = 10000L
		System.out.println("parr[0].along /= 10L; parr[0].along = " + (parr[0].along /= 10L) )
		System.out.println( parr[0].along  )
		if( parr[0].along != 1000L ) return false
		
		if( ( parr[0].along /= 10L ) != 100L ) return false
		if( ( parr[0].along /= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].along = 15L
		System.out.println("parr[0].along %= 9L; parr[0].along = " + (parr[0].along %= 9L) )
		System.out.println( parr[0].along  )
		if( parr[0].along != 6L ) return false

		if( ( parr[0].along %= 4L ) != 2L ) return false
		if( ( parr[0].along %= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].along = 10L
		System.out.println( parr[0].along += 10L )
		System.out.println( parr[0].along  )
		if( parr[0].along != 20L ) return false
		
		if( ( parr[0].along += 10L ) != 30L ) return false
		if( ( parr[0].along += -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].along = 30L
		System.out.println( parr[0].along -= 10L )
		System.out.println( parr[0].along  )
		if( parr[0].along != 20L ) return false

		if( ( parr[0].along -= 10L ) != 10L ) return false
		if( ( parr[0].along -= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		parr[0].along = 1L
		System.out.printf("parr[0].along <<= 1 ; parr[0].along = 0x%x\n", (parr[0].along <<= 1) )
		System.out.println( parr[0].along  )
		if( parr[0].along != 2L ) return false
		
		System.out.printf("parr[0].along <<= 4; parr[0].along = 0x%x\n",  parr[0].along <<= 4  )
		if( parr[0].along != 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		parr[0].along = 0x10L
		System.out.printf("parr[0].along >>= 1 ; parr[0].along = 0x%x\n",  (parr[0].along >>= 1) )
		System.out.println( "0x" + Long.toHexString(parr[0].along)  )
		if( parr[0].along != 0x08L ) return false
		
			
		System.out.printf("parr[0].along >>= 3; parr[0].along = 0x%x\n",  parr[0].along >>= 3  )
		if( parr[0].along != 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		parr[0].along = 0x1L
		System.out.printf("parr[0].along &= 1L ; parr[0].along = 0x%x\n", (parr[0].along &= 1L) )
		System.out.println( "0x" + Long.toHexString(parr[0].along)  )
		if( parr[0].along != 0x1L ) return false
		
		System.out.printf("parr[0].along &= 0L; parr[0].along = 0x%x\n",  parr[0].along &= 0L  )
		if( parr[0].along != 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		parr[0].along = 0x0FL
		System.out.printf("parr[0].along ^= 0xFFL ; parr[0].along = 0x%x\n",  (parr[0].along ^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(parr[0].along)  )
		if( parr[0].along != 0xF0L ) return false
		
		System.out.printf("parr[0].along ^= 0x0FL; parr[0].along = 0x%x\n",  parr[0].along ^= 0x0FL  )
		if( parr[0].along != 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		parr[0].along = 0x0FL
		System.out.printf("parr[0].along |= 0xF0L ; parr[0].along = 0x%x\n",  (parr[0].along |= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(parr[0].along)  )
		if( parr[0].along != 0xFFL ) return false
		
		System.out.printf("parr[0].along |= 0xF00L; parr[0].along = 0x%x\n",  parr[0].along |= 0xF00L  )
		if( parr[0].along != 0xFFFL ) return false

		
		return true

	}
	
	//p[0].singleton_a		
	fn long_singleton_member1_var_in_object_map_operation_test()->boolean {
		
		System.out.println("#long_singleton_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		
		parr[0].along_static = 0L
		parr[0].blong_static = 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].along_static = 100L * 100L 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 10000L ) return false
		
		parr[0].along_static = 100L * 100L + 1L 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 10001L ) return false
		
		parr[0].along_static = 100L * (100L + 1L) 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 10100L ) return false
		
		parr[0].along_static = 100L * (100L + 10L * 10L) 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 20000L ) return false
		
		// division
		System.out.println("-// division")

		parr[0].along_static = 100L / 100L 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 1L ) return false

		parr[0].along_static = 100L / 100L + 1L 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 2L ) return false
		
		parr[0].along_static = 100L / (99L + 1L) 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 1L ) return false
		
		
		parr[0].along_static = 100L / (99L + 10L / 10L ) 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 1L ) return false

		parr[0].along_static = 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 20L ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].along_static = 10L % 9L 	
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 1L ) return false
		
		parr[0].along_static = 10L % 9L * 100L 	
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 100L ) return false

		parr[0].along_static = 10L % 9L + 1L	
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 2L ) return false

		parr[0].along_static = (5L + 5L ) % 9L + 1L	
		System.out.println("parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].along_static = 100L
		if( parr[0].along_static <= 100L ) { System.out.println( "parr[0].along_static(=" + parr[0].along_static+") <= 100L" ) }
		else return false
		
		if( parr[0].along_static <= 101L ) { System.out.println( "parr[0].along_static(=" + parr[0].along_static+") <= 101L" ) }
		else return false
		
		if( parr[0].along_static <= 99L ) return false
		else { System.out.println( "parr[0].along_static(=" + parr[0].along_static+") <= 99L : false" ) }
		
		if( parr[0].along_static >= 100L ) { System.out.println( "parr[0].along_static(=" + parr[0].along_static+") >= 100L" ) }
		else return false
		
		if( parr[0].along_static >= 99L ) { System.out.println( "parr[0].along_static(=" + parr[0].along_static+") <= 99L" ) }
		else return false

		if( parr[0].along_static >= 101L ) return false
		else { System.out.println( "parr[0].along_static(=" + parr[0].along_static+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		parr[0].along_static = 0x1FL
		parr[0].blong_static = parr[0].along_static & 0xF0L
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( parr[0].blong_static != 0x10L ) return false

		//if( parr[0].along_static & 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( parr[0].along_static & 0xF0L) != 0x10L ) return false
		parr[0].blong_static = 0xF0L & parr[0].along_static
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( parr[0].blong_static != 0x10L ) return false
		//if( 0xF0L & parr[0].along_static != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & parr[0].along_static ) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		parr[0].along_static = 0x0FL
		parr[0].blong_static = parr[0].along_static ^ 0xFFL
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( parr[0].blong_static != 0xf0L ) return false
		
		
		if( ( parr[0].along_static ^ 0xFFL) != 0xf0L ) return false
		parr[0].blong_static = 0xFFL ^ parr[0].along_static
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( 0xf0L != parr[0].blong_static ) return false
		if( 0xf0L != ( 0xFFL ^ parr[0].along_static) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		parr[0].along_static = 0x0FL
		parr[0].blong_static = parr[0].along_static | 0xF0L
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( parr[0].blong_static != 0xffL ) return false
		
		if( ( parr[0].along_static | 0xF0L) != 0xffL ) return false
		parr[0].blong_static = 0xF0L | parr[0].along_static
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( 0xffL != parr[0].blong_static ) return false
		if( 0xffL != ( 0xF0L | parr[0].along_static) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		parr[0].along_static = 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( parr[0].along_static & 0xFFL ) == 0x0FL && 
			   ( parr[0].along_static ^ 0xFFL ) == 0xF0L &&
			   ( parr[0].along_static | 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( parr[0].along_static & 0xFFL ) != 0x0FL || 
		   ( parr[0].along_static ^ 0xFFL ) != 0xF0L ||
		   ( parr[0].along_static | 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		parr[0].along_static = 0x1L
		
		parr[0].blong_static = parr[0].along_static << 1
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( parr[0].blong_static != 2L ) return false
	
		parr[0].blong_static = parr[0].along_static << 4
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( parr[0].blong_static != 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		parr[0].along_static = 0x10L
		parr[0].blong_static = parr[0].along_static >> 1
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( parr[0].blong_static != 0x8L ) return false
		
		parr[0].blong_static = parr[0].along_static >> 4
		System.out.printf("parr[0].blong_static=0x%x\n", parr[0].blong_static)
		if( parr[0].blong_static != 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		parr[0].along_static = 0x01L
		parr[0].blong_static = ~parr[0].along_static
		System.out.printf("parr[0].blong_static=0x%x(%d)\n", parr[0].blong_static, parr[0].blong_static)
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( parr[0].blong_static != 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].along_static = 10L
		parr[0].blong_static = parr[0].along_static++
		if( !( parr[0].along_static == 11L && parr[0].blong_static == 10L ) ) return false
		
		System.out.println("-// unary ++")
		parr[0].along_static = 10L
		parr[0].blong_static = ++parr[0].along_static
		if( !( parr[0].along_static == 11L && parr[0].blong_static == 11L ) ) return false

		System.out.println("-// postfix --")
		parr[0].along_static = 10L
		parr[0].blong_static = parr[0].along_static--
		if( !( parr[0].along_static == 9L && parr[0].blong_static == 10L ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].along_static = 10L
		parr[0].blong_static = --parr[0].along_static
		if( !( parr[0].along_static == 9L && parr[0].blong_static == 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].along_static = 10L * -1L
		System.out.println( "parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != -10L ) return false
		
		
		parr[0].along_static = 10L
		parr[0].along_static = -parr[0].along_static
		System.out.println( "parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != -10L ) return false
		
		parr[0].along_static = -10L
		parr[0].along_static = -parr[0].along_static 
		System.out.println( "parr[0].along_static="+parr[0].along_static)
		if( parr[0].along_static != 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].along_static = 10L
		System.out.println("parr[0].along_static *= 10L; parr[0].along_static = " + (parr[0].along_static *= 10L) )
		System.out.println( parr[0].along_static  )
		if( parr[0].along_static != 100L ) return false

		if( ( parr[0].along_static *= 10L ) != 1000L ) return false
		if( ( parr[0].along_static *= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].along_static = 10000L
		System.out.println("parr[0].along_static /= 10L; parr[0].along_static = " + (parr[0].along_static /= 10L) )
		System.out.println( parr[0].along_static  )
		if( parr[0].along_static != 1000L ) return false
		
		if( ( parr[0].along_static /= 10L ) != 100L ) return false
		if( ( parr[0].along_static /= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].along_static = 15L
		System.out.println("parr[0].along_static %= 9L; parr[0].along_static = " + (parr[0].along_static %= 9L) )
		System.out.println( parr[0].along_static  )
		if( parr[0].along_static != 6L ) return false

		if( ( parr[0].along_static %= 4L ) != 2L ) return false
		if( ( parr[0].along_static %= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].along_static = 10L
		System.out.println( parr[0].along_static += 10L )
		System.out.println( parr[0].along_static  )
		if( parr[0].along_static != 20L ) return false
		
		if( ( parr[0].along_static += 10L ) != 30L ) return false
		if( ( parr[0].along_static += -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].along_static = 30L
		System.out.println( parr[0].along_static -= 10L )
		System.out.println( parr[0].along_static  )
		if( parr[0].along_static != 20L ) return false

		if( ( parr[0].along_static -= 10L ) != 10L ) return false
		if( ( parr[0].along_static -= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		parr[0].along_static = 1L
		System.out.printf("parr[0].along_static <<= 1 ; parr[0].along_static = 0x%x\n", (parr[0].along_static <<= 1) )
		System.out.println( parr[0].along_static  )
		if( parr[0].along_static != 2L ) return false
		
		System.out.printf("parr[0].along_static <<= 4; parr[0].along_static = 0x%x\n",  parr[0].along_static <<= 4  )
		if( parr[0].along_static != 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		parr[0].along_static = 0x10L
		System.out.printf("parr[0].along_static >>= 1 ; parr[0].along_static = 0x%x\n",  (parr[0].along_static >>= 1) )
		System.out.println( "0x" + Long.toHexString(parr[0].along_static)  )
		if( parr[0].along_static != 0x08L ) return false
		
			
		System.out.printf("parr[0].along_static >>= 3; parr[0].along_static = 0x%x\n",  parr[0].along_static >>= 3  )
		if( parr[0].along_static != 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		parr[0].along_static = 0x1L
		System.out.printf("parr[0].along_static &= 1L ; parr[0].along_static = 0x%x\n", (parr[0].along_static &= 1L) )
		System.out.println( "0x" + Long.toHexString(parr[0].along_static)  )
		if( parr[0].along_static != 0x1L ) return false
		
		System.out.printf("parr[0].along_static &= 0L; parr[0].along_static = 0x%x\n",  parr[0].along_static &= 0L  )
		if( parr[0].along_static != 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		parr[0].along_static = 0x0FL
		System.out.printf("parr[0].along_static ^= 0xFFL ; parr[0].along_static = 0x%x\n",  (parr[0].along_static ^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(parr[0].along_static)  )
		if( parr[0].along_static != 0xF0L ) return false
		
		System.out.printf("parr[0].along_static ^= 0x0FL; parr[0].along_static = 0x%x\n",  parr[0].along_static ^= 0x0FL  )
		if( parr[0].along_static != 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		parr[0].along_static = 0x0FL
		System.out.printf("parr[0].along_static |= 0xF0L ; parr[0].along_static = 0x%x\n",  (parr[0].along_static |= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(parr[0].along_static)  )
		if( parr[0].along_static != 0xFFL ) return false
		
		System.out.printf("parr[0].along_static |= 0xF00L; parr[0].along_static = 0x%x\n",  parr[0].along_static |= 0xF00L  )
		if( parr[0].along_static != 0xFFFL ) return false

		
		return true

	}		

	// p[0].a[0]
	fn long_d1_map_in_object_map_operation_test()->boolean {
		
		System.out.println("#long_singleton_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		
		parr[0].arrlong_1[0] = 0L
		parr[0].arrlong_1[1] = 0L
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].arrlong_1[0] = 100L * 100L 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 10000L ) return false
		
		parr[0].arrlong_1[0] = 100L * 100L + 1L 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 10001L ) return false
		
		parr[0].arrlong_1[0] = 100L * (100L + 1L) 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 10100L ) return false
		
		parr[0].arrlong_1[0] = 100L * (100L + 10L * 10L) 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 20000L ) return false
		
		// division
		System.out.println("-// division")

		parr[0].arrlong_1[0] = 100L / 100L 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 1L ) return false

		parr[0].arrlong_1[0] = 100L / 100L + 1L 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 2L ) return false
		
		parr[0].arrlong_1[0] = 100L / (99L + 1L) 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 1L ) return false
		
		
		parr[0].arrlong_1[0] = 100L / (99L + 10L / 10L ) 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 1L ) return false

		parr[0].arrlong_1[0] = 100L * 100L / 1000L + 100L / 100L * 10L 
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 20L ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].arrlong_1[0] = 10L % 9L 	
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 1L ) return false
		
		parr[0].arrlong_1[0] = 10L % 9L * 100L 	
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 100L ) return false

		parr[0].arrlong_1[0] = 10L % 9L + 1L	
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 2L ) return false

		parr[0].arrlong_1[0] = (5L + 5L ) % 9L + 1L	
		System.out.println("parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 2L ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].arrlong_1[0] = 100L
		if( parr[0].arrlong_1[0] <= 100L ) { System.out.println( "parr[0].arrlong_1[0](=" + parr[0].arrlong_1[0]+") <= 100L" ) }
		else return false
		
		if( parr[0].arrlong_1[0] <= 101L ) { System.out.println( "parr[0].arrlong_1[0](=" + parr[0].arrlong_1[0]+") <= 101L" ) }
		else return false
		
		if( parr[0].arrlong_1[0] <= 99L ) return false
		else { System.out.println( "parr[0].arrlong_1[0](=" + parr[0].arrlong_1[0]+") <= 99L : false" ) }
		
		if( parr[0].arrlong_1[0] >= 100L ) { System.out.println( "parr[0].arrlong_1[0](=" + parr[0].arrlong_1[0]+") >= 100L" ) }
		else return false
		
		if( parr[0].arrlong_1[0] >= 99L ) { System.out.println( "parr[0].arrlong_1[0](=" + parr[0].arrlong_1[0]+") <= 99L" ) }
		else return false

		if( parr[0].arrlong_1[0] >= 101L ) return false
		else { System.out.println( "parr[0].arrlong_1[0](=" + parr[0].arrlong_1[0]+") <= 101L : false" ) }
		
		// and '&' 
		System.out.println("-// and '&' ")
		parr[0].arrlong_1[0] = 0x1FL
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0] & 0xF0L
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( parr[0].arrlong_1[1] != 0x10L ) return false

		//if( parr[0].arrlong_1[0] & 0xF0L != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( parr[0].arrlong_1[0] & 0xF0L) != 0x10L ) return false
		parr[0].arrlong_1[1] = 0xF0L & parr[0].arrlong_1[0]
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( parr[0].arrlong_1[1] != 0x10L ) return false
		//if( 0xF0L & parr[0].arrlong_1[0] != 0x10L ) return false // this creates error, '!=' has higher priority than the '&'
		if( ( 0xF0L & parr[0].arrlong_1[0] ) != 0x10L ) return false
		
		
		// exclusive or '^'
		System.out.println("-// exclusive or '^'")
		parr[0].arrlong_1[0] = 0x0FL
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0] ^ 0xFFL
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( parr[0].arrlong_1[1] != 0xf0L ) return false
		
		
		if( ( parr[0].arrlong_1[0] ^ 0xFFL) != 0xf0L ) return false
		parr[0].arrlong_1[1] = 0xFFL ^ parr[0].arrlong_1[0]
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( 0xf0L != parr[0].arrlong_1[1] ) return false
		if( 0xf0L != ( 0xFFL ^ parr[0].arrlong_1[0]) ) return false
		
		// inclusive or '|'
		System.out.println("-// inclusive or '|'")
		parr[0].arrlong_1[0] = 0x0FL
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0] | 0xF0L
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( parr[0].arrlong_1[1] != 0xffL ) return false
		
		if( ( parr[0].arrlong_1[0] | 0xF0L) != 0xffL ) return false
		parr[0].arrlong_1[1] = 0xF0L | parr[0].arrlong_1[0]
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( 0xffL != parr[0].arrlong_1[1] ) return false
		if( 0xffL != ( 0xF0L | parr[0].arrlong_1[0]) ) return false
		
		
		// with boolean
		System.out.println("-// with boolean")
		parr[0].arrlong_1[0] = 0x0FL
		
		// logical and '&&'
		if(
			!( 
			   ( parr[0].arrlong_1[0] & 0xFFL ) == 0x0FL && 
			   ( parr[0].arrlong_1[0] ^ 0xFFL ) == 0xF0L &&
			   ( parr[0].arrlong_1[0] | 0xF0L ) == 0xFFL 
			 ) 
		) return false
		
		// logical or '||'
		System.out.println("-// logical or '||'")
		if(
		   ( parr[0].arrlong_1[0] & 0xFFL ) != 0x0FL || 
		   ( parr[0].arrlong_1[0] ^ 0xFFL ) != 0xF0L ||
		   ( parr[0].arrlong_1[0] | 0xF0L ) != 0xFFL 
		) return false

		// left shift '<<'
		System.out.println("-// left shift '<<'")
		System.out.println("shift")
		parr[0].arrlong_1[0] = 0x1L
		
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0] << 1
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( parr[0].arrlong_1[1] != 2L ) return false
	
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0] << 4
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( parr[0].arrlong_1[1] != 0x10L ) return false
		
		// right shift '>>'
		System.out.println("-// right shift '>>'")		
		parr[0].arrlong_1[0] = 0x10L
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0] >> 1
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( parr[0].arrlong_1[1] != 0x8L ) return false
		
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0] >> 4
		System.out.printf("parr[0].arrlong_1[1]=0x%x\n", parr[0].arrlong_1[1])
		if( parr[0].arrlong_1[1] != 0x1L ) return false

		
		// inverse '~'
		System.out.println("-// inverse '~'")
		parr[0].arrlong_1[0] = 0x01L
		parr[0].arrlong_1[1] = ~parr[0].arrlong_1[0]
		System.out.printf("parr[0].arrlong_1[1]=0x%x(%d)\n", parr[0].arrlong_1[1], parr[0].arrlong_1[1])
		System.out.printf("0xfffffffffffffffeL=0x%x(%d)\n", 0xfffffffffffffffeL, 0xfffffffffffffffeL)
		if( parr[0].arrlong_1[1] != 0xfffffffffffffffeL ) return false
		
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].arrlong_1[0] = 10L
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0]++
		if( !( parr[0].arrlong_1[0] == 11L && parr[0].arrlong_1[1] == 10L ) ) return false
		
		System.out.println("-// unary ++")
		parr[0].arrlong_1[0] = 10L
		parr[0].arrlong_1[1] = ++parr[0].arrlong_1[0]
		if( !( parr[0].arrlong_1[0] == 11L && parr[0].arrlong_1[1] == 11L ) ) return false

		System.out.println("-// postfix --")
		parr[0].arrlong_1[0] = 10L
		parr[0].arrlong_1[1] = parr[0].arrlong_1[0]--
		if( !( parr[0].arrlong_1[0] == 9L && parr[0].arrlong_1[1] == 10L ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].arrlong_1[0] = 10L
		parr[0].arrlong_1[1] = --parr[0].arrlong_1[0]
		if( !( parr[0].arrlong_1[0] == 9L && parr[0].arrlong_1[1] == 9L ) ) return false
		
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].arrlong_1[0] = 10L * -1L
		System.out.println( "parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != -10L ) return false
		
		
		parr[0].arrlong_1[0] = 10L
		parr[0].arrlong_1[0] = -parr[0].arrlong_1[0]
		System.out.println( "parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != -10L ) return false
		
		parr[0].arrlong_1[0] = -10L
		parr[0].arrlong_1[0] = -parr[0].arrlong_1[0] 
		System.out.println( "parr[0].arrlong_1[0]="+parr[0].arrlong_1[0])
		if( parr[0].arrlong_1[0] != 10L ) return false

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].arrlong_1[0] = 10L
		System.out.println("parr[0].arrlong_1[0] *= 10L; parr[0].arrlong_1[0] = " + (parr[0].arrlong_1[0] *= 10L) )
		System.out.println( parr[0].arrlong_1[0]  )
		if( parr[0].arrlong_1[0] != 100L ) return false

		if( ( parr[0].arrlong_1[0] *= 10L ) != 1000L ) return false
		if( ( parr[0].arrlong_1[0] *= -10L ) != -10000L ) return false
		
		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].arrlong_1[0] = 10000L
		System.out.println("parr[0].arrlong_1[0] /= 10L; parr[0].arrlong_1[0] = " + (parr[0].arrlong_1[0] /= 10L) )
		System.out.println( parr[0].arrlong_1[0]  )
		if( parr[0].arrlong_1[0] != 1000L ) return false
		
		if( ( parr[0].arrlong_1[0] /= 10L ) != 100L ) return false
		if( ( parr[0].arrlong_1[0] /= -10L ) != -10L ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].arrlong_1[0] = 15L
		System.out.println("parr[0].arrlong_1[0] %= 9L; parr[0].arrlong_1[0] = " + (parr[0].arrlong_1[0] %= 9L) )
		System.out.println( parr[0].arrlong_1[0]  )
		if( parr[0].arrlong_1[0] != 6L ) return false

		if( ( parr[0].arrlong_1[0] %= 4L ) != 2L ) return false
		if( ( parr[0].arrlong_1[0] %= 2L ) != 0L ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].arrlong_1[0] = 10L
		System.out.println( parr[0].arrlong_1[0] += 10L )
		System.out.println( parr[0].arrlong_1[0]  )
		if( parr[0].arrlong_1[0] != 20L ) return false
		
		if( ( parr[0].arrlong_1[0] += 10L ) != 30L ) return false
		if( ( parr[0].arrlong_1[0] += -10L ) != 20L ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].arrlong_1[0] = 30L
		System.out.println( parr[0].arrlong_1[0] -= 10L )
		System.out.println( parr[0].arrlong_1[0]  )
		if( parr[0].arrlong_1[0] != 20L ) return false

		if( ( parr[0].arrlong_1[0] -= 10L ) != 10L ) return false
		if( ( parr[0].arrlong_1[0] -= -10L ) != 20L ) return false
		
		
		// left shift assign '<<='
		System.out.println("-// left shift assign '<<='")
		parr[0].arrlong_1[0] = 1L
		System.out.printf("parr[0].arrlong_1[0] <<= 1 ; parr[0].arrlong_1[0] = 0x%x\n", (parr[0].arrlong_1[0] <<= 1) )
		System.out.println( parr[0].arrlong_1[0]  )
		if( parr[0].arrlong_1[0] != 2L ) return false
		
		System.out.printf("parr[0].arrlong_1[0] <<= 4; parr[0].arrlong_1[0] = 0x%x\n",  parr[0].arrlong_1[0] <<= 4  )
		if( parr[0].arrlong_1[0] != 0x20L ) return false
	
		// right shift assign '>>='
		System.out.println("-// right shift assign '>>='")
		parr[0].arrlong_1[0] = 0x10L
		System.out.printf("parr[0].arrlong_1[0] >>= 1 ; parr[0].arrlong_1[0] = 0x%x\n",  (parr[0].arrlong_1[0] >>= 1) )
		System.out.println( "0x" + Long.toHexString(parr[0].arrlong_1[0])  )
		if( parr[0].arrlong_1[0] != 0x08L ) return false
		
			
		System.out.printf("parr[0].arrlong_1[0] >>= 3; parr[0].arrlong_1[0] = 0x%x\n",  parr[0].arrlong_1[0] >>= 3  )
		if( parr[0].arrlong_1[0] != 0x1L ) return false
		
		
		// and assign '&='
		System.out.println("-// and assign '&='")
		parr[0].arrlong_1[0] = 0x1L
		System.out.printf("parr[0].arrlong_1[0] &= 1L ; parr[0].arrlong_1[0] = 0x%x\n", (parr[0].arrlong_1[0] &= 1L) )
		System.out.println( "0x" + Long.toHexString(parr[0].arrlong_1[0])  )
		if( parr[0].arrlong_1[0] != 0x1L ) return false
		
		System.out.printf("parr[0].arrlong_1[0] &= 0L; parr[0].arrlong_1[0] = 0x%x\n",  parr[0].arrlong_1[0] &= 0L  )
		if( parr[0].arrlong_1[0] != 0L ) return false
		
		
		// 'exclusive or' assign '^='
		System.out.println("-// 'exclusive or' assign '^='")
		parr[0].arrlong_1[0] = 0x0FL
		System.out.printf("parr[0].arrlong_1[0] ^= 0xFFL ; parr[0].arrlong_1[0] = 0x%x\n",  (parr[0].arrlong_1[0] ^= 0xFFL) )
		System.out.println( "0x" + Long.toHexString(parr[0].arrlong_1[0])  )
		if( parr[0].arrlong_1[0] != 0xF0L ) return false
		
		System.out.printf("parr[0].arrlong_1[0] ^= 0x0FL; parr[0].arrlong_1[0] = 0x%x\n",  parr[0].arrlong_1[0] ^= 0x0FL  )
		if( parr[0].arrlong_1[0] != 0xFFL ) return false
	
	
		// 'inclusive or' assign '|='
		System.out.println("-// 'inclusive or' assign '|='")
		parr[0].arrlong_1[0] = 0x0FL
		System.out.printf("parr[0].arrlong_1[0] |= 0xF0L ; parr[0].arrlong_1[0] = 0x%x\n",  (parr[0].arrlong_1[0] |= 0xF0L) )
		System.out.println( "0x" + Long.toHexString(parr[0].arrlong_1[0])  )
		if( parr[0].arrlong_1[0] != 0xFFL ) return false
		
		System.out.printf("parr[0].arrlong_1[0] |= 0xF00L; parr[0].arrlong_1[0] = 0x%x\n",  parr[0].arrlong_1[0] |= 0xF00L  )
		if( parr[0].arrlong_1[0] != 0xFFFL ) return false

		
		return true

	}

	
	
	/* float type operation test */
	// a
	fn float_var_operation_test()->boolean {
		
		System.out.println("#float_var_operation_test");
		
		afloat:float = 0.0f 
		bfloat:float = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		afloat = 100.0f * 100.0f 
		System.out.println("afloat="+afloat)
		if( afloat != 10000.0f ) return false
		
		afloat = 100.0f  * 100.0f + 1.0f 
		System.out.println("afloat="+afloat)
		if( afloat != 10001.0f ) return false
		
		afloat = 100.0f * (100.0f + 1.0f ) 
		System.out.println("afloat="+afloat)
		if( afloat != 10100.0f ) return false
		
		afloat = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("afloat="+afloat)
		if( afloat != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		afloat = 100.0f / 100.0f 
		System.out.println("afloat="+afloat)
		if( afloat != 1.0f ) return false

		afloat = 100.0f / 100.0f + 1.0f 
		System.out.println("afloat="+afloat)
		if( afloat != 2.0f ) return false
		
		afloat = 100.0f / (99.0f + 1.0f ) 
		System.out.println("afloat="+afloat)
		if( afloat != 1.0f ) return false
		
		
		afloat = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("afloat="+afloat)
		if( afloat != 1.0f ) return false

		afloat = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("afloat="+afloat)
		if( afloat != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		afloat = 10.0f % 9.0f 	
		System.out.println("afloat="+afloat)
		if( afloat != 1.0f ) return false
		
		afloat = 10.0f % 9.0f * 100.0f 	
		System.out.println("afloat="+afloat)
		if( afloat != 100.0f ) return false

		afloat = 10.0f % 9.0f + 1.0f 	
		System.out.println("afloat="+afloat)
		if( afloat != 2.0f ) return false

		afloat = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("afloat="+afloat)
		if( afloat != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		afloat = 100.0f 
		if( afloat <= 100.0f ) { System.out.println( "afloat(=" + afloat+") <= 100.0f " ) }
		else return false
		
		if( afloat <= 101.0f ) { System.out.println( "afloat(=" + afloat+") <= 101.0f " ) }
		else return false
		
		if( afloat <= 99.0f ) return false
		else { System.out.println( "afloat(=" + afloat+") <= 99.0f : false" ) }
		
		if( afloat >= 100.0f ) { System.out.println( "afloat(=" + afloat+") >= 100.0f " ) }
		else return false
		
		if( afloat >= 99.0f ) { System.out.println( "afloat(=" + afloat+") <= 99.0f " ) }
		else return false

		if( afloat >= 101.0f ) return false
		else { System.out.println( "afloat(=" + afloat+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		afloat = 10.0f 
		bfloat = afloat++
		if( !( afloat == 11.0f && bfloat == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		afloat = 10.0f 
		bfloat = ++afloat
		if( !( afloat == 11.0f && bfloat == 11.0f ) ) return false


		System.out.println("-// postfix --")
		afloat = 10.0f 
		bfloat = afloat--
		if( !( afloat == 9.0f && bfloat == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		afloat = 10.0f 
		bfloat = --afloat
		if( !( afloat == 9.0f && bfloat == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		afloat = 10.0f * -1.0f 
		System.out.println( "afloat="+afloat)
		if( afloat != -10.0f ) return false
		
		
		afloat = 10.0f 
		afloat = -afloat
		System.out.println( "afloat="+afloat)
		if( afloat != -10.0f ) return false
		
		afloat = -10.0f 
		afloat = -afloat 
		System.out.println( "afloat="+afloat)
		if( afloat != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		afloat = 10.0f 
		System.out.println("afloat *= 10.0f ; afloat = " + (afloat *= 10.0f ) )
		System.out.println( afloat  )
		if( afloat != 100.0f ) return false

		if( ( afloat *= 10.0f ) != 1000.0f ) return false
		if( ( afloat *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		afloat = 10000.0f 
		System.out.println("afloat /= 10.0f ; afloat = " + (afloat /= 10.0f ) )
		System.out.println( afloat  )
		if( afloat != 1000.0f ) return false
		
		if( ( afloat /= 10.0f ) != 100.0f ) return false
		if( ( afloat /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		afloat = 15.0f 
		System.out.println("afloat %= 9.0f ; afloat = " + (afloat %= 9.0f ) )
		System.out.println( afloat  )
		if( afloat != 6.0f ) return false

		if( ( afloat %= 4.0f ) != 2.0f ) return false
		if( ( afloat %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		afloat = 10.0f 
		System.out.println( afloat += 10.0f )
		System.out.println( afloat  )
		if( afloat != 20.0f ) return false
		
		if( ( afloat += 10.0f ) != 30.0f ) return false
		if( ( afloat += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		afloat = 30.0f 
		System.out.println( afloat -= 10.0f )
		System.out.println( afloat  )
		if( afloat != 20.0f ) return false

		if( ( afloat -= 10.0f ) != 10.0f ) return false
		if( ( afloat -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	

	// a[0]
	fn float_d1_map_operation_test()->boolean {
		
		System.out.println("#float_d1_map_operation_test");
		
		arrfloat:float[] = float[100]
		
		
		arrfloat[0] = 0.0f 
		arrfloat[1] = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		arrfloat[0] = 100.0f * 100.0f 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 10000.0f ) return false
		
		arrfloat[0] = 100.0f  * 100.0f + 1.0f 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 10001.0f ) return false
		
		arrfloat[0] = 100.0f * (100.0f + 1.0f ) 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 10100.0f ) return false
		
		arrfloat[0] = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		arrfloat[0] = 100.0f / 100.0f 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 1.0f ) return false

		arrfloat[0] = 100.0f / 100.0f + 1.0f 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 2.0f ) return false
		
		arrfloat[0] = 100.0f / (99.0f + 1.0f ) 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 1.0f ) return false
		
		
		arrfloat[0] = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 1.0f ) return false

		arrfloat[0] = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		arrfloat[0] = 10.0f % 9.0f 	
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 1.0f ) return false
		
		arrfloat[0] = 10.0f % 9.0f * 100.0f 	
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 100.0f ) return false

		arrfloat[0] = 10.0f % 9.0f + 1.0f 	
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 2.0f ) return false

		arrfloat[0] = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		arrfloat[0] = 100.0f 
		if( arrfloat[0] <= 100.0f ) { System.out.println( "arrfloat[0](=" + arrfloat[0]+") <= 100.0f " ) }
		else return false
		
		if( arrfloat[0] <= 101.0f ) { System.out.println( "arrfloat[0](=" + arrfloat[0]+") <= 101.0f " ) }
		else return false
		
		if( arrfloat[0] <= 99.0f ) return false
		else { System.out.println( "arrfloat[0](=" + arrfloat[0]+") <= 99.0f : false" ) }
		
		if( arrfloat[0] >= 100.0f ) { System.out.println( "arrfloat[0](=" + arrfloat[0]+") >= 100.0f " ) }
		else return false
		
		if( arrfloat[0] >= 99.0f ) { System.out.println( "arrfloat[0](=" + arrfloat[0]+") <= 99.0f " ) }
		else return false

		if( arrfloat[0] >= 101.0f ) return false
		else { System.out.println( "arrfloat[0](=" + arrfloat[0]+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		arrfloat[0] = 10.0f 
		arrfloat[1] = arrfloat[0]++
		if( !( arrfloat[0] == 11.0f && arrfloat[1] == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		arrfloat[0] = 10.0f 
		arrfloat[1] = ++arrfloat[0]
		if( !( arrfloat[0] == 11.0f && arrfloat[1] == 11.0f ) ) return false


		System.out.println("-// postfix --")
		arrfloat[0] = 10.0f 
		arrfloat[1] = arrfloat[0]--
		if( !( arrfloat[0] == 9.0f && arrfloat[1] == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		arrfloat[0] = 10.0f 
		arrfloat[1] = --arrfloat[0]
		if( !( arrfloat[0] == 9.0f && arrfloat[1] == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		arrfloat[0] = 10.0f * -1.0f 
		System.out.println( "arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != -10.0f ) return false
		
		
		arrfloat[0] = 10.0f 
		arrfloat[0] = -arrfloat[0]
		System.out.println( "arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != -10.0f ) return false
		
		arrfloat[0] = -10.0f 
		arrfloat[0] = -arrfloat[0] 
		System.out.println( "arrfloat[0]="+arrfloat[0])
		if( arrfloat[0] != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		arrfloat[0] = 10.0f 
		System.out.println("arrfloat[0] *= 10.0f ; arrfloat[0] = " + (arrfloat[0] *= 10.0f ) )
		System.out.println( arrfloat[0]  )
		if( arrfloat[0] != 100.0f ) return false

		if( ( arrfloat[0] *= 10.0f ) != 1000.0f ) return false
		if( ( arrfloat[0] *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		arrfloat[0] = 10000.0f 
		System.out.println("arrfloat[0] /= 10.0f ; arrfloat[0] = " + (arrfloat[0] /= 10.0f ) )
		System.out.println( arrfloat[0]  )
		if( arrfloat[0] != 1000.0f ) return false
		
		if( ( arrfloat[0] /= 10.0f ) != 100.0f ) return false
		if( ( arrfloat[0] /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		arrfloat[0] = 15.0f 
		System.out.println("arrfloat[0] %= 9.0f ; arrfloat[0] = " + (arrfloat[0] %= 9.0f ) )
		System.out.println( arrfloat[0]  )
		if( arrfloat[0] != 6.0f ) return false

		if( ( arrfloat[0] %= 4.0f ) != 2.0f ) return false
		if( ( arrfloat[0] %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		arrfloat[0] = 10.0f 
		System.out.println( arrfloat[0] += 10.0f )
		System.out.println( arrfloat[0]  )
		if( arrfloat[0] != 20.0f ) return false
		
		if( ( arrfloat[0] += 10.0f ) != 30.0f ) return false
		if( ( arrfloat[0] += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		arrfloat[0] = 30.0f 
		System.out.println( arrfloat[0] -= 10.0f )
		System.out.println( arrfloat[0]  )
		if( arrfloat[0] != 20.0f ) return false

		if( ( arrfloat[0] -= 10.0f ) != 10.0f ) return false
		if( ( arrfloat[0] -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}
	
	// a[0][0]
	fn float_d2_map_operation_test()->boolean {
		
		System.out.println("#float_d2_map_operation_test");
		
		arrfloat2:float[][] = float[100][]
		arrfloat2[0] = float[100]
		
		arrfloat2[0][0] = 0.0f 
		arrfloat2[0][1] = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		arrfloat2[0][0] = 100.0f * 100.0f 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 10000.0f ) return false
		
		arrfloat2[0][0] = 100.0f  * 100.0f + 1.0f 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 10001.0f ) return false
		
		arrfloat2[0][0] = 100.0f * (100.0f + 1.0f ) 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 10100.0f ) return false
		
		arrfloat2[0][0] = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		arrfloat2[0][0] = 100.0f / 100.0f 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 1.0f ) return false

		arrfloat2[0][0] = 100.0f / 100.0f + 1.0f 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 2.0f ) return false
		
		arrfloat2[0][0] = 100.0f / (99.0f + 1.0f ) 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 1.0f ) return false
		
		
		arrfloat2[0][0] = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 1.0f ) return false

		arrfloat2[0][0] = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		arrfloat2[0][0] = 10.0f % 9.0f 	
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 1.0f ) return false
		
		arrfloat2[0][0] = 10.0f % 9.0f * 100.0f 	
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 100.0f ) return false

		arrfloat2[0][0] = 10.0f % 9.0f + 1.0f 	
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 2.0f ) return false

		arrfloat2[0][0] = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		arrfloat2[0][0] = 100.0f 
		if( arrfloat2[0][0] <= 100.0f ) { System.out.println( "arrfloat2[0][0](=" + arrfloat2[0][0]+") <= 100.0f " ) }
		else return false
		
		if( arrfloat2[0][0] <= 101.0f ) { System.out.println( "arrfloat2[0][0](=" + arrfloat2[0][0]+") <= 101.0f " ) }
		else return false
		
		if( arrfloat2[0][0] <= 99.0f ) return false
		else { System.out.println( "arrfloat2[0][0](=" + arrfloat2[0][0]+") <= 99.0f : false" ) }
		
		if( arrfloat2[0][0] >= 100.0f ) { System.out.println( "arrfloat2[0][0](=" + arrfloat2[0][0]+") >= 100.0f " ) }
		else return false
		
		if( arrfloat2[0][0] >= 99.0f ) { System.out.println( "arrfloat2[0][0](=" + arrfloat2[0][0]+") <= 99.0f " ) }
		else return false

		if( arrfloat2[0][0] >= 101.0f ) return false
		else { System.out.println( "arrfloat2[0][0](=" + arrfloat2[0][0]+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		arrfloat2[0][0] = 10.0f 
		arrfloat2[0][1] = arrfloat2[0][0]++
		if( !( arrfloat2[0][0] == 11.0f && arrfloat2[0][1] == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		arrfloat2[0][0] = 10.0f 
		arrfloat2[0][1] = ++arrfloat2[0][0]
		if( !( arrfloat2[0][0] == 11.0f && arrfloat2[0][1] == 11.0f ) ) return false


		System.out.println("-// postfix --")
		arrfloat2[0][0] = 10.0f 
		arrfloat2[0][1] = arrfloat2[0][0]--
		if( !( arrfloat2[0][0] == 9.0f && arrfloat2[0][1] == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		arrfloat2[0][0] = 10.0f 
		arrfloat2[0][1] = --arrfloat2[0][0]
		if( !( arrfloat2[0][0] == 9.0f && arrfloat2[0][1] == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		arrfloat2[0][0] = 10.0f * -1.0f 
		System.out.println( "arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != -10.0f ) return false
		
		
		arrfloat2[0][0] = 10.0f 
		arrfloat2[0][0] = -arrfloat2[0][0]
		System.out.println( "arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != -10.0f ) return false
		
		arrfloat2[0][0] = -10.0f 
		arrfloat2[0][0] = -arrfloat2[0][0] 
		System.out.println( "arrfloat2[0][0]="+arrfloat2[0][0])
		if( arrfloat2[0][0] != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		arrfloat2[0][0] = 10.0f 
		System.out.println("arrfloat2[0][0] *= 10.0f ; arrfloat2[0][0] = " + (arrfloat2[0][0] *= 10.0f ) )
		System.out.println( arrfloat2[0][0]  )
		if( arrfloat2[0][0] != 100.0f ) return false

		if( ( arrfloat2[0][0] *= 10.0f ) != 1000.0f ) return false
		if( ( arrfloat2[0][0] *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		arrfloat2[0][0] = 10000.0f 
		System.out.println("arrfloat2[0][0] /= 10.0f ; arrfloat2[0][0] = " + (arrfloat2[0][0] /= 10.0f ) )
		System.out.println( arrfloat2[0][0]  )
		if( arrfloat2[0][0] != 1000.0f ) return false
		
		if( ( arrfloat2[0][0] /= 10.0f ) != 100.0f ) return false
		if( ( arrfloat2[0][0] /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		arrfloat2[0][0] = 15.0f 
		System.out.println("arrfloat2[0][0] %= 9.0f ; arrfloat2[0][0] = " + (arrfloat2[0][0] %= 9.0f ) )
		System.out.println( arrfloat2[0][0]  )
		if( arrfloat2[0][0] != 6.0f ) return false

		if( ( arrfloat2[0][0] %= 4.0f ) != 2.0f ) return false
		if( ( arrfloat2[0][0] %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		arrfloat2[0][0] = 10.0f 
		System.out.println( arrfloat2[0][0] += 10.0f )
		System.out.println( arrfloat2[0][0]  )
		if( arrfloat2[0][0] != 20.0f ) return false
		
		if( ( arrfloat2[0][0] += 10.0f ) != 30.0f ) return false
		if( ( arrfloat2[0][0] += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		arrfloat2[0][0] = 30.0f 
		System.out.println( arrfloat2[0][0] -= 10.0f )
		System.out.println( arrfloat2[0][0]  )
		if( arrfloat2[0][0] != 20.0f ) return false

		if( ( arrfloat2[0][0] -= 10.0f ) != 10.0f ) return false
		if( ( arrfloat2[0][0] -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	
	
	// p.a
	fn float_member1_var_operation_test()->boolean {
		
		System.out.println("#float_member1_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()

		
		p.afloat = 0.0f 
		p.bfloat = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.afloat = 100.0f * 100.0f 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 10000.0f ) return false
		
		p.afloat = 100.0f  * 100.0f + 1.0f 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 10001.0f ) return false
		
		p.afloat = 100.0f * (100.0f + 1.0f ) 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 10100.0f ) return false
		
		p.afloat = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		p.afloat = 100.0f / 100.0f 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 1.0f ) return false

		p.afloat = 100.0f / 100.0f + 1.0f 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 2.0f ) return false
		
		p.afloat = 100.0f / (99.0f + 1.0f ) 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 1.0f ) return false
		
		
		p.afloat = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 1.0f ) return false

		p.afloat = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		p.afloat = 10.0f % 9.0f 	
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 1.0f ) return false
		
		p.afloat = 10.0f % 9.0f * 100.0f 	
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 100.0f ) return false

		p.afloat = 10.0f % 9.0f + 1.0f 	
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 2.0f ) return false

		p.afloat = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("p.afloat="+p.afloat)
		if( p.afloat != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.afloat = 100.0f 
		if( p.afloat <= 100.0f ) { System.out.println( "p.afloat(=" + p.afloat+") <= 100.0f " ) }
		else return false
		
		if( p.afloat <= 101.0f ) { System.out.println( "p.afloat(=" + p.afloat+") <= 101.0f " ) }
		else return false
		
		if( p.afloat <= 99.0f ) return false
		else { System.out.println( "p.afloat(=" + p.afloat+") <= 99.0f : false" ) }
		
		if( p.afloat >= 100.0f ) { System.out.println( "p.afloat(=" + p.afloat+") >= 100.0f " ) }
		else return false
		
		if( p.afloat >= 99.0f ) { System.out.println( "p.afloat(=" + p.afloat+") <= 99.0f " ) }
		else return false

		if( p.afloat >= 101.0f ) return false
		else { System.out.println( "p.afloat(=" + p.afloat+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		p.afloat = 10.0f 
		p.bfloat = p.afloat++
		if( !( p.afloat == 11.0f && p.bfloat == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		p.afloat = 10.0f 
		p.bfloat = ++p.afloat
		if( !( p.afloat == 11.0f && p.bfloat == 11.0f ) ) return false


		System.out.println("-// postfix --")
		p.afloat = 10.0f 
		p.bfloat = p.afloat--
		if( !( p.afloat == 9.0f && p.bfloat == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		p.afloat = 10.0f 
		p.bfloat = --p.afloat
		if( !( p.afloat == 9.0f && p.bfloat == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		p.afloat = 10.0f * -1.0f 
		System.out.println( "p.afloat="+p.afloat)
		if( p.afloat != -10.0f ) return false
		
		
		p.afloat = 10.0f 
		p.afloat = -p.afloat
		System.out.println( "p.afloat="+p.afloat)
		if( p.afloat != -10.0f ) return false
		
		p.afloat = -10.0f 
		p.afloat = -p.afloat 
		System.out.println( "p.afloat="+p.afloat)
		if( p.afloat != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.afloat = 10.0f 
		System.out.println("p.afloat *= 10.0f ; p.afloat = " + (p.afloat *= 10.0f ) )
		System.out.println( p.afloat  )
		if( p.afloat != 100.0f ) return false

		if( ( p.afloat *= 10.0f ) != 1000.0f ) return false
		if( ( p.afloat *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		p.afloat = 10000.0f 
		System.out.println("p.afloat /= 10.0f ; p.afloat = " + (p.afloat /= 10.0f ) )
		System.out.println( p.afloat  )
		if( p.afloat != 1000.0f ) return false
		
		if( ( p.afloat /= 10.0f ) != 100.0f ) return false
		if( ( p.afloat /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.afloat = 15.0f 
		System.out.println("p.afloat %= 9.0f ; p.afloat = " + (p.afloat %= 9.0f ) )
		System.out.println( p.afloat  )
		if( p.afloat != 6.0f ) return false

		if( ( p.afloat %= 4.0f ) != 2.0f ) return false
		if( ( p.afloat %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.afloat = 10.0f 
		System.out.println( p.afloat += 10.0f )
		System.out.println( p.afloat  )
		if( p.afloat != 20.0f ) return false
		
		if( ( p.afloat += 10.0f ) != 30.0f ) return false
		if( ( p.afloat += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.afloat = 30.0f 
		System.out.println( p.afloat -= 10.0f )
		System.out.println( p.afloat  )
		if( p.afloat != 20.0f ) return false

		if( ( p.afloat -= 10.0f ) != 10.0f ) return false
		if( ( p.afloat -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	
	
	// o.p.a
	fn float_member2_var_operation_test()->boolean {
		
		System.out.println("#float_member2_var_operation_test");
		
		o:TestSuperParentOwner = TestSuperParentOwner()

		
		o.p.afloat = 0.0f 
		o.p.bfloat = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		o.p.afloat = 100.0f * 100.0f 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 10000.0f ) return false
		
		o.p.afloat = 100.0f  * 100.0f + 1.0f 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 10001.0f ) return false
		
		o.p.afloat = 100.0f * (100.0f + 1.0f ) 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 10100.0f ) return false
		
		o.p.afloat = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		o.p.afloat = 100.0f / 100.0f 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 1.0f ) return false

		o.p.afloat = 100.0f / 100.0f + 1.0f 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 2.0f ) return false
		
		o.p.afloat = 100.0f / (99.0f + 1.0f ) 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 1.0f ) return false
		
		
		o.p.afloat = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 1.0f ) return false

		o.p.afloat = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		o.p.afloat = 10.0f % 9.0f 	
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 1.0f ) return false
		
		o.p.afloat = 10.0f % 9.0f * 100.0f 	
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 100.0f ) return false

		o.p.afloat = 10.0f % 9.0f + 1.0f 	
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 2.0f ) return false

		o.p.afloat = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		o.p.afloat = 100.0f 
		if( o.p.afloat <= 100.0f ) { System.out.println( "o.p.afloat(=" + o.p.afloat+") <= 100.0f " ) }
		else return false
		
		if( o.p.afloat <= 101.0f ) { System.out.println( "o.p.afloat(=" + o.p.afloat+") <= 101.0f " ) }
		else return false
		
		if( o.p.afloat <= 99.0f ) return false
		else { System.out.println( "o.p.afloat(=" + o.p.afloat+") <= 99.0f : false" ) }
		
		if( o.p.afloat >= 100.0f ) { System.out.println( "o.p.afloat(=" + o.p.afloat+") >= 100.0f " ) }
		else return false
		
		if( o.p.afloat >= 99.0f ) { System.out.println( "o.p.afloat(=" + o.p.afloat+") <= 99.0f " ) }
		else return false

		if( o.p.afloat >= 101.0f ) return false
		else { System.out.println( "o.p.afloat(=" + o.p.afloat+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		o.p.afloat = 10.0f 
		o.p.bfloat = o.p.afloat++
		if( !( o.p.afloat == 11.0f && o.p.bfloat == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		o.p.afloat = 10.0f 
		o.p.bfloat = ++o.p.afloat
		if( !( o.p.afloat == 11.0f && o.p.bfloat == 11.0f ) ) return false


		System.out.println("-// postfix --")
		o.p.afloat = 10.0f 
		o.p.bfloat = o.p.afloat--
		if( !( o.p.afloat == 9.0f && o.p.bfloat == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		o.p.afloat = 10.0f 
		o.p.bfloat = --o.p.afloat
		if( !( o.p.afloat == 9.0f && o.p.bfloat == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		o.p.afloat = 10.0f * -1.0f 
		System.out.println( "o.p.afloat="+o.p.afloat)
		if( o.p.afloat != -10.0f ) return false
		
		
		o.p.afloat = 10.0f 
		o.p.afloat = -o.p.afloat
		System.out.println( "o.p.afloat="+o.p.afloat)
		if( o.p.afloat != -10.0f ) return false
		
		o.p.afloat = -10.0f 
		o.p.afloat = -o.p.afloat 
		System.out.println( "o.p.afloat="+o.p.afloat)
		if( o.p.afloat != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		o.p.afloat = 10.0f 
		System.out.println("o.p.afloat *= 10.0f ; o.p.afloat = " + (o.p.afloat *= 10.0f ) )
		System.out.println( o.p.afloat  )
		if( o.p.afloat != 100.0f ) return false

		if( ( o.p.afloat *= 10.0f ) != 1000.0f ) return false
		if( ( o.p.afloat *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		o.p.afloat = 10000.0f 
		System.out.println("o.p.afloat /= 10.0f ; o.p.afloat = " + (o.p.afloat /= 10.0f ) )
		System.out.println( o.p.afloat  )
		if( o.p.afloat != 1000.0f ) return false
		
		if( ( o.p.afloat /= 10.0f ) != 100.0f ) return false
		if( ( o.p.afloat /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		o.p.afloat = 15.0f 
		System.out.println("o.p.afloat %= 9.0f ; o.p.afloat = " + (o.p.afloat %= 9.0f ) )
		System.out.println( o.p.afloat  )
		if( o.p.afloat != 6.0f ) return false

		if( ( o.p.afloat %= 4.0f ) != 2.0f ) return false
		if( ( o.p.afloat %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		o.p.afloat = 10.0f 
		System.out.println( o.p.afloat += 10.0f )
		System.out.println( o.p.afloat  )
		if( o.p.afloat != 20.0f ) return false
		
		if( ( o.p.afloat += 10.0f ) != 30.0f ) return false
		if( ( o.p.afloat += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		o.p.afloat = 30.0f 
		System.out.println( o.p.afloat -= 10.0f )
		System.out.println( o.p.afloat  )
		if( o.p.afloat != 20.0f ) return false

		if( ( o.p.afloat -= 10.0f ) != 10.0f ) return false
		if( ( o.p.afloat -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	
	
	// p.a[0]
	fn float_member1_d1_map_var_operation_test()->boolean {
		
		System.out.println("#float_member1_d1_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()

		
		p.arrfloat_1[0] = 0.0f 
		p.arrfloat_1[1] = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.arrfloat_1[0] = 100.0f * 100.0f 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 10000.0f ) return false
		
		p.arrfloat_1[0] = 100.0f  * 100.0f + 1.0f 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 10001.0f ) return false
		
		p.arrfloat_1[0] = 100.0f * (100.0f + 1.0f ) 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 10100.0f ) return false
		
		p.arrfloat_1[0] = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		p.arrfloat_1[0] = 100.0f / 100.0f 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 1.0f ) return false

		p.arrfloat_1[0] = 100.0f / 100.0f + 1.0f 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 2.0f ) return false
		
		p.arrfloat_1[0] = 100.0f / (99.0f + 1.0f ) 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 1.0f ) return false
		
		
		p.arrfloat_1[0] = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 1.0f ) return false

		p.arrfloat_1[0] = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		p.arrfloat_1[0] = 10.0f % 9.0f 	
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 1.0f ) return false
		
		p.arrfloat_1[0] = 10.0f % 9.0f * 100.0f 	
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 100.0f ) return false

		p.arrfloat_1[0] = 10.0f % 9.0f + 1.0f 	
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 2.0f ) return false

		p.arrfloat_1[0] = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.arrfloat_1[0] = 100.0f 
		if( p.arrfloat_1[0] <= 100.0f ) { System.out.println( "p.arrfloat_1[0](=" + p.arrfloat_1[0]+") <= 100.0f " ) }
		else return false
		
		if( p.arrfloat_1[0] <= 101.0f ) { System.out.println( "p.arrfloat_1[0](=" + p.arrfloat_1[0]+") <= 101.0f " ) }
		else return false
		
		if( p.arrfloat_1[0] <= 99.0f ) return false
		else { System.out.println( "p.arrfloat_1[0](=" + p.arrfloat_1[0]+") <= 99.0f : false" ) }
		
		if( p.arrfloat_1[0] >= 100.0f ) { System.out.println( "p.arrfloat_1[0](=" + p.arrfloat_1[0]+") >= 100.0f " ) }
		else return false
		
		if( p.arrfloat_1[0] >= 99.0f ) { System.out.println( "p.arrfloat_1[0](=" + p.arrfloat_1[0]+") <= 99.0f " ) }
		else return false

		if( p.arrfloat_1[0] >= 101.0f ) return false
		else { System.out.println( "p.arrfloat_1[0](=" + p.arrfloat_1[0]+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		p.arrfloat_1[0] = 10.0f 
		p.arrfloat_1[1] = p.arrfloat_1[0]++
		if( !( p.arrfloat_1[0] == 11.0f && p.arrfloat_1[1] == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		p.arrfloat_1[0] = 10.0f 
		p.arrfloat_1[1] = ++p.arrfloat_1[0]
		if( !( p.arrfloat_1[0] == 11.0f && p.arrfloat_1[1] == 11.0f ) ) return false


		System.out.println("-// postfix --")
		p.arrfloat_1[0] = 10.0f 
		p.arrfloat_1[1] = p.arrfloat_1[0]--
		if( !( p.arrfloat_1[0] == 9.0f && p.arrfloat_1[1] == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		p.arrfloat_1[0] = 10.0f 
		p.arrfloat_1[1] = --p.arrfloat_1[0]
		if( !( p.arrfloat_1[0] == 9.0f && p.arrfloat_1[1] == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		p.arrfloat_1[0] = 10.0f * -1.0f 
		System.out.println( "p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != -10.0f ) return false
		
		
		p.arrfloat_1[0] = 10.0f 
		p.arrfloat_1[0] = -p.arrfloat_1[0]
		System.out.println( "p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != -10.0f ) return false
		
		p.arrfloat_1[0] = -10.0f 
		p.arrfloat_1[0] = -p.arrfloat_1[0] 
		System.out.println( "p.arrfloat_1[0]="+p.arrfloat_1[0])
		if( p.arrfloat_1[0] != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.arrfloat_1[0] = 10.0f 
		System.out.println("p.arrfloat_1[0] *= 10.0f ; p.arrfloat_1[0] = " + (p.arrfloat_1[0] *= 10.0f ) )
		System.out.println( p.arrfloat_1[0]  )
		if( p.arrfloat_1[0] != 100.0f ) return false

		if( ( p.arrfloat_1[0] *= 10.0f ) != 1000.0f ) return false
		if( ( p.arrfloat_1[0] *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		p.arrfloat_1[0] = 10000.0f 
		System.out.println("p.arrfloat_1[0] /= 10.0f ; p.arrfloat_1[0] = " + (p.arrfloat_1[0] /= 10.0f ) )
		System.out.println( p.arrfloat_1[0]  )
		if( p.arrfloat_1[0] != 1000.0f ) return false
		
		if( ( p.arrfloat_1[0] /= 10.0f ) != 100.0f ) return false
		if( ( p.arrfloat_1[0] /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.arrfloat_1[0] = 15.0f 
		System.out.println("p.arrfloat_1[0] %= 9.0f ; p.arrfloat_1[0] = " + (p.arrfloat_1[0] %= 9.0f ) )
		System.out.println( p.arrfloat_1[0]  )
		if( p.arrfloat_1[0] != 6.0f ) return false

		if( ( p.arrfloat_1[0] %= 4.0f ) != 2.0f ) return false
		if( ( p.arrfloat_1[0] %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.arrfloat_1[0] = 10.0f 
		System.out.println( p.arrfloat_1[0] += 10.0f )
		System.out.println( p.arrfloat_1[0]  )
		if( p.arrfloat_1[0] != 20.0f ) return false
		
		if( ( p.arrfloat_1[0] += 10.0f ) != 30.0f ) return false
		if( ( p.arrfloat_1[0] += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.arrfloat_1[0] = 30.0f 
		System.out.println( p.arrfloat_1[0] -= 10.0f )
		System.out.println( p.arrfloat_1[0]  )
		if( p.arrfloat_1[0] != 20.0f ) return false

		if( ( p.arrfloat_1[0] -= 10.0f ) != 10.0f ) return false
		if( ( p.arrfloat_1[0] -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	
	
	// p.singleton_a[0]
	fn float_member_d1_singoletone_map_var_operation_test()->boolean {
		
		System.out.println("#float_member_d1_singoletone_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()

		
		p.static_arrfloat_1[0] = 0.0f 
		p.static_arrfloat_1[1] = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.static_arrfloat_1[0] = 100.0f * 100.0f 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 10000.0f ) return false
		
		p.static_arrfloat_1[0] = 100.0f  * 100.0f + 1.0f 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 10001.0f ) return false
		
		p.static_arrfloat_1[0] = 100.0f * (100.0f + 1.0f ) 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 10100.0f ) return false
		
		p.static_arrfloat_1[0] = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		p.static_arrfloat_1[0] = 100.0f / 100.0f 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 1.0f ) return false

		p.static_arrfloat_1[0] = 100.0f / 100.0f + 1.0f 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 2.0f ) return false
		
		p.static_arrfloat_1[0] = 100.0f / (99.0f + 1.0f ) 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 1.0f ) return false
		
		
		p.static_arrfloat_1[0] = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 1.0f ) return false

		p.static_arrfloat_1[0] = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		p.static_arrfloat_1[0] = 10.0f % 9.0f 	
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 1.0f ) return false
		
		p.static_arrfloat_1[0] = 10.0f % 9.0f * 100.0f 	
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 100.0f ) return false

		p.static_arrfloat_1[0] = 10.0f % 9.0f + 1.0f 	
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 2.0f ) return false

		p.static_arrfloat_1[0] = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.static_arrfloat_1[0] = 100.0f 
		if( p.static_arrfloat_1[0] <= 100.0f ) { System.out.println( "p.static_arrfloat_1[0](=" + p.static_arrfloat_1[0]+") <= 100.0f " ) }
		else return false
		
		if( p.static_arrfloat_1[0] <= 101.0f ) { System.out.println( "p.static_arrfloat_1[0](=" + p.static_arrfloat_1[0]+") <= 101.0f " ) }
		else return false
		
		if( p.static_arrfloat_1[0] <= 99.0f ) return false
		else { System.out.println( "p.static_arrfloat_1[0](=" + p.static_arrfloat_1[0]+") <= 99.0f : false" ) }
		
		if( p.static_arrfloat_1[0] >= 100.0f ) { System.out.println( "p.static_arrfloat_1[0](=" + p.static_arrfloat_1[0]+") >= 100.0f " ) }
		else return false
		
		if( p.static_arrfloat_1[0] >= 99.0f ) { System.out.println( "p.static_arrfloat_1[0](=" + p.static_arrfloat_1[0]+") <= 99.0f " ) }
		else return false

		if( p.static_arrfloat_1[0] >= 101.0f ) return false
		else { System.out.println( "p.static_arrfloat_1[0](=" + p.static_arrfloat_1[0]+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		p.static_arrfloat_1[0] = 10.0f 
		p.static_arrfloat_1[1] = p.static_arrfloat_1[0]++
		if( !( p.static_arrfloat_1[0] == 11.0f && p.static_arrfloat_1[1] == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		p.static_arrfloat_1[0] = 10.0f 
		p.static_arrfloat_1[1] = ++p.static_arrfloat_1[0]
		if( !( p.static_arrfloat_1[0] == 11.0f && p.static_arrfloat_1[1] == 11.0f ) ) return false


		System.out.println("-// postfix --")
		p.static_arrfloat_1[0] = 10.0f 
		p.static_arrfloat_1[1] = p.static_arrfloat_1[0]--
		if( !( p.static_arrfloat_1[0] == 9.0f && p.static_arrfloat_1[1] == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		p.static_arrfloat_1[0] = 10.0f 
		p.static_arrfloat_1[1] = --p.static_arrfloat_1[0]
		if( !( p.static_arrfloat_1[0] == 9.0f && p.static_arrfloat_1[1] == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		p.static_arrfloat_1[0] = 10.0f * -1.0f 
		System.out.println( "p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != -10.0f ) return false
		
		
		p.static_arrfloat_1[0] = 10.0f 
		p.static_arrfloat_1[0] = -p.static_arrfloat_1[0]
		System.out.println( "p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != -10.0f ) return false
		
		p.static_arrfloat_1[0] = -10.0f 
		p.static_arrfloat_1[0] = -p.static_arrfloat_1[0] 
		System.out.println( "p.static_arrfloat_1[0]="+p.static_arrfloat_1[0])
		if( p.static_arrfloat_1[0] != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.static_arrfloat_1[0] = 10.0f 
		System.out.println("p.static_arrfloat_1[0] *= 10.0f ; p.static_arrfloat_1[0] = " + (p.static_arrfloat_1[0] *= 10.0f ) )
		System.out.println( p.static_arrfloat_1[0]  )
		if( p.static_arrfloat_1[0] != 100.0f ) return false

		if( ( p.static_arrfloat_1[0] *= 10.0f ) != 1000.0f ) return false
		if( ( p.static_arrfloat_1[0] *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		p.static_arrfloat_1[0] = 10000.0f 
		System.out.println("p.static_arrfloat_1[0] /= 10.0f ; p.static_arrfloat_1[0] = " + (p.static_arrfloat_1[0] /= 10.0f ) )
		System.out.println( p.static_arrfloat_1[0]  )
		if( p.static_arrfloat_1[0] != 1000.0f ) return false
		
		if( ( p.static_arrfloat_1[0] /= 10.0f ) != 100.0f ) return false
		if( ( p.static_arrfloat_1[0] /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.static_arrfloat_1[0] = 15.0f 
		System.out.println("p.static_arrfloat_1[0] %= 9.0f ; p.static_arrfloat_1[0] = " + (p.static_arrfloat_1[0] %= 9.0f ) )
		System.out.println( p.static_arrfloat_1[0]  )
		if( p.static_arrfloat_1[0] != 6.0f ) return false

		if( ( p.static_arrfloat_1[0] %= 4.0f ) != 2.0f ) return false
		if( ( p.static_arrfloat_1[0] %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.static_arrfloat_1[0] = 10.0f 
		System.out.println( p.static_arrfloat_1[0] += 10.0f )
		System.out.println( p.static_arrfloat_1[0]  )
		if( p.static_arrfloat_1[0] != 20.0f ) return false
		
		if( ( p.static_arrfloat_1[0] += 10.0f ) != 30.0f ) return false
		if( ( p.static_arrfloat_1[0] += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.static_arrfloat_1[0] = 30.0f 
		System.out.println( p.static_arrfloat_1[0] -= 10.0f )
		System.out.println( p.static_arrfloat_1[0]  )
		if( p.static_arrfloat_1[0] != 20.0f ) return false

		if( ( p.static_arrfloat_1[0] -= 10.0f ) != 10.0f ) return false
		if( ( p.static_arrfloat_1[0] -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	
	
	//p[0].a
	fn float_member1_var_in_object_map_operation_test()->boolean {
		
		System.out.println("#float_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		
		parr[0].afloat = 0.0f 
		parr[0].bfloat = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].afloat = 100.0f * 100.0f 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 10000.0f ) return false
		
		parr[0].afloat = 100.0f  * 100.0f + 1.0f 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 10001.0f ) return false
		
		parr[0].afloat = 100.0f * (100.0f + 1.0f ) 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 10100.0f ) return false
		
		parr[0].afloat = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		parr[0].afloat = 100.0f / 100.0f 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 1.0f ) return false

		parr[0].afloat = 100.0f / 100.0f + 1.0f 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 2.0f ) return false
		
		parr[0].afloat = 100.0f / (99.0f + 1.0f ) 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 1.0f ) return false
		
		
		parr[0].afloat = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 1.0f ) return false

		parr[0].afloat = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].afloat = 10.0f % 9.0f 	
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 1.0f ) return false
		
		parr[0].afloat = 10.0f % 9.0f * 100.0f 	
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 100.0f ) return false

		parr[0].afloat = 10.0f % 9.0f + 1.0f 	
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 2.0f ) return false

		parr[0].afloat = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].afloat = 100.0f 
		if( parr[0].afloat <= 100.0f ) { System.out.println( "parr[0].afloat(=" + parr[0].afloat+") <= 100.0f " ) }
		else return false
		
		if( parr[0].afloat <= 101.0f ) { System.out.println( "parr[0].afloat(=" + parr[0].afloat+") <= 101.0f " ) }
		else return false
		
		if( parr[0].afloat <= 99.0f ) return false
		else { System.out.println( "parr[0].afloat(=" + parr[0].afloat+") <= 99.0f : false" ) }
		
		if( parr[0].afloat >= 100.0f ) { System.out.println( "parr[0].afloat(=" + parr[0].afloat+") >= 100.0f " ) }
		else return false
		
		if( parr[0].afloat >= 99.0f ) { System.out.println( "parr[0].afloat(=" + parr[0].afloat+") <= 99.0f " ) }
		else return false

		if( parr[0].afloat >= 101.0f ) return false
		else { System.out.println( "parr[0].afloat(=" + parr[0].afloat+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].afloat = 10.0f 
		parr[0].bfloat = parr[0].afloat++
		if( !( parr[0].afloat == 11.0f && parr[0].bfloat == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		parr[0].afloat = 10.0f 
		parr[0].bfloat = ++parr[0].afloat
		if( !( parr[0].afloat == 11.0f && parr[0].bfloat == 11.0f ) ) return false


		System.out.println("-// postfix --")
		parr[0].afloat = 10.0f 
		parr[0].bfloat = parr[0].afloat--
		if( !( parr[0].afloat == 9.0f && parr[0].bfloat == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].afloat = 10.0f 
		parr[0].bfloat = --parr[0].afloat
		if( !( parr[0].afloat == 9.0f && parr[0].bfloat == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].afloat = 10.0f * -1.0f 
		System.out.println( "parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != -10.0f ) return false
		
		
		parr[0].afloat = 10.0f 
		parr[0].afloat = -parr[0].afloat
		System.out.println( "parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != -10.0f ) return false
		
		parr[0].afloat = -10.0f 
		parr[0].afloat = -parr[0].afloat 
		System.out.println( "parr[0].afloat="+parr[0].afloat)
		if( parr[0].afloat != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].afloat = 10.0f 
		System.out.println("parr[0].afloat *= 10.0f ; parr[0].afloat = " + (parr[0].afloat *= 10.0f ) )
		System.out.println( parr[0].afloat  )
		if( parr[0].afloat != 100.0f ) return false

		if( ( parr[0].afloat *= 10.0f ) != 1000.0f ) return false
		if( ( parr[0].afloat *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].afloat = 10000.0f 
		System.out.println("parr[0].afloat /= 10.0f ; parr[0].afloat = " + (parr[0].afloat /= 10.0f ) )
		System.out.println( parr[0].afloat  )
		if( parr[0].afloat != 1000.0f ) return false
		
		if( ( parr[0].afloat /= 10.0f ) != 100.0f ) return false
		if( ( parr[0].afloat /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].afloat = 15.0f 
		System.out.println("parr[0].afloat %= 9.0f ; parr[0].afloat = " + (parr[0].afloat %= 9.0f ) )
		System.out.println( parr[0].afloat  )
		if( parr[0].afloat != 6.0f ) return false

		if( ( parr[0].afloat %= 4.0f ) != 2.0f ) return false
		if( ( parr[0].afloat %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].afloat = 10.0f 
		System.out.println( parr[0].afloat += 10.0f )
		System.out.println( parr[0].afloat  )
		if( parr[0].afloat != 20.0f ) return false
		
		if( ( parr[0].afloat += 10.0f ) != 30.0f ) return false
		if( ( parr[0].afloat += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].afloat = 30.0f 
		System.out.println( parr[0].afloat -= 10.0f )
		System.out.println( parr[0].afloat  )
		if( parr[0].afloat != 20.0f ) return false

		if( ( parr[0].afloat -= 10.0f ) != 10.0f ) return false
		if( ( parr[0].afloat -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	
	
	//p[0].singleton_a
	fn float_singleton_member1_var_in_object_map_operation_test()->boolean {
		
		System.out.println("#float_singleton_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		
		parr[0].afloat_static = 0.0f 
		parr[0].bfloat_static = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].afloat_static = 100.0f * 100.0f 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 10000.0f ) return false
		
		parr[0].afloat_static = 100.0f  * 100.0f + 1.0f 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 10001.0f ) return false
		
		parr[0].afloat_static = 100.0f * (100.0f + 1.0f ) 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 10100.0f ) return false
		
		parr[0].afloat_static = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		parr[0].afloat_static = 100.0f / 100.0f 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 1.0f ) return false

		parr[0].afloat_static = 100.0f / 100.0f + 1.0f 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 2.0f ) return false
		
		parr[0].afloat_static = 100.0f / (99.0f + 1.0f ) 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 1.0f ) return false
		
		
		parr[0].afloat_static = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 1.0f ) return false

		parr[0].afloat_static = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].afloat_static = 10.0f % 9.0f 	
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 1.0f ) return false
		
		parr[0].afloat_static = 10.0f % 9.0f * 100.0f 	
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 100.0f ) return false

		parr[0].afloat_static = 10.0f % 9.0f + 1.0f 	
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 2.0f ) return false

		parr[0].afloat_static = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].afloat_static = 100.0f 
		if( parr[0].afloat_static <= 100.0f ) { System.out.println( "parr[0].afloat_static(=" + parr[0].afloat_static+") <= 100.0f " ) }
		else return false
		
		if( parr[0].afloat_static <= 101.0f ) { System.out.println( "parr[0].afloat_static(=" + parr[0].afloat_static+") <= 101.0f " ) }
		else return false
		
		if( parr[0].afloat_static <= 99.0f ) return false
		else { System.out.println( "parr[0].afloat_static(=" + parr[0].afloat_static+") <= 99.0f : false" ) }
		
		if( parr[0].afloat_static >= 100.0f ) { System.out.println( "parr[0].afloat_static(=" + parr[0].afloat_static+") >= 100.0f " ) }
		else return false
		
		if( parr[0].afloat_static >= 99.0f ) { System.out.println( "parr[0].afloat_static(=" + parr[0].afloat_static+") <= 99.0f " ) }
		else return false

		if( parr[0].afloat_static >= 101.0f ) return false
		else { System.out.println( "parr[0].afloat_static(=" + parr[0].afloat_static+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].afloat_static = 10.0f 
		parr[0].bfloat_static = parr[0].afloat_static++
		if( !( parr[0].afloat_static == 11.0f && parr[0].bfloat_static == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		parr[0].afloat_static = 10.0f 
		parr[0].bfloat_static = ++parr[0].afloat_static
		if( !( parr[0].afloat_static == 11.0f && parr[0].bfloat_static == 11.0f ) ) return false


		System.out.println("-// postfix --")
		parr[0].afloat_static = 10.0f 
		parr[0].bfloat_static = parr[0].afloat_static--
		if( !( parr[0].afloat_static == 9.0f && parr[0].bfloat_static == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].afloat_static = 10.0f 
		parr[0].bfloat_static = --parr[0].afloat_static
		if( !( parr[0].afloat_static == 9.0f && parr[0].bfloat_static == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].afloat_static = 10.0f * -1.0f 
		System.out.println( "parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != -10.0f ) return false
		
		
		parr[0].afloat_static = 10.0f 
		parr[0].afloat_static = -parr[0].afloat_static
		System.out.println( "parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != -10.0f ) return false
		
		parr[0].afloat_static = -10.0f 
		parr[0].afloat_static = -parr[0].afloat_static 
		System.out.println( "parr[0].afloat_static="+parr[0].afloat_static)
		if( parr[0].afloat_static != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].afloat_static = 10.0f 
		System.out.println("parr[0].afloat_static *= 10.0f ; parr[0].afloat_static = " + (parr[0].afloat_static *= 10.0f ) )
		System.out.println( parr[0].afloat_static  )
		if( parr[0].afloat_static != 100.0f ) return false

		if( ( parr[0].afloat_static *= 10.0f ) != 1000.0f ) return false
		if( ( parr[0].afloat_static *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].afloat_static = 10000.0f 
		System.out.println("parr[0].afloat_static /= 10.0f ; parr[0].afloat_static = " + (parr[0].afloat_static /= 10.0f ) )
		System.out.println( parr[0].afloat_static  )
		if( parr[0].afloat_static != 1000.0f ) return false
		
		if( ( parr[0].afloat_static /= 10.0f ) != 100.0f ) return false
		if( ( parr[0].afloat_static /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].afloat_static = 15.0f 
		System.out.println("parr[0].afloat_static %= 9.0f ; parr[0].afloat_static = " + (parr[0].afloat_static %= 9.0f ) )
		System.out.println( parr[0].afloat_static  )
		if( parr[0].afloat_static != 6.0f ) return false

		if( ( parr[0].afloat_static %= 4.0f ) != 2.0f ) return false
		if( ( parr[0].afloat_static %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].afloat_static = 10.0f 
		System.out.println( parr[0].afloat_static += 10.0f )
		System.out.println( parr[0].afloat_static  )
		if( parr[0].afloat_static != 20.0f ) return false
		
		if( ( parr[0].afloat_static += 10.0f ) != 30.0f ) return false
		if( ( parr[0].afloat_static += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].afloat_static = 30.0f 
		System.out.println( parr[0].afloat_static -= 10.0f )
		System.out.println( parr[0].afloat_static  )
		if( parr[0].afloat_static != 20.0f ) return false

		if( ( parr[0].afloat_static -= 10.0f ) != 10.0f ) return false
		if( ( parr[0].afloat_static -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	
	
	// p[0].a[0]
	fn float_d1_map_in_object_map_operation_test()->boolean {
		
		System.out.println("#float_d1_map_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		
		parr[0].arrfloat_1[0] = 0.0f 
		parr[0].arrfloat_1[1] = 0.0f 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].arrfloat_1[0] = 100.0f * 100.0f 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 10000.0f ) return false
		
		parr[0].arrfloat_1[0] = 100.0f  * 100.0f + 1.0f 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 10001.0f ) return false
		
		parr[0].arrfloat_1[0] = 100.0f * (100.0f + 1.0f ) 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 10100.0f ) return false
		
		parr[0].arrfloat_1[0] = 100.0f * (100.0f + 10.0f * 10.0f ) 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 20000.0f ) return false
		
		// division
		System.out.println("-// division")

		parr[0].arrfloat_1[0] = 100.0f / 100.0f 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 1.0f ) return false

		parr[0].arrfloat_1[0] = 100.0f / 100.0f + 1.0f 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 2.0f ) return false
		
		parr[0].arrfloat_1[0] = 100.0f / (99.0f + 1.0f ) 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 1.0f ) return false
		
		
		parr[0].arrfloat_1[0] = 100.0f / (99.0f + 10.0f / 10.0f ) 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 1.0f ) return false

		parr[0].arrfloat_1[0] = 100.0f * 100.0f / 1000.0f + 100.0f / 100.0f * 10.0f 
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 20.0f ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].arrfloat_1[0] = 10.0f % 9.0f 	
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 1.0f ) return false
		
		parr[0].arrfloat_1[0] = 10.0f % 9.0f * 100.0f 	
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 100.0f ) return false

		parr[0].arrfloat_1[0] = 10.0f % 9.0f + 1.0f 	
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 2.0f ) return false

		parr[0].arrfloat_1[0] = (5.0f + 5.0f ) % 9.0f + 1.0f 	
		System.out.println("parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 2.0f ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].arrfloat_1[0] = 100.0f 
		if( parr[0].arrfloat_1[0] <= 100.0f ) { System.out.println( "parr[0].arrfloat_1[0](=" + parr[0].arrfloat_1[0]+") <= 100.0f " ) }
		else return false
		
		if( parr[0].arrfloat_1[0] <= 101.0f ) { System.out.println( "parr[0].arrfloat_1[0](=" + parr[0].arrfloat_1[0]+") <= 101.0f " ) }
		else return false
		
		if( parr[0].arrfloat_1[0] <= 99.0f ) return false
		else { System.out.println( "parr[0].arrfloat_1[0](=" + parr[0].arrfloat_1[0]+") <= 99.0f : false" ) }
		
		if( parr[0].arrfloat_1[0] >= 100.0f ) { System.out.println( "parr[0].arrfloat_1[0](=" + parr[0].arrfloat_1[0]+") >= 100.0f " ) }
		else return false
		
		if( parr[0].arrfloat_1[0] >= 99.0f ) { System.out.println( "parr[0].arrfloat_1[0](=" + parr[0].arrfloat_1[0]+") <= 99.0f " ) }
		else return false

		if( parr[0].arrfloat_1[0] >= 101.0f ) return false
		else { System.out.println( "parr[0].arrfloat_1[0](=" + parr[0].arrfloat_1[0]+") <= 101.0f : false" ) }
		
		
	
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].arrfloat_1[0] = 10.0f 
		parr[0].arrfloat_1[1] = parr[0].arrfloat_1[0]++
		if( !( parr[0].arrfloat_1[0] == 11.0f && parr[0].arrfloat_1[1] == 10.0f ) ) return false

		
		System.out.println("-// unary ++")
		parr[0].arrfloat_1[0] = 10.0f 
		parr[0].arrfloat_1[1] = ++parr[0].arrfloat_1[0]
		if( !( parr[0].arrfloat_1[0] == 11.0f && parr[0].arrfloat_1[1] == 11.0f ) ) return false


		System.out.println("-// postfix --")
		parr[0].arrfloat_1[0] = 10.0f 
		parr[0].arrfloat_1[1] = parr[0].arrfloat_1[0]--
		if( !( parr[0].arrfloat_1[0] == 9.0f && parr[0].arrfloat_1[1] == 10.0f ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].arrfloat_1[0] = 10.0f 
		parr[0].arrfloat_1[1] = --parr[0].arrfloat_1[0]
		if( !( parr[0].arrfloat_1[0] == 9.0f && parr[0].arrfloat_1[1] == 9.0f ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].arrfloat_1[0] = 10.0f * -1.0f 
		System.out.println( "parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != -10.0f ) return false
		
		
		parr[0].arrfloat_1[0] = 10.0f 
		parr[0].arrfloat_1[0] = -parr[0].arrfloat_1[0]
		System.out.println( "parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != -10.0f ) return false
		
		parr[0].arrfloat_1[0] = -10.0f 
		parr[0].arrfloat_1[0] = -parr[0].arrfloat_1[0] 
		System.out.println( "parr[0].arrfloat_1[0]="+parr[0].arrfloat_1[0])
		if( parr[0].arrfloat_1[0] != 10.0f ) return false

		

		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].arrfloat_1[0] = 10.0f 
		System.out.println("parr[0].arrfloat_1[0] *= 10.0f ; parr[0].arrfloat_1[0] = " + (parr[0].arrfloat_1[0] *= 10.0f ) )
		System.out.println( parr[0].arrfloat_1[0]  )
		if( parr[0].arrfloat_1[0] != 100.0f ) return false

		if( ( parr[0].arrfloat_1[0] *= 10.0f ) != 1000.0f ) return false
		if( ( parr[0].arrfloat_1[0] *= -10.0f ) != -10000.0f ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].arrfloat_1[0] = 10000.0f 
		System.out.println("parr[0].arrfloat_1[0] /= 10.0f ; parr[0].arrfloat_1[0] = " + (parr[0].arrfloat_1[0] /= 10.0f ) )
		System.out.println( parr[0].arrfloat_1[0]  )
		if( parr[0].arrfloat_1[0] != 1000.0f ) return false
		
		if( ( parr[0].arrfloat_1[0] /= 10.0f ) != 100.0f ) return false
		if( ( parr[0].arrfloat_1[0] /= -10.0f ) != -10.0f ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].arrfloat_1[0] = 15.0f 
		System.out.println("parr[0].arrfloat_1[0] %= 9.0f ; parr[0].arrfloat_1[0] = " + (parr[0].arrfloat_1[0] %= 9.0f ) )
		System.out.println( parr[0].arrfloat_1[0]  )
		if( parr[0].arrfloat_1[0] != 6.0f ) return false

		if( ( parr[0].arrfloat_1[0] %= 4.0f ) != 2.0f ) return false
		if( ( parr[0].arrfloat_1[0] %= 2.0f ) != 0.0f ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].arrfloat_1[0] = 10.0f 
		System.out.println( parr[0].arrfloat_1[0] += 10.0f )
		System.out.println( parr[0].arrfloat_1[0]  )
		if( parr[0].arrfloat_1[0] != 20.0f ) return false
		
		if( ( parr[0].arrfloat_1[0] += 10.0f ) != 30.0f ) return false
		if( ( parr[0].arrfloat_1[0] += -10.0f ) != 20.0f ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].arrfloat_1[0] = 30.0f 
		System.out.println( parr[0].arrfloat_1[0] -= 10.0f )
		System.out.println( parr[0].arrfloat_1[0]  )
		if( parr[0].arrfloat_1[0] != 20.0f ) return false

		if( ( parr[0].arrfloat_1[0] -= 10.0f ) != 10.0f ) return false
		if( ( parr[0].arrfloat_1[0] -= -10.0f ) != 20.0f ) return false
	
		
		return true

	}	

		

	// double type 
	// a
	fn double_var_operation_test()->boolean {
		
		System.out.println("#double_var_operation_test");
		
		adouble:double = 0.0d 
		bdouble:double = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		adouble = 100.0d * 100.0d 
		System.out.println("adouble="+adouble)
		if( adouble != 10000.0d ) return false
		
		adouble = 100.0d  * 100.0d + 1.0d 
		System.out.println("adouble="+adouble)
		if( adouble != 10001.0d ) return false
		
		adouble = 100.0d * (100.0d + 1.0d ) 
		System.out.println("adouble="+adouble)
		if( adouble != 10100.0d ) return false
		
		adouble = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("adouble="+adouble)
		if( adouble != 20000.0d ) return false

		// division
		System.out.println("-// division")

		adouble = 100.0d / 100.0d 
		System.out.println("adouble="+adouble)
		if( adouble != 1.0d ) return false

		adouble = 100.0d / 100.0d + 1.0d 
		System.out.println("adouble="+adouble)
		if( adouble != 2.0d ) return false
		
		adouble = 100.0d / (99.0d + 1.0d ) 
		System.out.println("adouble="+adouble)
		if( adouble != 1.0d ) return false
		
		
		adouble = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("adouble="+adouble)
		if( adouble != 1.0d ) return false

		adouble = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("adouble="+adouble)
		if( adouble != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		adouble = 10.0d % 9.0d 	
		System.out.println("adouble="+adouble)
		if( adouble != 1.0d ) return false
		
		adouble = 10.0d % 9.0d * 100.0d 	
		System.out.println("adouble="+adouble)
		if( adouble != 100.0d ) return false

		adouble = 10.0d % 9.0d + 1.0d 	
		System.out.println("adouble="+adouble)
		if( adouble != 2.0d ) return false

		adouble = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("adouble="+adouble)
		if( adouble != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		adouble = 100.0d 
		if( adouble <= 100.0d ) { System.out.println( "adouble(=" + adouble+") <= 100.0d " ) }
		else return false
		
		if( adouble <= 101.0d ) { System.out.println( "adouble(=" + adouble+") <= 101.0d " ) }
		else return false
		
		if( adouble <= 99.0d ) return false
		else { System.out.println( "adouble(=" + adouble+") <= 99.0d : false" ) }
		
		if( adouble >= 100.0d ) { System.out.println( "adouble(=" + adouble+") >= 100.0d " ) }
		else return false
		
		if( adouble >= 99.0d ) { System.out.println( "adouble(=" + adouble+") <= 99.0d " ) }
		else return false

		if( adouble >= 101.0d ) return false
		else { System.out.println( "adouble(=" + adouble+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		adouble = 10.0d 
		bdouble = adouble++
		if( !( adouble == 11.0d && bdouble == 10.0d ) ) return false

		System.out.println("-// unary ++")
		adouble = 10.0d 
		bdouble = ++adouble
		if( !( adouble == 11.0d && bdouble == 11.0d ) ) return false


		System.out.println("-// postfix --")
		adouble = 10.0d 
		bdouble = adouble--
		if( !( adouble == 9.0d && bdouble == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		adouble = 10.0d 
		bdouble = --adouble
		if( !( adouble == 9.0d && bdouble == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		adouble = 10.0d * -1.0d 
		System.out.println( "adouble="+adouble)
		if( adouble != -10.0d ) return false
		
		
		adouble = 10.0d 
		adouble = -adouble
		System.out.println( "adouble="+adouble)
		if( adouble != -10.0d ) return false
		
		adouble = -10.0d 
		adouble = -adouble 
		System.out.println( "adouble="+adouble)
		if( adouble != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		adouble = 10.0d 
		System.out.println("adouble *= 10.0d ; adouble = " + (adouble *= 10.0d ) )
		System.out.println( adouble  )
		if( adouble != 100.0d ) return false

		if( ( adouble *= 10.0d ) != 1000.0d ) return false
		if( ( adouble *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		adouble = 10000.0d 
		System.out.println("adouble /= 10.0d ; adouble = " + (adouble /= 10.0d ) )
		System.out.println( adouble  )
		if( adouble != 1000.0d ) return false
		
		if( ( adouble /= 10.0d ) != 100.0d ) return false
		if( ( adouble /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		adouble = 15.0d 
		System.out.println("adouble %= 9.0d ; adouble = " + (adouble %= 9.0d ) )
		System.out.println( adouble  )
		if( adouble != 6.0d ) return false

		if( ( adouble %= 4.0d ) != 2.0d ) return false
		if( ( adouble %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		adouble = 10.0d 
		System.out.println( adouble += 10.0d )
		System.out.println( adouble  )
		if( adouble != 20.0d ) return false
		
		if( ( adouble += 10.0d ) != 30.0d ) return false
		if( ( adouble += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		adouble = 30.0d 
		System.out.println( adouble -= 10.0d )
		System.out.println( adouble  )
		if( adouble != 20.0d ) return false

		if( ( adouble -= 10.0d ) != 10.0d ) return false
		if( ( adouble -= -10.0d ) != 20.0d ) return false
	
		return true

	}	

	// a[0]
	fn double_d1_map_operation_test()->boolean {
		
		System.out.println("#double_d1_map_operation_test");
		
		arrdouble:double[] = double[100]
		
		arrdouble[0] = 0.0d 
		arrdouble[1] = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		arrdouble[0] = 100.0d * 100.0d 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 10000.0d ) return false
		
		arrdouble[0] = 100.0d  * 100.0d + 1.0d 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 10001.0d ) return false
		
		arrdouble[0] = 100.0d * (100.0d + 1.0d ) 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 10100.0d ) return false
		
		arrdouble[0] = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 20000.0d ) return false

		// division
		System.out.println("-// division")

		arrdouble[0] = 100.0d / 100.0d 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 1.0d ) return false

		arrdouble[0] = 100.0d / 100.0d + 1.0d 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 2.0d ) return false
		
		arrdouble[0] = 100.0d / (99.0d + 1.0d ) 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 1.0d ) return false
		
		
		arrdouble[0] = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 1.0d ) return false

		arrdouble[0] = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		arrdouble[0] = 10.0d % 9.0d 	
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 1.0d ) return false
		
		arrdouble[0] = 10.0d % 9.0d * 100.0d 	
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 100.0d ) return false

		arrdouble[0] = 10.0d % 9.0d + 1.0d 	
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 2.0d ) return false

		arrdouble[0] = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		arrdouble[0] = 100.0d 
		if( arrdouble[0] <= 100.0d ) { System.out.println( "arrdouble[0](=" + arrdouble[0]+") <= 100.0d " ) }
		else return false
		
		if( arrdouble[0] <= 101.0d ) { System.out.println( "arrdouble[0](=" + arrdouble[0]+") <= 101.0d " ) }
		else return false
		
		if( arrdouble[0] <= 99.0d ) return false
		else { System.out.println( "arrdouble[0](=" + arrdouble[0]+") <= 99.0d : false" ) }
		
		if( arrdouble[0] >= 100.0d ) { System.out.println( "arrdouble[0](=" + arrdouble[0]+") >= 100.0d " ) }
		else return false
		
		if( arrdouble[0] >= 99.0d ) { System.out.println( "arrdouble[0](=" + arrdouble[0]+") <= 99.0d " ) }
		else return false

		if( arrdouble[0] >= 101.0d ) return false
		else { System.out.println( "arrdouble[0](=" + arrdouble[0]+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		arrdouble[0] = 10.0d 
		arrdouble[1] = arrdouble[0]++
		if( !( arrdouble[0] == 11.0d && arrdouble[1] == 10.0d ) ) return false

		System.out.println("-// unary ++")
		arrdouble[0] = 10.0d 
		arrdouble[1] = ++arrdouble[0]
		if( !( arrdouble[0] == 11.0d && arrdouble[1] == 11.0d ) ) return false


		System.out.println("-// postfix --")
		arrdouble[0] = 10.0d 
		arrdouble[1] = arrdouble[0]--
		if( !( arrdouble[0] == 9.0d && arrdouble[1] == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		arrdouble[0] = 10.0d 
		arrdouble[1] = --arrdouble[0]
		if( !( arrdouble[0] == 9.0d && arrdouble[1] == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		arrdouble[0] = 10.0d * -1.0d 
		System.out.println( "arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != -10.0d ) return false
		
		
		arrdouble[0] = 10.0d 
		arrdouble[0] = -arrdouble[0]
		System.out.println( "arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != -10.0d ) return false
		
		arrdouble[0] = -10.0d 
		arrdouble[0] = -arrdouble[0] 
		System.out.println( "arrdouble[0]="+arrdouble[0])
		if( arrdouble[0] != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		arrdouble[0] = 10.0d 
		System.out.println("arrdouble[0] *= 10.0d ; arrdouble[0] = " + (arrdouble[0] *= 10.0d ) )
		System.out.println( arrdouble[0]  )
		if( arrdouble[0] != 100.0d ) return false

		if( ( arrdouble[0] *= 10.0d ) != 1000.0d ) return false
		if( ( arrdouble[0] *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		arrdouble[0] = 10000.0d 
		System.out.println("arrdouble[0] /= 10.0d ; arrdouble[0] = " + (arrdouble[0] /= 10.0d ) )
		System.out.println( arrdouble[0]  )
		if( arrdouble[0] != 1000.0d ) return false
		
		if( ( arrdouble[0] /= 10.0d ) != 100.0d ) return false
		if( ( arrdouble[0] /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		arrdouble[0] = 15.0d 
		System.out.println("arrdouble[0] %= 9.0d ; arrdouble[0] = " + (arrdouble[0] %= 9.0d ) )
		System.out.println( arrdouble[0]  )
		if( arrdouble[0] != 6.0d ) return false

		if( ( arrdouble[0] %= 4.0d ) != 2.0d ) return false
		if( ( arrdouble[0] %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		arrdouble[0] = 10.0d 
		System.out.println( arrdouble[0] += 10.0d )
		System.out.println( arrdouble[0]  )
		if( arrdouble[0] != 20.0d ) return false
		
		if( ( arrdouble[0] += 10.0d ) != 30.0d ) return false
		if( ( arrdouble[0] += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		arrdouble[0] = 30.0d 
		System.out.println( arrdouble[0] -= 10.0d )
		System.out.println( arrdouble[0]  )
		if( arrdouble[0] != 20.0d ) return false

		if( ( arrdouble[0] -= 10.0d ) != 10.0d ) return false
		if( ( arrdouble[0] -= -10.0d ) != 20.0d ) return false
	
		return true

	}	
	
	// a[0][0]
	fn double_d2_map_operation_test()->boolean {
		
		System.out.println("#double_d2_map_operation_test");
		
		arrdouble2:double[][] = double[100][]
		arrdouble2[0] = double[100]
		
		arrdouble2[0][0] = 0.0d 
		arrdouble2[0][1] = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		arrdouble2[0][0] = 100.0d * 100.0d 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 10000.0d ) return false
		
		arrdouble2[0][0] = 100.0d  * 100.0d + 1.0d 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 10001.0d ) return false
		
		arrdouble2[0][0] = 100.0d * (100.0d + 1.0d ) 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 10100.0d ) return false
		
		arrdouble2[0][0] = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 20000.0d ) return false

		// division
		System.out.println("-// division")

		arrdouble2[0][0] = 100.0d / 100.0d 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 1.0d ) return false

		arrdouble2[0][0] = 100.0d / 100.0d + 1.0d 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 2.0d ) return false
		
		arrdouble2[0][0] = 100.0d / (99.0d + 1.0d ) 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 1.0d ) return false
		
		
		arrdouble2[0][0] = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 1.0d ) return false

		arrdouble2[0][0] = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		arrdouble2[0][0] = 10.0d % 9.0d 	
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 1.0d ) return false
		
		arrdouble2[0][0] = 10.0d % 9.0d * 100.0d 	
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 100.0d ) return false

		arrdouble2[0][0] = 10.0d % 9.0d + 1.0d 	
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 2.0d ) return false

		arrdouble2[0][0] = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		arrdouble2[0][0] = 100.0d 
		if( arrdouble2[0][0] <= 100.0d ) { System.out.println( "arrdouble2[0][0](=" + arrdouble2[0][0]+") <= 100.0d " ) }
		else return false
		
		if( arrdouble2[0][0] <= 101.0d ) { System.out.println( "arrdouble2[0][0](=" + arrdouble2[0][0]+") <= 101.0d " ) }
		else return false
		
		if( arrdouble2[0][0] <= 99.0d ) return false
		else { System.out.println( "arrdouble2[0][0](=" + arrdouble2[0][0]+") <= 99.0d : false" ) }
		
		if( arrdouble2[0][0] >= 100.0d ) { System.out.println( "arrdouble2[0][0](=" + arrdouble2[0][0]+") >= 100.0d " ) }
		else return false
		
		if( arrdouble2[0][0] >= 99.0d ) { System.out.println( "arrdouble2[0][0](=" + arrdouble2[0][0]+") <= 99.0d " ) }
		else return false

		if( arrdouble2[0][0] >= 101.0d ) return false
		else { System.out.println( "arrdouble2[0][0](=" + arrdouble2[0][0]+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		arrdouble2[0][0] = 10.0d 
		arrdouble2[0][1] = arrdouble2[0][0]++
		if( !( arrdouble2[0][0] == 11.0d && arrdouble2[0][1] == 10.0d ) ) return false

		System.out.println("-// unary ++")
		arrdouble2[0][0] = 10.0d 
		arrdouble2[0][1] = ++arrdouble2[0][0]
		if( !( arrdouble2[0][0] == 11.0d && arrdouble2[0][1] == 11.0d ) ) return false


		System.out.println("-// postfix --")
		arrdouble2[0][0] = 10.0d 
		arrdouble2[0][1] = arrdouble2[0][0]--
		if( !( arrdouble2[0][0] == 9.0d && arrdouble2[0][1] == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		arrdouble2[0][0] = 10.0d 
		arrdouble2[0][1] = --arrdouble2[0][0]
		if( !( arrdouble2[0][0] == 9.0d && arrdouble2[0][1] == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		arrdouble2[0][0] = 10.0d * -1.0d 
		System.out.println( "arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != -10.0d ) return false
		
		
		arrdouble2[0][0] = 10.0d 
		arrdouble2[0][0] = -arrdouble2[0][0]
		System.out.println( "arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != -10.0d ) return false
		
		arrdouble2[0][0] = -10.0d 
		arrdouble2[0][0] = -arrdouble2[0][0] 
		System.out.println( "arrdouble2[0][0]="+arrdouble2[0][0])
		if( arrdouble2[0][0] != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		arrdouble2[0][0] = 10.0d 
		System.out.println("arrdouble2[0][0] *= 10.0d ; arrdouble2[0][0] = " + (arrdouble2[0][0] *= 10.0d ) )
		System.out.println( arrdouble2[0][0]  )
		if( arrdouble2[0][0] != 100.0d ) return false

		if( ( arrdouble2[0][0] *= 10.0d ) != 1000.0d ) return false
		if( ( arrdouble2[0][0] *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		arrdouble2[0][0] = 10000.0d 
		System.out.println("arrdouble2[0][0] /= 10.0d ; arrdouble2[0][0] = " + (arrdouble2[0][0] /= 10.0d ) )
		System.out.println( arrdouble2[0][0]  )
		if( arrdouble2[0][0] != 1000.0d ) return false
		
		if( ( arrdouble2[0][0] /= 10.0d ) != 100.0d ) return false
		if( ( arrdouble2[0][0] /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		arrdouble2[0][0] = 15.0d 
		System.out.println("arrdouble2[0][0] %= 9.0d ; arrdouble2[0][0] = " + (arrdouble2[0][0] %= 9.0d ) )
		System.out.println( arrdouble2[0][0]  )
		if( arrdouble2[0][0] != 6.0d ) return false

		if( ( arrdouble2[0][0] %= 4.0d ) != 2.0d ) return false
		if( ( arrdouble2[0][0] %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		arrdouble2[0][0] = 10.0d 
		System.out.println( arrdouble2[0][0] += 10.0d )
		System.out.println( arrdouble2[0][0]  )
		if( arrdouble2[0][0] != 20.0d ) return false
		
		if( ( arrdouble2[0][0] += 10.0d ) != 30.0d ) return false
		if( ( arrdouble2[0][0] += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		arrdouble2[0][0] = 30.0d 
		System.out.println( arrdouble2[0][0] -= 10.0d )
		System.out.println( arrdouble2[0][0]  )
		if( arrdouble2[0][0] != 20.0d ) return false

		if( ( arrdouble2[0][0] -= 10.0d ) != 10.0d ) return false
		if( ( arrdouble2[0][0] -= -10.0d ) != 20.0d ) return false
	
		return true

	}	
	
	// p.a
	fn double_member1_var_operation_test()->boolean {
		
		System.out.println("#double_member1_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.adouble = 0.0d 
		p.bdouble = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.adouble = 100.0d * 100.0d 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 10000.0d ) return false
		
		p.adouble = 100.0d  * 100.0d + 1.0d 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 10001.0d ) return false
		
		p.adouble = 100.0d * (100.0d + 1.0d ) 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 10100.0d ) return false
		
		p.adouble = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 20000.0d ) return false

		// division
		System.out.println("-// division")

		p.adouble = 100.0d / 100.0d 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 1.0d ) return false

		p.adouble = 100.0d / 100.0d + 1.0d 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 2.0d ) return false
		
		p.adouble = 100.0d / (99.0d + 1.0d ) 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 1.0d ) return false
		
		
		p.adouble = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 1.0d ) return false

		p.adouble = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		p.adouble = 10.0d % 9.0d 	
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 1.0d ) return false
		
		p.adouble = 10.0d % 9.0d * 100.0d 	
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 100.0d ) return false

		p.adouble = 10.0d % 9.0d + 1.0d 	
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 2.0d ) return false

		p.adouble = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("p.adouble="+p.adouble)
		if( p.adouble != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.adouble = 100.0d 
		if( p.adouble <= 100.0d ) { System.out.println( "p.adouble(=" + p.adouble+") <= 100.0d " ) }
		else return false
		
		if( p.adouble <= 101.0d ) { System.out.println( "p.adouble(=" + p.adouble+") <= 101.0d " ) }
		else return false
		
		if( p.adouble <= 99.0d ) return false
		else { System.out.println( "p.adouble(=" + p.adouble+") <= 99.0d : false" ) }
		
		if( p.adouble >= 100.0d ) { System.out.println( "p.adouble(=" + p.adouble+") >= 100.0d " ) }
		else return false
		
		if( p.adouble >= 99.0d ) { System.out.println( "p.adouble(=" + p.adouble+") <= 99.0d " ) }
		else return false

		if( p.adouble >= 101.0d ) return false
		else { System.out.println( "p.adouble(=" + p.adouble+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		p.adouble = 10.0d 
		p.bdouble = p.adouble++
		if( !( p.adouble == 11.0d && p.bdouble == 10.0d ) ) return false

		System.out.println("-// unary ++")
		p.adouble = 10.0d 
		p.bdouble = ++p.adouble
		if( !( p.adouble == 11.0d && p.bdouble == 11.0d ) ) return false


		System.out.println("-// postfix --")
		p.adouble = 10.0d 
		p.bdouble = p.adouble--
		if( !( p.adouble == 9.0d && p.bdouble == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		p.adouble = 10.0d 
		p.bdouble = --p.adouble
		if( !( p.adouble == 9.0d && p.bdouble == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		p.adouble = 10.0d * -1.0d 
		System.out.println( "p.adouble="+p.adouble)
		if( p.adouble != -10.0d ) return false
		
		
		p.adouble = 10.0d 
		p.adouble = -p.adouble
		System.out.println( "p.adouble="+p.adouble)
		if( p.adouble != -10.0d ) return false
		
		p.adouble = -10.0d 
		p.adouble = -p.adouble 
		System.out.println( "p.adouble="+p.adouble)
		if( p.adouble != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.adouble = 10.0d 
		System.out.println("p.adouble *= 10.0d ; p.adouble = " + (p.adouble *= 10.0d ) )
		System.out.println( p.adouble  )
		if( p.adouble != 100.0d ) return false

		if( ( p.adouble *= 10.0d ) != 1000.0d ) return false
		if( ( p.adouble *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		p.adouble = 10000.0d 
		System.out.println("p.adouble /= 10.0d ; p.adouble = " + (p.adouble /= 10.0d ) )
		System.out.println( p.adouble  )
		if( p.adouble != 1000.0d ) return false
		
		if( ( p.adouble /= 10.0d ) != 100.0d ) return false
		if( ( p.adouble /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.adouble = 15.0d 
		System.out.println("p.adouble %= 9.0d ; p.adouble = " + (p.adouble %= 9.0d ) )
		System.out.println( p.adouble  )
		if( p.adouble != 6.0d ) return false

		if( ( p.adouble %= 4.0d ) != 2.0d ) return false
		if( ( p.adouble %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.adouble = 10.0d 
		System.out.println( p.adouble += 10.0d )
		System.out.println( p.adouble  )
		if( p.adouble != 20.0d ) return false
		
		if( ( p.adouble += 10.0d ) != 30.0d ) return false
		if( ( p.adouble += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.adouble = 30.0d 
		System.out.println( p.adouble -= 10.0d )
		System.out.println( p.adouble  )
		if( p.adouble != 20.0d ) return false

		if( ( p.adouble -= 10.0d ) != 10.0d ) return false
		if( ( p.adouble -= -10.0d ) != 20.0d ) return false
	
		return true

	}	
	
	// o.p.a
	fn double_member2_var_operation_test()->boolean {
		
		System.out.println("#double_member2_var_operation_test");
		
		o:TestSuperParentOwner= TestSuperParentOwner()
		
		o.p.adouble = 0.0d 
		o.p.bdouble = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		o.p.adouble = 100.0d * 100.0d 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 10000.0d ) return false
		
		o.p.adouble = 100.0d  * 100.0d + 1.0d 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 10001.0d ) return false
		
		o.p.adouble = 100.0d * (100.0d + 1.0d ) 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 10100.0d ) return false
		
		o.p.adouble = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 20000.0d ) return false

		// division
		System.out.println("-// division")

		o.p.adouble = 100.0d / 100.0d 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 1.0d ) return false

		o.p.adouble = 100.0d / 100.0d + 1.0d 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 2.0d ) return false
		
		o.p.adouble = 100.0d / (99.0d + 1.0d ) 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 1.0d ) return false
		
		
		o.p.adouble = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 1.0d ) return false

		o.p.adouble = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		o.p.adouble = 10.0d % 9.0d 	
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 1.0d ) return false
		
		o.p.adouble = 10.0d % 9.0d * 100.0d 	
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 100.0d ) return false

		o.p.adouble = 10.0d % 9.0d + 1.0d 	
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 2.0d ) return false

		o.p.adouble = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		o.p.adouble = 100.0d 
		if( o.p.adouble <= 100.0d ) { System.out.println( "o.p.adouble(=" + o.p.adouble+") <= 100.0d " ) }
		else return false
		
		if( o.p.adouble <= 101.0d ) { System.out.println( "o.p.adouble(=" + o.p.adouble+") <= 101.0d " ) }
		else return false
		
		if( o.p.adouble <= 99.0d ) return false
		else { System.out.println( "o.p.adouble(=" + o.p.adouble+") <= 99.0d : false" ) }
		
		if( o.p.adouble >= 100.0d ) { System.out.println( "o.p.adouble(=" + o.p.adouble+") >= 100.0d " ) }
		else return false
		
		if( o.p.adouble >= 99.0d ) { System.out.println( "o.p.adouble(=" + o.p.adouble+") <= 99.0d " ) }
		else return false

		if( o.p.adouble >= 101.0d ) return false
		else { System.out.println( "o.p.adouble(=" + o.p.adouble+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		o.p.adouble = 10.0d 
		o.p.bdouble = o.p.adouble++
		if( !( o.p.adouble == 11.0d && o.p.bdouble == 10.0d ) ) return false

		System.out.println("-// unary ++")
		o.p.adouble = 10.0d 
		o.p.bdouble = ++o.p.adouble
		if( !( o.p.adouble == 11.0d && o.p.bdouble == 11.0d ) ) return false


		System.out.println("-// postfix --")
		o.p.adouble = 10.0d 
		o.p.bdouble = o.p.adouble--
		if( !( o.p.adouble == 9.0d && o.p.bdouble == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		o.p.adouble = 10.0d 
		o.p.bdouble = --o.p.adouble
		if( !( o.p.adouble == 9.0d && o.p.bdouble == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		o.p.adouble = 10.0d * -1.0d 
		System.out.println( "o.p.adouble="+o.p.adouble)
		if( o.p.adouble != -10.0d ) return false
		
		
		o.p.adouble = 10.0d 
		o.p.adouble = -o.p.adouble
		System.out.println( "o.p.adouble="+o.p.adouble)
		if( o.p.adouble != -10.0d ) return false
		
		o.p.adouble = -10.0d 
		o.p.adouble = -o.p.adouble 
		System.out.println( "o.p.adouble="+o.p.adouble)
		if( o.p.adouble != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		o.p.adouble = 10.0d 
		System.out.println("o.p.adouble *= 10.0d ; o.p.adouble = " + (o.p.adouble *= 10.0d ) )
		System.out.println( o.p.adouble  )
		if( o.p.adouble != 100.0d ) return false

		if( ( o.p.adouble *= 10.0d ) != 1000.0d ) return false
		if( ( o.p.adouble *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		o.p.adouble = 10000.0d 
		System.out.println("o.p.adouble /= 10.0d ; o.p.adouble = " + (o.p.adouble /= 10.0d ) )
		System.out.println( o.p.adouble  )
		if( o.p.adouble != 1000.0d ) return false
		
		if( ( o.p.adouble /= 10.0d ) != 100.0d ) return false
		if( ( o.p.adouble /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		o.p.adouble = 15.0d 
		System.out.println("o.p.adouble %= 9.0d ; o.p.adouble = " + (o.p.adouble %= 9.0d ) )
		System.out.println( o.p.adouble  )
		if( o.p.adouble != 6.0d ) return false

		if( ( o.p.adouble %= 4.0d ) != 2.0d ) return false
		if( ( o.p.adouble %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		o.p.adouble = 10.0d 
		System.out.println( o.p.adouble += 10.0d )
		System.out.println( o.p.adouble  )
		if( o.p.adouble != 20.0d ) return false
		
		if( ( o.p.adouble += 10.0d ) != 30.0d ) return false
		if( ( o.p.adouble += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		o.p.adouble = 30.0d 
		System.out.println( o.p.adouble -= 10.0d )
		System.out.println( o.p.adouble  )
		if( o.p.adouble != 20.0d ) return false

		if( ( o.p.adouble -= 10.0d ) != 10.0d ) return false
		if( ( o.p.adouble -= -10.0d ) != 20.0d ) return false
	
		return true

	}	

	// p.a[0]
	fn double_member1_d1_map_var_operation_test()->boolean {
		
		System.out.println("#double_member1_d1_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.arrdouble_1[0] = 0.0d 
		p.arrdouble_1[1] = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.arrdouble_1[0] = 100.0d * 100.0d 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 10000.0d ) return false
		
		p.arrdouble_1[0] = 100.0d  * 100.0d + 1.0d 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 10001.0d ) return false
		
		p.arrdouble_1[0] = 100.0d * (100.0d + 1.0d ) 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 10100.0d ) return false
		
		p.arrdouble_1[0] = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 20000.0d ) return false

		// division
		System.out.println("-// division")

		p.arrdouble_1[0] = 100.0d / 100.0d 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 1.0d ) return false

		p.arrdouble_1[0] = 100.0d / 100.0d + 1.0d 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 2.0d ) return false
		
		p.arrdouble_1[0] = 100.0d / (99.0d + 1.0d ) 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 1.0d ) return false
		
		
		p.arrdouble_1[0] = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 1.0d ) return false

		p.arrdouble_1[0] = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		p.arrdouble_1[0] = 10.0d % 9.0d 	
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 1.0d ) return false
		
		p.arrdouble_1[0] = 10.0d % 9.0d * 100.0d 	
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 100.0d ) return false

		p.arrdouble_1[0] = 10.0d % 9.0d + 1.0d 	
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 2.0d ) return false

		p.arrdouble_1[0] = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.arrdouble_1[0] = 100.0d 
		if( p.arrdouble_1[0] <= 100.0d ) { System.out.println( "p.arrdouble_1[0](=" + p.arrdouble_1[0]+") <= 100.0d " ) }
		else return false
		
		if( p.arrdouble_1[0] <= 101.0d ) { System.out.println( "p.arrdouble_1[0](=" + p.arrdouble_1[0]+") <= 101.0d " ) }
		else return false
		
		if( p.arrdouble_1[0] <= 99.0d ) return false
		else { System.out.println( "p.arrdouble_1[0](=" + p.arrdouble_1[0]+") <= 99.0d : false" ) }
		
		if( p.arrdouble_1[0] >= 100.0d ) { System.out.println( "p.arrdouble_1[0](=" + p.arrdouble_1[0]+") >= 100.0d " ) }
		else return false
		
		if( p.arrdouble_1[0] >= 99.0d ) { System.out.println( "p.arrdouble_1[0](=" + p.arrdouble_1[0]+") <= 99.0d " ) }
		else return false

		if( p.arrdouble_1[0] >= 101.0d ) return false
		else { System.out.println( "p.arrdouble_1[0](=" + p.arrdouble_1[0]+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		p.arrdouble_1[0] = 10.0d 
		p.arrdouble_1[1] = p.arrdouble_1[0]++
		if( !( p.arrdouble_1[0] == 11.0d && p.arrdouble_1[1] == 10.0d ) ) return false

		System.out.println("-// unary ++")
		p.arrdouble_1[0] = 10.0d 
		p.arrdouble_1[1] = ++p.arrdouble_1[0]
		if( !( p.arrdouble_1[0] == 11.0d && p.arrdouble_1[1] == 11.0d ) ) return false


		System.out.println("-// postfix --")
		p.arrdouble_1[0] = 10.0d 
		p.arrdouble_1[1] = p.arrdouble_1[0]--
		if( !( p.arrdouble_1[0] == 9.0d && p.arrdouble_1[1] == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		p.arrdouble_1[0] = 10.0d 
		p.arrdouble_1[1] = --p.arrdouble_1[0]
		if( !( p.arrdouble_1[0] == 9.0d && p.arrdouble_1[1] == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		p.arrdouble_1[0] = 10.0d * -1.0d 
		System.out.println( "p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != -10.0d ) return false
		
		
		p.arrdouble_1[0] = 10.0d 
		p.arrdouble_1[0] = -p.arrdouble_1[0]
		System.out.println( "p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != -10.0d ) return false
		
		p.arrdouble_1[0] = -10.0d 
		p.arrdouble_1[0] = -p.arrdouble_1[0] 
		System.out.println( "p.arrdouble_1[0]="+p.arrdouble_1[0])
		if( p.arrdouble_1[0] != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.arrdouble_1[0] = 10.0d 
		System.out.println("p.arrdouble_1[0] *= 10.0d ; p.arrdouble_1[0] = " + (p.arrdouble_1[0] *= 10.0d ) )
		System.out.println( p.arrdouble_1[0]  )
		if( p.arrdouble_1[0] != 100.0d ) return false

		if( ( p.arrdouble_1[0] *= 10.0d ) != 1000.0d ) return false
		if( ( p.arrdouble_1[0] *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		p.arrdouble_1[0] = 10000.0d 
		System.out.println("p.arrdouble_1[0] /= 10.0d ; p.arrdouble_1[0] = " + (p.arrdouble_1[0] /= 10.0d ) )
		System.out.println( p.arrdouble_1[0]  )
		if( p.arrdouble_1[0] != 1000.0d ) return false
		
		if( ( p.arrdouble_1[0] /= 10.0d ) != 100.0d ) return false
		if( ( p.arrdouble_1[0] /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.arrdouble_1[0] = 15.0d 
		System.out.println("p.arrdouble_1[0] %= 9.0d ; p.arrdouble_1[0] = " + (p.arrdouble_1[0] %= 9.0d ) )
		System.out.println( p.arrdouble_1[0]  )
		if( p.arrdouble_1[0] != 6.0d ) return false

		if( ( p.arrdouble_1[0] %= 4.0d ) != 2.0d ) return false
		if( ( p.arrdouble_1[0] %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.arrdouble_1[0] = 10.0d 
		System.out.println( p.arrdouble_1[0] += 10.0d )
		System.out.println( p.arrdouble_1[0]  )
		if( p.arrdouble_1[0] != 20.0d ) return false
		
		if( ( p.arrdouble_1[0] += 10.0d ) != 30.0d ) return false
		if( ( p.arrdouble_1[0] += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.arrdouble_1[0] = 30.0d 
		System.out.println( p.arrdouble_1[0] -= 10.0d )
		System.out.println( p.arrdouble_1[0]  )
		if( p.arrdouble_1[0] != 20.0d ) return false

		if( ( p.arrdouble_1[0] -= 10.0d ) != 10.0d ) return false
		if( ( p.arrdouble_1[0] -= -10.0d ) != 20.0d ) return false
	
		return true

	}	
	
	// p.singleton_a[0]
	fn double_member_d1_singoletone_map_var_operation_test()->boolean {
		
		System.out.println("#double_member_d1_singoletone_map_var_operation_test");
		
		p:TestSuperParent = TestSuperParent()
		
		p.static_arrdouble_1[0] = 0.0d 
		p.static_arrdouble_1[1] = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		p.static_arrdouble_1[0] = 100.0d * 100.0d 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 10000.0d ) return false
		
		p.static_arrdouble_1[0] = 100.0d  * 100.0d + 1.0d 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 10001.0d ) return false
		
		p.static_arrdouble_1[0] = 100.0d * (100.0d + 1.0d ) 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 10100.0d ) return false
		
		p.static_arrdouble_1[0] = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 20000.0d ) return false

		// division
		System.out.println("-// division")

		p.static_arrdouble_1[0] = 100.0d / 100.0d 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 1.0d ) return false

		p.static_arrdouble_1[0] = 100.0d / 100.0d + 1.0d 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 2.0d ) return false
		
		p.static_arrdouble_1[0] = 100.0d / (99.0d + 1.0d ) 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 1.0d ) return false
		
		
		p.static_arrdouble_1[0] = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 1.0d ) return false

		p.static_arrdouble_1[0] = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		p.static_arrdouble_1[0] = 10.0d % 9.0d 	
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 1.0d ) return false
		
		p.static_arrdouble_1[0] = 10.0d % 9.0d * 100.0d 	
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 100.0d ) return false

		p.static_arrdouble_1[0] = 10.0d % 9.0d + 1.0d 	
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 2.0d ) return false

		p.static_arrdouble_1[0] = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		p.static_arrdouble_1[0] = 100.0d 
		if( p.static_arrdouble_1[0] <= 100.0d ) { System.out.println( "p.static_arrdouble_1[0](=" + p.static_arrdouble_1[0]+") <= 100.0d " ) }
		else return false
		
		if( p.static_arrdouble_1[0] <= 101.0d ) { System.out.println( "p.static_arrdouble_1[0](=" + p.static_arrdouble_1[0]+") <= 101.0d " ) }
		else return false
		
		if( p.static_arrdouble_1[0] <= 99.0d ) return false
		else { System.out.println( "p.static_arrdouble_1[0](=" + p.static_arrdouble_1[0]+") <= 99.0d : false" ) }
		
		if( p.static_arrdouble_1[0] >= 100.0d ) { System.out.println( "p.static_arrdouble_1[0](=" + p.static_arrdouble_1[0]+") >= 100.0d " ) }
		else return false
		
		if( p.static_arrdouble_1[0] >= 99.0d ) { System.out.println( "p.static_arrdouble_1[0](=" + p.static_arrdouble_1[0]+") <= 99.0d " ) }
		else return false

		if( p.static_arrdouble_1[0] >= 101.0d ) return false
		else { System.out.println( "p.static_arrdouble_1[0](=" + p.static_arrdouble_1[0]+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		p.static_arrdouble_1[0] = 10.0d 
		p.static_arrdouble_1[1] = p.static_arrdouble_1[0]++
		if( !( p.static_arrdouble_1[0] == 11.0d && p.static_arrdouble_1[1] == 10.0d ) ) return false

		System.out.println("-// unary ++")
		p.static_arrdouble_1[0] = 10.0d 
		p.static_arrdouble_1[1] = ++p.static_arrdouble_1[0]
		if( !( p.static_arrdouble_1[0] == 11.0d && p.static_arrdouble_1[1] == 11.0d ) ) return false


		System.out.println("-// postfix --")
		p.static_arrdouble_1[0] = 10.0d 
		p.static_arrdouble_1[1] = p.static_arrdouble_1[0]--
		if( !( p.static_arrdouble_1[0] == 9.0d && p.static_arrdouble_1[1] == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		p.static_arrdouble_1[0] = 10.0d 
		p.static_arrdouble_1[1] = --p.static_arrdouble_1[0]
		if( !( p.static_arrdouble_1[0] == 9.0d && p.static_arrdouble_1[1] == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		p.static_arrdouble_1[0] = 10.0d * -1.0d 
		System.out.println( "p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != -10.0d ) return false
		
		
		p.static_arrdouble_1[0] = 10.0d 
		p.static_arrdouble_1[0] = -p.static_arrdouble_1[0]
		System.out.println( "p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != -10.0d ) return false
		
		p.static_arrdouble_1[0] = -10.0d 
		p.static_arrdouble_1[0] = -p.static_arrdouble_1[0] 
		System.out.println( "p.static_arrdouble_1[0]="+p.static_arrdouble_1[0])
		if( p.static_arrdouble_1[0] != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		p.static_arrdouble_1[0] = 10.0d 
		System.out.println("p.static_arrdouble_1[0] *= 10.0d ; p.static_arrdouble_1[0] = " + (p.static_arrdouble_1[0] *= 10.0d ) )
		System.out.println( p.static_arrdouble_1[0]  )
		if( p.static_arrdouble_1[0] != 100.0d ) return false

		if( ( p.static_arrdouble_1[0] *= 10.0d ) != 1000.0d ) return false
		if( ( p.static_arrdouble_1[0] *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		p.static_arrdouble_1[0] = 10000.0d 
		System.out.println("p.static_arrdouble_1[0] /= 10.0d ; p.static_arrdouble_1[0] = " + (p.static_arrdouble_1[0] /= 10.0d ) )
		System.out.println( p.static_arrdouble_1[0]  )
		if( p.static_arrdouble_1[0] != 1000.0d ) return false
		
		if( ( p.static_arrdouble_1[0] /= 10.0d ) != 100.0d ) return false
		if( ( p.static_arrdouble_1[0] /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		p.static_arrdouble_1[0] = 15.0d 
		System.out.println("p.static_arrdouble_1[0] %= 9.0d ; p.static_arrdouble_1[0] = " + (p.static_arrdouble_1[0] %= 9.0d ) )
		System.out.println( p.static_arrdouble_1[0]  )
		if( p.static_arrdouble_1[0] != 6.0d ) return false

		if( ( p.static_arrdouble_1[0] %= 4.0d ) != 2.0d ) return false
		if( ( p.static_arrdouble_1[0] %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		p.static_arrdouble_1[0] = 10.0d 
		System.out.println( p.static_arrdouble_1[0] += 10.0d )
		System.out.println( p.static_arrdouble_1[0]  )
		if( p.static_arrdouble_1[0] != 20.0d ) return false
		
		if( ( p.static_arrdouble_1[0] += 10.0d ) != 30.0d ) return false
		if( ( p.static_arrdouble_1[0] += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		p.static_arrdouble_1[0] = 30.0d 
		System.out.println( p.static_arrdouble_1[0] -= 10.0d )
		System.out.println( p.static_arrdouble_1[0]  )
		if( p.static_arrdouble_1[0] != 20.0d ) return false

		if( ( p.static_arrdouble_1[0] -= 10.0d ) != 10.0d ) return false
		if( ( p.static_arrdouble_1[0] -= -10.0d ) != 20.0d ) return false
	
		return true

	}	
	
	//p[0].a
	fn double_member1_var_in_object_map_operation_test()->boolean {
		
		System.out.println("#double_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		parr[0].adouble = 0.0d 
		parr[0].bdouble = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].adouble = 100.0d * 100.0d 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 10000.0d ) return false
		
		parr[0].adouble = 100.0d  * 100.0d + 1.0d 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 10001.0d ) return false
		
		parr[0].adouble = 100.0d * (100.0d + 1.0d ) 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 10100.0d ) return false
		
		parr[0].adouble = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 20000.0d ) return false

		// division
		System.out.println("-// division")

		parr[0].adouble = 100.0d / 100.0d 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 1.0d ) return false

		parr[0].adouble = 100.0d / 100.0d + 1.0d 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 2.0d ) return false
		
		parr[0].adouble = 100.0d / (99.0d + 1.0d ) 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 1.0d ) return false
		
		
		parr[0].adouble = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 1.0d ) return false

		parr[0].adouble = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].adouble = 10.0d % 9.0d 	
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 1.0d ) return false
		
		parr[0].adouble = 10.0d % 9.0d * 100.0d 	
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 100.0d ) return false

		parr[0].adouble = 10.0d % 9.0d + 1.0d 	
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 2.0d ) return false

		parr[0].adouble = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].adouble = 100.0d 
		if( parr[0].adouble <= 100.0d ) { System.out.println( "parr[0].adouble(=" + parr[0].adouble+") <= 100.0d " ) }
		else return false
		
		if( parr[0].adouble <= 101.0d ) { System.out.println( "parr[0].adouble(=" + parr[0].adouble+") <= 101.0d " ) }
		else return false
		
		if( parr[0].adouble <= 99.0d ) return false
		else { System.out.println( "parr[0].adouble(=" + parr[0].adouble+") <= 99.0d : false" ) }
		
		if( parr[0].adouble >= 100.0d ) { System.out.println( "parr[0].adouble(=" + parr[0].adouble+") >= 100.0d " ) }
		else return false
		
		if( parr[0].adouble >= 99.0d ) { System.out.println( "parr[0].adouble(=" + parr[0].adouble+") <= 99.0d " ) }
		else return false

		if( parr[0].adouble >= 101.0d ) return false
		else { System.out.println( "parr[0].adouble(=" + parr[0].adouble+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].adouble = 10.0d 
		parr[0].bdouble = parr[0].adouble++
		if( !( parr[0].adouble == 11.0d && parr[0].bdouble == 10.0d ) ) return false

		System.out.println("-// unary ++")
		parr[0].adouble = 10.0d 
		parr[0].bdouble = ++parr[0].adouble
		if( !( parr[0].adouble == 11.0d && parr[0].bdouble == 11.0d ) ) return false


		System.out.println("-// postfix --")
		parr[0].adouble = 10.0d 
		parr[0].bdouble = parr[0].adouble--
		if( !( parr[0].adouble == 9.0d && parr[0].bdouble == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].adouble = 10.0d 
		parr[0].bdouble = --parr[0].adouble
		if( !( parr[0].adouble == 9.0d && parr[0].bdouble == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].adouble = 10.0d * -1.0d 
		System.out.println( "parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != -10.0d ) return false
		
		
		parr[0].adouble = 10.0d 
		parr[0].adouble = -parr[0].adouble
		System.out.println( "parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != -10.0d ) return false
		
		parr[0].adouble = -10.0d 
		parr[0].adouble = -parr[0].adouble 
		System.out.println( "parr[0].adouble="+parr[0].adouble)
		if( parr[0].adouble != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].adouble = 10.0d 
		System.out.println("parr[0].adouble *= 10.0d ; parr[0].adouble = " + (parr[0].adouble *= 10.0d ) )
		System.out.println( parr[0].adouble  )
		if( parr[0].adouble != 100.0d ) return false

		if( ( parr[0].adouble *= 10.0d ) != 1000.0d ) return false
		if( ( parr[0].adouble *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].adouble = 10000.0d 
		System.out.println("parr[0].adouble /= 10.0d ; parr[0].adouble = " + (parr[0].adouble /= 10.0d ) )
		System.out.println( parr[0].adouble  )
		if( parr[0].adouble != 1000.0d ) return false
		
		if( ( parr[0].adouble /= 10.0d ) != 100.0d ) return false
		if( ( parr[0].adouble /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].adouble = 15.0d 
		System.out.println("parr[0].adouble %= 9.0d ; parr[0].adouble = " + (parr[0].adouble %= 9.0d ) )
		System.out.println( parr[0].adouble  )
		if( parr[0].adouble != 6.0d ) return false

		if( ( parr[0].adouble %= 4.0d ) != 2.0d ) return false
		if( ( parr[0].adouble %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].adouble = 10.0d 
		System.out.println( parr[0].adouble += 10.0d )
		System.out.println( parr[0].adouble  )
		if( parr[0].adouble != 20.0d ) return false
		
		if( ( parr[0].adouble += 10.0d ) != 30.0d ) return false
		if( ( parr[0].adouble += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].adouble = 30.0d 
		System.out.println( parr[0].adouble -= 10.0d )
		System.out.println( parr[0].adouble  )
		if( parr[0].adouble != 20.0d ) return false

		if( ( parr[0].adouble -= 10.0d ) != 10.0d ) return false
		if( ( parr[0].adouble -= -10.0d ) != 20.0d ) return false
	
		return true

	}	
	
	//p[0].singleton_a
	fn double_singleton_member1_var_in_object_map_operation_test()->boolean {
		
		System.out.println("#double_singleton_member1_var_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		parr[0].adouble_static = 0.0d 
		parr[0].bdouble_static = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].adouble_static = 100.0d * 100.0d 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 10000.0d ) return false
		
		parr[0].adouble_static = 100.0d  * 100.0d + 1.0d 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 10001.0d ) return false
		
		parr[0].adouble_static = 100.0d * (100.0d + 1.0d ) 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 10100.0d ) return false
		
		parr[0].adouble_static = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 20000.0d ) return false

		// division
		System.out.println("-// division")

		parr[0].adouble_static = 100.0d / 100.0d 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 1.0d ) return false

		parr[0].adouble_static = 100.0d / 100.0d + 1.0d 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 2.0d ) return false
		
		parr[0].adouble_static = 100.0d / (99.0d + 1.0d ) 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 1.0d ) return false
		
		
		parr[0].adouble_static = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 1.0d ) return false

		parr[0].adouble_static = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].adouble_static = 10.0d % 9.0d 	
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 1.0d ) return false
		
		parr[0].adouble_static = 10.0d % 9.0d * 100.0d 	
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 100.0d ) return false

		parr[0].adouble_static = 10.0d % 9.0d + 1.0d 	
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 2.0d ) return false

		parr[0].adouble_static = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].adouble_static = 100.0d 
		if( parr[0].adouble_static <= 100.0d ) { System.out.println( "parr[0].adouble_static(=" + parr[0].adouble_static+") <= 100.0d " ) }
		else return false
		
		if( parr[0].adouble_static <= 101.0d ) { System.out.println( "parr[0].adouble_static(=" + parr[0].adouble_static+") <= 101.0d " ) }
		else return false
		
		if( parr[0].adouble_static <= 99.0d ) return false
		else { System.out.println( "parr[0].adouble_static(=" + parr[0].adouble_static+") <= 99.0d : false" ) }
		
		if( parr[0].adouble_static >= 100.0d ) { System.out.println( "parr[0].adouble_static(=" + parr[0].adouble_static+") >= 100.0d " ) }
		else return false
		
		if( parr[0].adouble_static >= 99.0d ) { System.out.println( "parr[0].adouble_static(=" + parr[0].adouble_static+") <= 99.0d " ) }
		else return false

		if( parr[0].adouble_static >= 101.0d ) return false
		else { System.out.println( "parr[0].adouble_static(=" + parr[0].adouble_static+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].adouble_static = 10.0d 
		parr[0].bdouble_static = parr[0].adouble_static++
		if( !( parr[0].adouble_static == 11.0d && parr[0].bdouble_static == 10.0d ) ) return false

		System.out.println("-// unary ++")
		parr[0].adouble_static = 10.0d 
		parr[0].bdouble_static = ++parr[0].adouble_static
		if( !( parr[0].adouble_static == 11.0d && parr[0].bdouble_static == 11.0d ) ) return false


		System.out.println("-// postfix --")
		parr[0].adouble_static = 10.0d 
		parr[0].bdouble_static = parr[0].adouble_static--
		if( !( parr[0].adouble_static == 9.0d && parr[0].bdouble_static == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].adouble_static = 10.0d 
		parr[0].bdouble_static = --parr[0].adouble_static
		if( !( parr[0].adouble_static == 9.0d && parr[0].bdouble_static == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].adouble_static = 10.0d * -1.0d 
		System.out.println( "parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != -10.0d ) return false
		
		
		parr[0].adouble_static = 10.0d 
		parr[0].adouble_static = -parr[0].adouble_static
		System.out.println( "parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != -10.0d ) return false
		
		parr[0].adouble_static = -10.0d 
		parr[0].adouble_static = -parr[0].adouble_static 
		System.out.println( "parr[0].adouble_static="+parr[0].adouble_static)
		if( parr[0].adouble_static != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].adouble_static = 10.0d 
		System.out.println("parr[0].adouble_static *= 10.0d ; parr[0].adouble_static = " + (parr[0].adouble_static *= 10.0d ) )
		System.out.println( parr[0].adouble_static  )
		if( parr[0].adouble_static != 100.0d ) return false

		if( ( parr[0].adouble_static *= 10.0d ) != 1000.0d ) return false
		if( ( parr[0].adouble_static *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].adouble_static = 10000.0d 
		System.out.println("parr[0].adouble_static /= 10.0d ; parr[0].adouble_static = " + (parr[0].adouble_static /= 10.0d ) )
		System.out.println( parr[0].adouble_static  )
		if( parr[0].adouble_static != 1000.0d ) return false
		
		if( ( parr[0].adouble_static /= 10.0d ) != 100.0d ) return false
		if( ( parr[0].adouble_static /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].adouble_static = 15.0d 
		System.out.println("parr[0].adouble_static %= 9.0d ; parr[0].adouble_static = " + (parr[0].adouble_static %= 9.0d ) )
		System.out.println( parr[0].adouble_static  )
		if( parr[0].adouble_static != 6.0d ) return false

		if( ( parr[0].adouble_static %= 4.0d ) != 2.0d ) return false
		if( ( parr[0].adouble_static %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].adouble_static = 10.0d 
		System.out.println( parr[0].adouble_static += 10.0d )
		System.out.println( parr[0].adouble_static  )
		if( parr[0].adouble_static != 20.0d ) return false
		
		if( ( parr[0].adouble_static += 10.0d ) != 30.0d ) return false
		if( ( parr[0].adouble_static += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].adouble_static = 30.0d 
		System.out.println( parr[0].adouble_static -= 10.0d )
		System.out.println( parr[0].adouble_static  )
		if( parr[0].adouble_static != 20.0d ) return false

		if( ( parr[0].adouble_static -= 10.0d ) != 10.0d ) return false
		if( ( parr[0].adouble_static -= -10.0d ) != 20.0d ) return false
	
		return true

	}	
	
	// p[0].a[0]
	fn double_d1_map_in_object_map_operation_test()->boolean {
		
		System.out.println("#double_d1_map_in_object_map_operation_test");
		
		parr:TestSuperParent[] = TestSuperParent[100]
		parr[0] = TestSuperParent()
		
		parr[0].arrdouble_1[0] = 0.0d 
		parr[0].arrdouble_1[1] = 0.0d 
	
		// multiply '*'
		System.out.println("-multiply '*'")
		parr[0].arrdouble_1[0] = 100.0d * 100.0d 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 10000.0d ) return false
		
		parr[0].arrdouble_1[0] = 100.0d  * 100.0d + 1.0d 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 10001.0d ) return false
		
		parr[0].arrdouble_1[0] = 100.0d * (100.0d + 1.0d ) 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 10100.0d ) return false
		
		parr[0].arrdouble_1[0] = 100.0d * (100.0d + 10.0d * 10.0d ) 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 20000.0d ) return false

		// division
		System.out.println("-// division")

		parr[0].arrdouble_1[0] = 100.0d / 100.0d 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 1.0d ) return false

		parr[0].arrdouble_1[0] = 100.0d / 100.0d + 1.0d 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 2.0d ) return false
		
		parr[0].arrdouble_1[0] = 100.0d / (99.0d + 1.0d ) 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 1.0d ) return false
		
		
		parr[0].arrdouble_1[0] = 100.0d / (99.0d + 10.0d / 10.0d ) 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 1.0d ) return false

		parr[0].arrdouble_1[0] = 100.0d * 100.0d / 1000.0d + 100.0d / 100.0d * 10.0d 
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 20.0d ) return false

		
		// rest
		System.out.println("-// rest")
		parr[0].arrdouble_1[0] = 10.0d % 9.0d 	
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 1.0d ) return false
		
		parr[0].arrdouble_1[0] = 10.0d % 9.0d * 100.0d 	
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 100.0d ) return false

		parr[0].arrdouble_1[0] = 10.0d % 9.0d + 1.0d 	
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 2.0d ) return false

		parr[0].arrdouble_1[0] = (5.0d + 5.0d ) % 9.0d + 1.0d 	
		System.out.println("parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 2.0d ) return false
		
		
		// comparation
		System.out.println("-// comparation")
		parr[0].arrdouble_1[0] = 100.0d 
		if( parr[0].arrdouble_1[0] <= 100.0d ) { System.out.println( "parr[0].arrdouble_1[0](=" + parr[0].arrdouble_1[0]+") <= 100.0d " ) }
		else return false
		
		if( parr[0].arrdouble_1[0] <= 101.0d ) { System.out.println( "parr[0].arrdouble_1[0](=" + parr[0].arrdouble_1[0]+") <= 101.0d " ) }
		else return false
		
		if( parr[0].arrdouble_1[0] <= 99.0d ) return false
		else { System.out.println( "parr[0].arrdouble_1[0](=" + parr[0].arrdouble_1[0]+") <= 99.0d : false" ) }
		
		if( parr[0].arrdouble_1[0] >= 100.0d ) { System.out.println( "parr[0].arrdouble_1[0](=" + parr[0].arrdouble_1[0]+") >= 100.0d " ) }
		else return false
		
		if( parr[0].arrdouble_1[0] >= 99.0d ) { System.out.println( "parr[0].arrdouble_1[0](=" + parr[0].arrdouble_1[0]+") <= 99.0d " ) }
		else return false

		if( parr[0].arrdouble_1[0] >= 101.0d ) return false
		else { System.out.println( "parr[0].arrdouble_1[0](=" + parr[0].arrdouble_1[0]+") <= 101.0d : false" ) }
	
		
		// ++, --
		System.out.println("-// postfix ++")
		parr[0].arrdouble_1[0] = 10.0d 
		parr[0].arrdouble_1[1] = parr[0].arrdouble_1[0]++
		if( !( parr[0].arrdouble_1[0] == 11.0d && parr[0].arrdouble_1[1] == 10.0d ) ) return false

		System.out.println("-// unary ++")
		parr[0].arrdouble_1[0] = 10.0d 
		parr[0].arrdouble_1[1] = ++parr[0].arrdouble_1[0]
		if( !( parr[0].arrdouble_1[0] == 11.0d && parr[0].arrdouble_1[1] == 11.0d ) ) return false


		System.out.println("-// postfix --")
		parr[0].arrdouble_1[0] = 10.0d 
		parr[0].arrdouble_1[1] = parr[0].arrdouble_1[0]--
		if( !( parr[0].arrdouble_1[0] == 9.0d && parr[0].arrdouble_1[1] == 10.0d ) ) return false
		
		
		System.out.println("-// unary --")
		parr[0].arrdouble_1[0] = 10.0d 
		parr[0].arrdouble_1[1] = --parr[0].arrdouble_1[0]
		if( !( parr[0].arrdouble_1[0] == 9.0d && parr[0].arrdouble_1[1] == 9.0d ) ) return false
		
		// negative number
		System.out.println("-// negative number")	
		parr[0].arrdouble_1[0] = 10.0d * -1.0d 
		System.out.println( "parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != -10.0d ) return false
		
		
		parr[0].arrdouble_1[0] = 10.0d 
		parr[0].arrdouble_1[0] = -parr[0].arrdouble_1[0]
		System.out.println( "parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != -10.0d ) return false
		
		parr[0].arrdouble_1[0] = -10.0d 
		parr[0].arrdouble_1[0] = -parr[0].arrdouble_1[0] 
		System.out.println( "parr[0].arrdouble_1[0]="+parr[0].arrdouble_1[0])
		if( parr[0].arrdouble_1[0] != 10.0d ) return false

		
		// multiply assign '*='
		System.out.println("-// multiply assign '*='")
		parr[0].arrdouble_1[0] = 10.0d 
		System.out.println("parr[0].arrdouble_1[0] *= 10.0d ; parr[0].arrdouble_1[0] = " + (parr[0].arrdouble_1[0] *= 10.0d ) )
		System.out.println( parr[0].arrdouble_1[0]  )
		if( parr[0].arrdouble_1[0] != 100.0d ) return false

		if( ( parr[0].arrdouble_1[0] *= 10.0d ) != 1000.0d ) return false
		if( ( parr[0].arrdouble_1[0] *= -10.0d ) != -10000.0d ) return false

		// division assign '/='
		System.out.println("-// division assign '/='")
		parr[0].arrdouble_1[0] = 10000.0d 
		System.out.println("parr[0].arrdouble_1[0] /= 10.0d ; parr[0].arrdouble_1[0] = " + (parr[0].arrdouble_1[0] /= 10.0d ) )
		System.out.println( parr[0].arrdouble_1[0]  )
		if( parr[0].arrdouble_1[0] != 1000.0d ) return false
		
		if( ( parr[0].arrdouble_1[0] /= 10.0d ) != 100.0d ) return false
		if( ( parr[0].arrdouble_1[0] /= -10.0d ) != -10.0d ) return false		
		
		
		// rest assign '%='
		System.out.println("-// rest assign '%='")
		parr[0].arrdouble_1[0] = 15.0d 
		System.out.println("parr[0].arrdouble_1[0] %= 9.0d ; parr[0].arrdouble_1[0] = " + (parr[0].arrdouble_1[0] %= 9.0d ) )
		System.out.println( parr[0].arrdouble_1[0]  )
		if( parr[0].arrdouble_1[0] != 6.0d ) return false

		if( ( parr[0].arrdouble_1[0] %= 4.0d ) != 2.0d ) return false
		if( ( parr[0].arrdouble_1[0] %= 2.0d ) != 0.0d ) return false	

		
		// plus assign '+='
		System.out.println("-// plus assign '+='")
		parr[0].arrdouble_1[0] = 10.0d 
		System.out.println( parr[0].arrdouble_1[0] += 10.0d )
		System.out.println( parr[0].arrdouble_1[0]  )
		if( parr[0].arrdouble_1[0] != 20.0d ) return false
		
		if( ( parr[0].arrdouble_1[0] += 10.0d ) != 30.0d ) return false
		if( ( parr[0].arrdouble_1[0] += -10.0d ) != 20.0d ) return false
		
		
		// minus assign '-='
		System.out.println("-// minus assign '-='")
		parr[0].arrdouble_1[0] = 30.0d 
		System.out.println( parr[0].arrdouble_1[0] -= 10.0d )
		System.out.println( parr[0].arrdouble_1[0]  )
		if( parr[0].arrdouble_1[0] != 20.0d ) return false

		if( ( parr[0].arrdouble_1[0] -= 10.0d ) != 10.0d ) return false
		if( ( parr[0].arrdouble_1[0] -= -10.0d ) != 20.0d ) return false
	
		return true

	}		
	
	
	
	
	fn longtype_test()->boolean
	{
		System.out.println("#long type test")
	
		l:long = 1L
		l2:long = 1L
		l3:long = 2L
		obj:TestSubSubSub = TestSubSubSub()
		tmp_l:long = 0L
		
		b:boolean = ( l == 1L )
		if( ! b ) return false

		if( l != 1L ) return false
		if( !( l == 1L) ) return false
		
		if( 1L != l ) return false
		if( !( 1L == l ) ) return false
		
		if( l != l2 ) return false
		if( ! ( l == l2) ) return false
	
		if( l == l3 ) return false
		if( !(l != l3) ) return false

		if( l < 0L ) return false 
		if( ! ( l < 10L ) ) return false
	
		if( !( l > 0L ) ) return false
		if( l > 10L ) return false

		l = 1L
		obj.l = 0L
		tmp_l = 0L		
		
		System.out.println("l="+l +", tmp_l=" + tmp_l )

		tmp_l = l++
		System.out.println("l="+l +", tmp_l=" + tmp_l )
		if( l != 2L ) return false
		if( tmp_l != 1L ) return false
		
		tmp_l = l++
		System.out.println("l="+l +", tmp_l=" + tmp_l )
		if( l != 3L ) return false
		if( tmp_l != 2L ) return false

		obj.l = 0L
		System.out.println("obj.l=" + obj.l +", tmp_l=" + tmp_l )

		tmp_l = obj.l++
		System.out.println("obj.l="+obj.l +", tmp_l=" + tmp_l )
		if( obj.l != 1L ) return false
		if( tmp_l != 0L ) return false

		tmp_l = obj.l++		
		System.out.println("obj.l="+obj.l +", tmp_l=" + tmp_l )
		if( obj.l != 2L ) return false
		if( tmp_l != 1L ) return false

	
		tmp_l = ++l
		System.out.println("l="+l +", tmp_l=" + tmp_l )
		if( l != 4L ) return false
		if( tmp_l != 4L ) return false

		tmp_l = ++l
		System.out.println("l="+l +", tmp_l=" + tmp_l )
		if( l != 5L ) return false
		if( tmp_l != 5L ) return false
	
		tmp_l = ++obj.l		
		System.out.println("obj.l="+obj.l +", tmp_l=" + tmp_l )
		if( obj.l != 3L ) return false
		if( tmp_l != 3L ) return false
		
		tmp_l = ++obj.l		
		System.out.println("obj.l="+obj.l +", tmp_l=" + tmp_l )
		if( obj.l != 4L ) return false
		if( tmp_l != 4L ) return false
	
		obj_l:Long = Long(1000L)
		System.out.println( obj_l )
		if( ! obj_l.equals( Long(1000L) ) ) return false
	
		cl:long = obj_l
		System.out.println( cl )
		if( cl != 1000L ) return false
	
		list:java.util.LinkedList = java.util.LinkedList()
		list.add(obj_l)
		list.add(cl)
		
		System.out.println(list)
		
		System.out.println("list.get(0)=" + list.get(0) )
		System.out.println("list.get(1)=" + list.get(1) )
		
		if( ! list.get(0).equals( Long(1000L) ) ) return false
		if( ! list.get(1).equals( Long(1000L) ) ) return false
		
		obj_l2:Long = Long<- list.get(0)
		cl2:long = long<- list.get(0)
		System.out.println("obj_l2=" + obj_l2)
		System.out.println("cl2=" + cl2)
	
		if( obj_l2 != 1000L ) return false
		if( cl2 != 1000L ) return false
	
		System.out.println("Integer = " + Integer(100))
		
		if( Integer(100) != 100 ) return false
	
	
		return true
	}
	

	
	
	fn type_value_range_test()->boolean {

		System.out.println("#type_value_range_test")

		/* Integer Range Checking */
		i:int = 0
		o_cnt : int = 0
		for( i = 2147480000 ; i < 2147483647 ; i++)
		{
			if( i > 2147483000 ) {
				//System.out.println("i=" + i )
				o_cnt ++	
			}	
		}
		
		System.out.println("o_cnt =" + o_cnt)
		if( o_cnt != 646 ) return false

		System.out.println("i =" + i)
		if( i != 2147483647 ) return false
	
		i = 0x10
		System.out.println("i = 0x10 = " + i )
		if( i != 16 ) return false
		
		o_cnt = 0
		//for( i = 0x0 ; i <   0x80000000 ; i++) // this creates too big integer literal error
		for( i = 0x7FFFF000 ; i < 0x7FFFFFFF ; i++)
		{
			if( i > 0x7FFFFD78 ) {
				//System.out.println("i=" + i )
				o_cnt ++	
			}	
		}
		
		System.out.println("o_cnt =" + o_cnt)
		if( o_cnt != 646 ) return false

		System.out.println("i =" + i)
		if( i != 2147483647 ) return false
		


		/* long Range Checking */
		li:long = 0L
		l:long = 0L
		o_cnt = 0
		
		
		for( li = 9223372036854700000L ; li < 9223372036854775807L ; li++)
		{
			o_cnt++
		}
		
		System.out.println("li =" + li)
		if( li != 9223372036854775807L ) return false	
				
		System.out.println("o_cnt =" + o_cnt)
		if( o_cnt != 75807 ) return false
	
		li = 0x10L
		System.out.println("li = 0x10L = " + li )
		if( li != 16L ) return false
		
		o_cnt = 0
		//for( li = 0x7FFFFFFFFFFED7E0L ; li < 0x8000000000000000L ; li++) // this creates too big long integer literal error
		for( li = 0x7FFFFFFFFFFED7E0L ; li <   0x7FFFFFFFFFFFFFFFL ; li++)
		{
			o_cnt++
		}
		
		System.out.println("li =" + li)
		if( li != 9223372036854775807L ) return false	
				
		System.out.println("o_cnt =" + o_cnt)
		if( o_cnt != 75807 ) return false

		
		return true
	}	
	
	
	fn test_map()->boolean {

		if( !test_int_map() ) return false
		if( !test_boolean_map() ) return false
		if( !test_String_map() ) return false
	
		return true
	}
	
	fn test_int_map()->boolean {
	
		System.out.println("#Test int Map")
	
		a1:int[] = int[100]
		for(i:int=0 ; i< a1.length ; i++) 	a1[i] = i
		//for(i:int=0 ; i< a1.length ; i++) 	System.out.println("a1["+i+"] = "+a1[i])
		//a1[10] = 20 // this makes test failure
		for(i:int=0 ; i< a1.length ; i++) 	if( a1[i] != i ) return false
		
		a2:int[][] = int[100][]
		a2[0] = a1
		for(i:int=0 ; i< a2.length ; i++) 	a2[0][i] = i
		//for(i:int=0 ; i< a2.length ; i++) 	System.out.println("a2[0]["+i+"] = "+a2[0][i])
		for(i:int=0 ; i< a2.length ; i++) 	if( a2[0][i] != i ) return false
		
		a2_1:int[][] = int[100][]
		a2_1[0] = a2[0]
		for(i:int=0 ; i< a2_1.length ; i++) 	a2_1[0][i] = i
		//for(i:int=0 ; i< a2_1.length ; i++) 	System.out.println("a2_1[0]["+i+"] = "+a2_1[0][i])
		for(i:int=0 ; i< a2_1.length ; i++) 	if( a2_1[0][i] != i ) return false

		a3:int[][][] = int[100][][]
		a3[0] = a2
		for(i:int=0 ; i< a3.length ; i++) 	a3[0][0][i] = i
		//for(i:int=0 ; i< a3.length ; i++) 	System.out.println("a3[0][0]["+i+"] = "+a3[0][0][i])
		for(i:int=0 ; i< a3.length ; i++) 	if( a3[0][0][i] != i ) return false

		
		int_map:int[][] = int[10][]
		for( i:int = 0 ; i < 10 ; i++)
			int_map[i] = int[10]
	
		for( i:int = 0 ; i < int_map.length ; i++ )
			for( j:int = 0 ; j < int_map[i].length ; j++)
				int_map[i][j] = i * j
	
		for( i:int = 0 ; i < int_map.length ; i++ )
		{
			for( j:int = 0 ; j < int_map[i].length ; j++)
			{
				System.out.print(" " + int_map[i][j])
				
				if( int_map[i][j] != i * j ) return false
			}
			System.out.println()
		}
	
		p:TestSuperParent = TestSuperParent()
	
		// member int map dim -1
		for( i:int=0 ; i< p.arrint_1.length ; i++ ) p.arrint_1[i] = i
		//for( i:int=0 ; i< p.arrint_1.length ; i++ ) System.out.println( "p.arrint_1["+i+"] =" +  p.arrint_1[i] )
		for( i:int=0 ; i< p.arrint_1.length ; i++ ) if( p.arrint_1[i] != i ) return false
	
		p.arrint_1 = int[100];
		// member int map dim -1
		for( i:int=(p.arrint_1.length-1) ; i>=0  ; i-- ) p.arrint_1[i] = i
		//for( i:int=(p.arrint_1.length-1) ; i>=0  ; i-- ) System.out.println( "p.arrint_1["+i+"] =" +  p.arrint_1[i] )
		for( i:int=(p.arrint_1.length-1) ; i>=0  ; i-- ) if( p.arrint_1[i] != i ) return false
	
		// member static int map dim -1
		for( i:int=0 ; i< p.static_arrint_1.length ; i++ ) p.static_arrint_1[i] = i
		//for( i:int=0 ; i< p.static_arrint_1.length ; i++ ) System.out.println( "p.static_arrint_1["+i+"] =" +  p.static_arrint_1[i] )
		for( i:int=0 ; i< p.static_arrint_1.length ; i++ ) if( p.static_arrint_1[i] != i ) return false
	
		//  member static int map dim -1
		//for( i:int=0 ; i< TestSuperParent.static_arrint_1.length ; i++ ) 
		//	System.out.println( "TestSuperParent.static_arrint_1["+i+"] =" +  TestSuperParent.static_arrint_1[i] )
		for( i:int=0 ; i< TestSuperParent.static_arrint_1.length ; i++ ) 
			if( TestSuperParent.static_arrint_1[i] != i ) return false
		
		for( i:int = 0 ; i < p.int_map.length ; i++ )
			for( j:int = 0 ; j < p.int_map[i].length ; j++)
				p.int_map[i][j] = i * j
	
		for( i:int = 0 ; i < p.int_map.length ; i++ )
		{
			for( j:int = 0 ; j < p.int_map[i].length ; j++)
			{
				System.out.print(" " + p.int_map[i][j])
				
				if( p.int_map[i][j] != i * j ) return false
			}
			System.out.println()
		}
		
		return true
	}

	
	
	fn test_boolean_map()->boolean {
	
		System.out.println("#Test boolean Map")

		// if i is even -> true
		// if i is not even -> false
		
		a1:boolean[] = boolean[100]
		for(i:int=0 ; i< a1.length ; i++) 
			a1[i] = if( i % 2 == 0 ) true else false
		//for(i:int=0 ; i< a1.length ; i++) 	System.out.println("a1["+i+"] = "+a1[i])
		//a1[10] = false // this makes test failure
		for(i:int=0 ; i< a1.length ; i++) 	
			if( 
				a1[i] != ( if( i % 2 == 0 ) true else false )  
			) return false

			
		a2:boolean[][] = boolean[100][]
		a2[0] = a1
		for(i:int=0 ; i< a2.length ; i++) 	
			a2[0][i] = if( i % 2 == 0 ) true else false
		//for(i:int=0 ; i< a2.length ; i++) 	System.out.println("a2[0]["+i+"] = "+a2[0][i])
		for(i:int=0 ; i< a2.length ; i++) 
			if( 
				a2[0][i] != ( if( i % 2 == 0 ) true else false ) 
			) return false		

			
		a2_1:boolean[][] = boolean[100][]
		a2_1[0] = a2[0]
		for(i:int=0 ; i< a2_1.length ; i++) 
			a2_1[0][i] = if( i % 2 == 0 ) true else false
		//for(i:int=0 ; i< a2_1.length ; i++) 	System.out.println("a2_1[0]["+i+"] = "+a2_1[0][i])
		for(i:int=0 ; i< a2_1.length ; i++)
			if( 
				a2_1[0][i] != ( if( i % 2 == 0 ) true else false ) 
			) return false				

		a3:boolean[][][] = boolean[100][][]
		a3[0] = a2
		for(i:int=0 ; i< a3.length ; i++) 
			a3[0][0][i] = if( i % 2 == 0 ) true else false
		//for(i:int=0 ; i< a3.length ; i++) 	System.out.println("a3[0][0]["+i+"] = "+a3[0][0][i])
		for(i:int=0 ; i< a3.length ; i++)
			if( 
				a3[0][0][i] != ( if( i % 2 == 0 ) true else false ) 
			) return false			


		bool_map:boolean[][] = boolean[10][]
		for( i:int = 0 ; i < 10 ; i++)
			bool_map[i] = boolean[10]
	
		for( i:int = 0 ; i < bool_map.length ; i++ )
			for( j:int = 0 ; j < bool_map[i].length ; j++)
				bool_map[i][j] = if( i * j % 2 == 0 ) true else false
	
		for( i:int = 0 ; i < bool_map.length ; i++ )
		{
			for( j:int = 0 ; j < bool_map[i].length ; j++)
			{
				System.out.print(" " + bool_map[i][j])
				
				if( 
					bool_map[i][j] != ( if(  i * j % 2 == 0 ) true else false ) 
				) return false			
				
			}
			System.out.println()
		}

		p:TestSuperParent = TestSuperParent()
	
		// member int map dim -1
		for( i:int=0 ; i< p.arrbool_1.length ; i++ ) 
			p.arrbool_1[i] = if( i % 2 == 0 ) true else false
		//for( i:int=0 ; i< p.arrbool_1.length ; i++ ) System.out.println( "p.arrbool_1["+i+"] =" +  p.arrbool_1[i] )
		for( i:int=0 ; i< p.arrbool_1.length ; i++ ) 
			if( 
				p.arrbool_1[i] != ( if( i % 2 == 0 ) true else false )  
			) return false

		p.arrbool_1 = boolean[100];
		// member int map dim -1
		for( i:int=(p.arrbool_1.length-1) ; i>=0  ; i-- ) 
			p.arrbool_1[i] = if( i % 2 == 0 ) true else false
		//for( i:int=(p.arrbool_1.length-1) ; i>=0  ; i-- ) System.out.println( "p.arrbool_1["+i+"] =" +  p.arrbool_1[i] )
		for( i:int=(p.arrbool_1.length-1) ; i>=0  ; i-- )
			if( 
				p.arrbool_1[i] != ( if( i % 2 == 0 ) true else false )  
			) return false		

		// member static int map dim -1
		for( i:int=0 ; i< p.static_arrbool_1.length ; i++ )
			p.static_arrbool_1[i] = if( i % 2 == 0 ) true else false		
		//for( i:int=0 ; i< p.static_arrbool_1.length ; i++ ) System.out.println( "p.static_arrbool_1["+i+"] =" +  p.static_arrbool_1[i] )
		for( i:int=0 ; i< p.static_arrbool_1.length ; i++ )
			if( 
				p.static_arrbool_1[i] != ( if( i % 2 == 0 ) true else false )  
			) return false

		//  member static int map dim -1
		//for( i:int=0 ; i< TestSuperParent.static_arrbool_1.length ; i++ ) 
		//	System.out.println( "TestSuperParent.static_arrbool_1["+i+"] =" +  TestSuperParent.static_arrbool_1[i] )
		for( i:int=0 ; i< TestSuperParent.static_arrbool_1.length ; i++ ) 
			if( 
				TestSuperParent.static_arrbool_1[i] != ( if( i % 2 == 0 ) true else false )  
			) return false

		for( i:int = 0 ; i < p.bool_map.length ; i++ )
			for( j:int = 0 ; j < p.bool_map[i].length ; j++)
				p.bool_map[i][j] =  if( i * j % 2 == 0 ) true else false
	
		for( i:int = 0 ; i < p.bool_map.length ; i++ )
		{
			for( j:int = 0 ; j < p.bool_map[i].length ; j++)
			{
				System.out.print(" " + p.bool_map[i][j])
				
				if( 
					p.bool_map[i][j] != if( i * j % 2 == 0 ) true else false 
				) return false
			}
			System.out.println()
		}
		
		return true
	
	}

	
	fn test_String_map()->boolean {
	
		System.out.println("#Test String Map")

		str_a1:String[] = String[100]
		for(i:int=0 ; i< str_a1.length ; i++) 	str_a1[i] = ("Hello" + i)
		//for(i:int=0 ; i< str_a1.length ; i++) 	System.out.println("str_a1["+i+"] = "+str_a1[i])
		//str_a1[10] = "Hello" // this makes test failure
		for(i:int=0 ; i< str_a1.length ; i++) if( ! str_a1[i].equals("Hello" + i) ) return false
		
		str_a2:String[][] = String[100][]
		str_a2[0] = str_a1
		for(i:int=0 ; i< str_a1.length ; i++) 	str_a2[0][i] = ("Hello" + i)
		//for(i:int=0 ; i< str_a1.length ; i++) 	System.out.println("str_a2[0]["+i+"] = "+str_a2[0][i])
		for(i:int=0 ; i< str_a1.length ; i++) if( ! str_a2[0][i].equals("Hello" + i) ) return false
	
		p:TestSuperParent = TestSuperParent()
	
		// member string map dim -1
		for(i:int=0 ; i< p.arrstr_1.length ; i++) 	p.arrstr_1[i] = ("Hello" + i)
		//for(i:int=0 ; i< p.arrstr_1.length ; i++) 	System.out.println("p.arrstr_1["+i+"] = "+p.arrstr_1[i])
		for(i:int=0 ; i< p.arrstr_1.length ; i++) if( ! p.arrstr_1[i].equals("Hello" + i) ) return false
	
		p.arrstr_1 = String[100]
		for(i:int=0 ; i< p.arrstr_1.length ; i++) 	p.arrstr_1[i] = ("Hello" + i)
		//for(i:int=0 ; i< p.arrstr_1.length ; i++) 	System.out.println("p.arrstr_1["+i+"] = "+p.arrstr_1[i])
		for(i:int=0 ; i< p.arrstr_1.length ; i++) if( ! p.arrstr_1[i].equals("Hello" + i) ) return false

		// member string map dim -2
		for(i:int=p.arrstr_2[0].length-1 ; i >= 0 ; i--) p.arrstr_2[0][i] = ("Hello" + i)
		//for(i:int=p.arrstr_2[0].length-1 ; i >= 0 ; i--) System.out.println("p.arrstr_2[0]["+i+"] = "+p.arrstr_2[0][i])
		for(i:int=p.arrstr_2[0].length-1 ; i >= 0 ; i--) if( ! p.arrstr_2[0][i].equals("Hello" + i) ) return false

		// member singleton string map dim-1
		for(i:int=0 ; i< p.static_arrstr_1.length ; i++) 	p.static_arrstr_1[i] = ("Hello" + i)
		//for(i:int=0 ; i< p.static_arrstr_1.length ; i++) 	System.out.println("p.static_arrstr_1["+i+"] = "+p.static_arrstr_1[i])
		for(i:int=0 ; i< p.static_arrstr_1.length ; i++) if( ! p.static_arrstr_1[i].equals("Hello" + i) ) return false
	
		p.arrstr_1 = String[100]
		for(i:int=0 ; i< TestSuperParent.static_arrstr_1.length ; i++) 	TestSuperParent.static_arrstr_1[i] = ("Hello" + i)
		//for(i:int=0 ; i< TestSuperParent.static_arrstr_1.length ; i++) 	System.out.println("TestSuperParent.static_arrstr_1["+i+"] = "+TestSuperParent.static_arrstr_1[i])
		for(i:int=0 ; i< TestSuperParent.static_arrstr_1.length ; i++) if( ! TestSuperParent.static_arrstr_1[i].equals("Hello" + i) ) return false

		// member singleton string map dim-2
		for(i:int=p.static_arrstr_2[0].length-1 ; i >= 0 ; i--) p.static_arrstr_2[0][i] = ("Hello" + i)
		//for(i:int=p.static_arrstr_2[0].length-1 ; i >= 0 ; i--) System.out.println("p.static_arrstr_2[0]["+i+"] = "+p.static_arrstr_2[0][i])
		for(i:int=p.static_arrstr_2[0].length-1 ; i >= 0 ; i--) if( ! p.static_arrstr_2[0][i].equals("Hello" + i) ) return false
		
		
		return true
	}
	
	
	fn recursive_test()->boolean {
	
		if( ! class_self_ref_test() ) return false
	
		return true
	}
	
	fn class_self_ref_test()->boolean {

		System.out.println("#class_self_ref_test")

		le:ListEle = ListEle(0);
		re:ListEle = le
		ce:ListEle = null;
		
		for( i:int = 1 ; i <= 10 ; i++)
		{	
			ce = ListEle(i)
			le.next = ce
			le = ce	
		}

		sum:int = class_self_ref_sum(re)
		System.out.println("sum="+sum)
		
		if( sum != 55 ) return false

		return true
	}


	fn 	class_self_ref_sum(le:ListEle)->int {
	
		if( le == null ) return 0
		
		return le.c + class_self_ref_sum(le.next)
		
	}
	
	
	fn typeinference_test()->boolean {
	
		System.out.println("#typeinference_test")
		
		if( ! stackvar_typeinference_test() ) return false
	
		if( ! ret_type_inference_test() ) return false
	
		return true
	}
	
	
	fn ret_type_inference_test() -> boolean  {
	
		if( ret_type_inference_test_ret_int() != 0 ) return false
		
		if( ! ret_type_inference_test_string().equals("HelloWorld") ) return false
		
		test_print( ret_type_inference_test_ret_int() )

		return true	
	}
	
	
	
	
	fn test_print(a:int)->void{
	
		System.out.println(a)
	}


	fn ret_type_inference_test_ret_int() {
	
		return 0
	}


	fn ret_type_inference_test_string() {
	
		return "HelloWorld"
	}
	
	
	fn stackvar_typeinference_test()->boolean {
	
		System.out.println("#stackvar_type_inference_test")
	
		a = ((10))
		
		if( a != 10 ) return false
		
		b = 20
		
		if( b != 20 ) return false

		// inference from operation
		c = a + b

		
		System.out.println("c="+c)
		if( c != 30 ) return false

		// inference from method
		
		d = stackvar_typeinference_test_func()
		
		System.out.println("d="+d)
		if( d != 10 ) return false

		e = stackvar_typeinference_test_func() * 10
		
		System.out.println("e="+e)
		if( e != 100 ) return false

		// inference from member
		p:TestSuperParent = TestSuperParent()
		
		f = p.aint
		
		System.out.println("f="+f)
		if( f != 0 ) return false

		// inference from array member
		arr1:int[] = int[100]
		
		arr1[0] = 500
		g = arr1[0]
		System.out.println("g="+g)
		if( g != 500 ) return false
		
		
		// array type inference
		arr2 = int[100]
		arr2[0] = 50
		System.out.println("arr2[0]="+arr2[0])
		if( arr2[0] != 50 ) return false

		arr3 = int[100][]
		arr3[0] = int[100]
		
		arr4 = arr3
		arr4[0][0] = 100
		if( arr4[0][0] != 100 ) return false
		System.out.println("arr4[0][0]="+arr4[0][0])
		
		//h = null // this creates error
		//h:int = null // this creates error
		
		return true
	}
	
	
	fn stackvar_typeinference_test_func()->int {
	
		return 10
	}	
	
	
	fn thread_test() 
	{
		System.out.println("#thread_test")
	
		num_thread = 10
		
		ths = ThreadTestClass[num_thread]
		
		for( i = 0 ; i < ths.length ; i++)
		{
			ths[i] = ThreadTestClass(10000)
		}

		for( i = 0 ; i < ths.length ; i++)
		{
			ths[i].start()
		}

		for( i = 0 ; i < ths.length ; i++)
		{
			ths[i].join()
		}
		
		for( i = 0 ; i < ths.length ; i++)
		{
			if( ths[i].sum != 49995000 ) return false
		}
		
		
		System.out.println("Completed")
	
		return true
	}	
	
	
	
	
	fn anonyfunc_test()->boolean
	{
		System.out.println("Assigning Function to variable")

		a: f( f(int,int)->int, int, int)->int =
			fn( fv:f(int,int)->int, a:int, b:int)->int {

				System.out.print(
					" calling function as a parameter:")
				System.out.println(fv)
				return fv(a, b)
			}

		System.out.print("var a:")
		System.out.println(a)
		if( a.toString().equals("MethodHandle(MethodHandle,int,int)int") ) {} else return false


		b: f(int, int)->int = fn(a:int, b:int)->int := a + b

		System.out.print("var b:")
		System.out.println(b)
		if( b.toString().equals("MethodHandle(int,int)int") ) {} else return false


		brslt:int = b(100, 200)

		System.out.println(brslt)
		if( brslt != 300 )  return false


		System.out.println("Calling Function with Method Handle Variable")

		c:int = a(b, 100, 200)

		System.out.println(c)

		if( c != 300 ) return false


		System.out.println("Calling Function with function definition")

		d:int =
			fn(ff: f(int)->int, a:int)->int
			{
				System.out.print(" calling function as a parameter:")
				System.out.println(ff)
				return ff(a)
			} ( fn(a:int)->int := 1000 + a, 600)

		System.out.println(d)

		if( d != 1600 ) return false


		System.out.println(
			"Assigning Function to variable"
		)

		f1: f( f(String, String)->String, String, String)->String =
			fn( fv:f(String,String)->String, a:String, b:String)->String {

				System.out.print(" calling function as a parameter:")
				System.out.println(fv)
				return fv(a, b)
			}

		System.out.print("var f1:")
		System.out.println(f1)
		if( f1.toString().equals("MethodHandle(MethodHandle,String,String)String") ) {} else return false


		f2: f(String, String)->String = fn(a:String, b:String)->String := a.concat(b)

		System.out.print("var f2:")
		System.out.println(f2)
		if( f2.toString().equals("MethodHandle(String,String)String") ) {} else return false


		System.out.println("Calling Function with Method Handle Variable")

		v3:String = f1(f2, "Hello", "World")
		System.out.println(v3)

		if( v3.equals("HelloWorld" ) ) { } else return false


		System.out.println("Calling Function with function definition")

		v4:String =
		 fn(ff: f(String, String)->String, a:String, b:String)
		 ->String
		 {
			System.out.print(
				" calling function as a parameter:")
			System.out.println(ff)
			return ff(a, b)
		 } ( fn(a:String, b:String)->String := a.concat(b),

		 	"Real", "World")

		System.out.println(v4)

		if( v4.equals("RealWorld") ) {} else return false




		v5: int = func_para( fn(a:int, b:int)->int := a + b, 10, 20)
		System.out.println(v5)
		if( v5 != 1030 ) return false



		v6: int = func_para( fn(a:int, b:int)->int := a - b, 20, 10)
		System.out.println(v6)
		if( v6 != 1010 ) return false

		obj1:TestSuperParent  = TestSuperParent()
		objv1:int = obj1.func1(10, 20)
		System.out.println(objv1)
		if( objv1 != 10030 ) return false

		obj1.func1 = fn(a:int, b:int)->int := a + b + 20000
		objv1 = obj1.func1(10, 20)
		System.out.println(objv1)
		if( objv1 != 20030 ) return false


		obj2:TestSuperParentOwner = TestSuperParentOwner()
		objv2:int = obj2.func2(10, 20)
		System.out.println(objv2)
		if( objv2 != 1030 ) return false

		obj2.func2 = fn(a:int, b:int)->int := a + b + 2000
		objv2 = obj2.func2(10, 20)
		System.out.println(objv2)
		if( objv2 != 2030 ) return false


		objv3:int = obj2.p.func1(10, 20)
		System.out.println(objv3)
		if( objv3 != 10030 ) return false

		obj2.p.func1 = fn(a:int, b:int)->int := a + b + 30000
		objv3 = obj2.p.func1(10, 20)
		System.out.println(objv3)
		if( objv3 != 30030 ) return false

		objv4:int = obj2.p.func_single(10, 20)
		System.out.println(objv4)
		if( objv4 != 50030 ) return false

		obj2.p.func_single = fn(a:int, b:int)->int := a + b + 60000

		objv4 = obj2.p.func_single(10, 20)
		System.out.println(objv4)
		if( objv4 != 60030 ) return false


		TestSuperParent.func_single = fn(a:int, b:int)->int := a + b + 70000

		objv4 = obj2.p.func_single(10, 20)
		System.out.println(objv4)
		if( objv4 != 70030 ) return false

		objv4 = TestSuperParent.func_single(10, 20)
		System.out.println(objv4)
		if( objv4 != 70030 ) return false


		localmem_func = fn(a:int, b:int)->int := a + b + 80000

		objv4 = localmem_func(10, 20)
		System.out.println(objv4)
		if( objv4 != 80030 ) return false

		localmem_func_single = fn(a:int, b:int)->int := a + b + 90000

		objv4 = localmem_func_single(10, 20)
		System.out.println(objv4)
		if( objv4 != 90030 ) return false


		cla  = 1
		clb  = 2L
		clc  = 3
		cld  = true
		cle  = "Hello"
		
	
		{
			clq:int = 
				fn closure_out(p : int)->int {
					System.out.println("p="+p)

					System.out.println("cla="+cla)
					if( cla != 1 ) throw Exception()

					System.out.println("clb="+clb)
					if( clb != 2L ) throw Exception()
					
					System.out.println("clc="+clc)
					if( clc != 3 ) throw Exception()
					
					System.out.println("cld="+cld)
					if( cld != true ) throw Exception()
					
					System.out.println("cle="+cle)
					if( ! cle.equals("Hello") ) throw Exception()
					
					
					//System.out.println("clq="+clq) // this creates error
				
					return p * 100
					
				}(10) 
	
			System.out.println("clq="+clq)
			if( clq != 1000 ) return false
			
		}
		catch Exception 
		{
			System.out.println("Exception was caught - Test Fail")
			return false
		}

		if( ! nested_closure_test() ) return false 

		if( ! static_closure_test() ) return false

		return true
	}


	fn static_closure_test()->boolean 
	{
		System.out.println("#static_closure_test ")
	
		outa = 10
	
		ff = static fn(a:int) {
			System.out.println("a="+a)
			System.out.println("closure="+closure)
			
			// System.out.println("outa="+outa) // accessing outa makes error
			// System.out.println("this="+this) // accessing this makes error
			// System.out.println("outb="+outb) // accessing outb makes error
			
			return a
		}

		outb = 10

		outc = ff( outb )

		if( outb != outc ) return false

		return true
	}



	fn nested_closure_test() {
	
		System.out.println("#nested_closure_test")
	
		a = 1
	
		d:boolean = 
		fn nested_closure_out(a : int)->boolean {

			System.out.println("a="+a)
			if( a != 10 ) return false

			System.out.println("closure.a="+closure.a)
			if( closure.a != 1 ) return false
		
			rslt = fn nested_closure_in( b : int )->boolean {
				System.out.println("b="+b)
				if( b != 100 ) return false

				System.out.println("closure.a="+closure.a)
				if( closure.a != 10 ) return false

				System.out.println("closure.closure.a="+closure.closure.a)
				if( closure.closure.a != 1 ) return false
				
				System.out.println("this="+this) // this indicates this of nested_closure_test
				System.out.println("closure.this="+closure.this) // this indicates this of nested_closure_test
				
				return true			
			}(100)
		
			if( ! rslt ) return false
		
			return true
			
		}(10) 
		
		if( !d ) return false
		
		System.out.println("a="+a)
		if( a != 1 ) return false

		e:int = 4
		
		return true
	}		


	fn gen_closure_member_access_test() -> f()->boolean
	{
		out_var:int = 1000

		new_func: f()->boolean =

			fn () -> boolean {

				System.out.print("closure=")
				System.out.println(closure)
				System.out.print("closure.this=")
				System.out.println(closure.this)
				System.out.print("closure.this.m=")
				System.out.println(closure.this.m)

				if( closure.this.m != 200 ) return false

				System.out.print("this=")
				System.out.println(this)
				System.out.print("this.m=")
				System.out.println(this.m)

				if( closure.this.m != 200 ) return false

				// System.out.print("m=") // Accessing class member directly is not allowed
				// System.out.println(m)  // Accessing class member directly is not allowed

				sum:int = out_var + closure.this.m

				System.out.print("out_var + closure.this.m=")
				System.out.println(sum)

				if( sum != 1200 ) return false


				return true
			}

		return new_func
	}


	fn clojure_test()->boolean
	{
		System.out.println("clojure_test")

		m = 200

		new_func : f()->boolean = gen_closure_member_access_test()

		if( new_func() == false ) return false

		// closure a + b
		new_func2 : f(int ,int)->int =
				gen_closure(
					fn(a:int, b:int)->int := a + b,
					500
				)

		System.out.println( new_func2(30, 20) )
		if( new_func2(30, 20) != 750 ) return false


		// closure a - b
		new_func2 =
				gen_closure(
					fn(a:int, b:int)->int := a - b,
					500
				)

		System.out.println( new_func2(30, 20) )
		if( new_func2(30, 20) != 710 ) return false

		if(  ( fn(a:int, b:int)->int := a + b )(100, 10) != 110 ) return false

		if(  ( fn(a:int, b:int)->int := a - b )(100, 10) != 90 ) return false

		System.out.println("Function Call with Function Call")

		v:int = gen_closure(
				fn(a:int, b:int)->int := a + b,
				500
		)(10, 5)

		System.out.println(
		 v )

		 if( v != 715 ) return false

		System.out.println(
			gen_closure( fn(a:int, b:int)->int := a + b, 500 )(10, 5)
		 )

		if( gen_closure( fn(a:int, b:int)->int := a + b, 500 )(10, 5) != 715 ) return false



		return true
	}


	fn gen_closure( func: f(int, int)->int, e:int) -> ( f(int,int)->int )
	{
		new_func: f(int,int)->int =

			fn ( a:int, b:int ) -> int {

				return func(a, b) + e + this.m
			}

		return new_func
	}

	fn func_para( func: f(int, int)->int, a:int, b:int )->int := func(a, b) + 1000




	fn apply_test()->boolean
	{
		c:int = 0

		// apply type 1 : function apply when function assignment
		fvar : f(int, int)->int = fn (a, b) := a + b
		c = fvar(1,1)
		System.out.println(c)
		if( c != 2 ) return false

		//fvar  = fn (a, b) := a + b // this creates error
		// - Apply function cannot be assigned to Unresolved Type Variable
		
		//fvar : f(int, int)->boolean = fn (a, b) := a + b // this creates error
		// inferrenced return type will be 'int', but defined ret type is boolean...

		
		// apply type 2 : function apply when function as a parameter		
		c = apply_foo( fn (a, b) := a + b )
		System.out.println(c) 
		if( c != 3 ) return false
		
		c = ApplyOwner.apply_foo( fn (a, b) := a + b, 1, 2 )
		System.out.println("c="+c)
		if( c != 3 ) return false
		
		owner = ApplyOwner()
		c = owner.apply_foo( fn (a, b) := a + b, 1, 2 )
		System.out.println("c="+c)	
		if( c != 3 ) return false
		
		
		// apply type 3-1 : function apply when function invoke		
		cint = ( fn(a, b) := a + b ) (5, 5) 
		System.out.println("cint="+cint)
		if( cint != 10 ) return false

		cstr = ( fn(a, b) := a + b ) ("Hello", "World") 
		System.out.println("cstr="+cstr)
		if( ! cstr.equals("HelloWorld" ) ) return false

		// {} was changed to stream
		//clist = ( fn(a, b) := a + b ) ({ 1 2 3 4 }, { 1 2 3 4 }) 
		list1 = mezi.util.LangList()
		list1.add( 1 )
		list1.add( 2 )
		list1.add( 3 )
		list1.add( 4 )
		list2 = mezi.util.LangList()
		list2.add( 1 )
		list2.add( 2 )
		list2.add( 3 )
		list2.add( 4 )
		
		clist = ( fn(a, b) := a + b ) ( list1, list2 ) 
		
		System.out.println("clist="+clist)
		if( clist.size() != 8 ) return false 
		

		// apply type 3-2 : function apply when function invoke		
		c = apply_foo2(10, 20)
		System.out.println(c)
		if( c != 30 ) return false


		// type inference with apply function
		ra = apply_plus(1, 1)
			System.out.println("ra(int) = "+ra)
		if( ra != 2 ) return false

		rb = apply_plus(1L, 1L)
			System.out.println("rb(long) = "+rb)
		if( rb != 2L ) return false

		rc = apply_plus("Hello", "World")
			System.out.println("rc(String) = "+rc)
		if( ! rc.equals("HelloWorld") ) return false 
		
		/* // temporally disable ( list does not support '+' )
		rd = apply_plus( { 1 2 3 4 }, { 5 6 7 8 } )
			System.out.println("rd(List) = "+rd)
		if( rd.size() != 8 ) return false 
		*/

		if( !nested_apply_test() ) return false


		return true	
	}

	fn apply_foo(fvar: f(int, int)->int) := fvar(1, 2)
	//fn apply_foo(fvar: f(int, int)->int)->int := fvar(1, 2) // apply_foo return type can be specified
	
	
	fn apply_foo2(a, b) := a + b 


	static fn apply_plus(a, b) := a + b



	fn nested_apply_test()->boolean 
	{
		System.out.println("# nested_apply_test")
	
		c = nested_apply_foo(1)
		System.out.println("c="+c)
		
		if( c != 1111 ) return false
		
		return true
	}
	
	
	static fn nested_apply_foo(a) {
	
		c = Test.nested_apply_foo2(a) + 1000

		if( c != 1111 ) return -1
		
		return c
	}	
	
	
	static fn nested_apply_foo2(a) {
	
		c = Test.nested_apply_foo3(a) + 100
	
		if( c != 111 ) return -1
	
		return c
	}


	static fn nested_apply_foo3(a) {
	
		return a + 10
	}




}


class ApplyOwner 
{
	static fn apply_foo(fvar: f(int, int)->int, a:int, b:int) := fvar(a, b)
}



class TestException
	- extends: java.lang.Exception
{ 
	fn TestException() 
	{
		this("TestException Message") 
	}

	fn TestException(msg:String) 
	{ 
		super(msg)
	}
} 




class TestSuperParentOwner
{
	p:TestSuperParent

	func2:f(int, int)->int

	fn TestSuperParentOwner()
	{
		p = TestSuperParent()

		func2 = fn(a:int, b:int)->int := a + b + 1000
	}

}


class TestSuperParent
	- extends: mezi.util.LangList
{

	mem_1:int
	var mem_2:int
	singleton static_mem1: int
	singleton static_mem2: int

	var func1:f(int, int)->int
	singleton func_single:f(int, int)->int

	// array test
	//int
	aint:int 
	bint:int
	singleton aint_static:int
	singleton bint_static:int  
	arrint_1:int[]
	singleton static_arrint_1:int[]
	arrint_2:int[][]
	singleton static_arrint_2:int[][]
	int_map:int[][]

	//char
	achar:char 
	bchar:char
	singleton achar_static:char
	singleton bchar_static:char  
	arrchar_1:char[]
	singleton static_arrchar_1:char[]
	arrchar_2:char[][]
	singleton static_arrchar_2:char[][]
	char_map:char[][]
	
	//short
	ashort:short 
	bshort:short
	singleton ashort_static:short
	singleton bshort_static:short  
	arrshort_1:short[]
	singleton static_arrshort_1:short[]
	arrshort_2:short[][]
	singleton static_arrshort_2:short[][]
	short_map:short[][]
	
	//byte
	abyte:byte 
	bbyte:byte
	singleton abyte_static:byte
	singleton bbyte_static:byte  
	arrbyte_1:byte[]
	singleton static_arrbyte_1:byte[]
	arrbyte_2:byte[][]
	singleton static_arrbyte_2:byte[][]
	byte_map:byte[][]

	
	//long
	along:long 
	blong:long
	singleton along_static:long
	singleton blong_static:long  
	arrlong_1:long[]
	singleton static_arrlong_1:long[]
	arrlong_2:long[][]
	singleton static_arrlong_2:long[][]
	long_map:long[][]

	//float
	afloat:float 
	bfloat:float
	singleton afloat_static:float
	singleton bfloat_static:float  
	arrfloat_1:float[]
	singleton static_arrfloat_1:float[]
	arrfloat_2:float[][]
	singleton static_arrfloat_2:float[][]
	float_map:float[][]
	
	//double
	adouble:double 
	bdouble:double
	singleton adouble_static:double
	singleton bdouble_static:double  
	arrdouble_1:double[]
	singleton static_arrdouble_1:double[]
	arrdouble_2:double[][]
	singleton static_arrdouble_2:double[][]
	double_map:double[][]
	
	// boolean
	abool:boolean
	bbool:boolean
	cbool:boolean
	singleton abool_static:boolean
	singleton bbool_static:boolean
	singleton cbool_static:boolean
	arrbool_1:boolean[]
	singleton static_arrbool_1:boolean[]
	arrbool_2:boolean[][]
	singleton static_arrbool_2:boolean[][]
	bool_map:boolean[][]
	
	// String
	arrstr_1:String[]
	singleton static_arrstr_1:String[]
	arrstr_2:String[][]
	singleton static_arrstr_2:String[][]

	
	fn TestSuperParent()
	{
		mem_1 = 0
		mem_2 = mem_1
		static_mem1 = 0
		static_mem2 = static_mem1

		func1 = fn(a:int, b:int)->int := a + b + 10000

		func_single = fn(a:int, b:int)->int := a + b + 50000
		
		
		// for array test
		// int
		aint = 0
		bint = 0
		aint_static	= 0	
		bint_static	= 0	
		arrint_1 = int[100]
		static_arrint_1 = int[100]
		arrint_2 = int[100][]
		static_arrint_2 = int[100][]
		arrint_2[0] = arrint_1
		static_arrint_2[0] = static_arrint_1
		int_map = int[10][]
		for( i:int = 0 ; i < 10 ; i++)
			int_map[i] = int[10]

		// char
		achar = '0'
		bchar = '0'
		achar_static	= '0'	
		bchar_static	= '0'	
		arrchar_1 = char[100]
		static_arrchar_1 = char[100]
		arrchar_2 = char[100][]
		static_arrchar_2 = char[100][]
		arrchar_2[0] = arrchar_1
		static_arrchar_2[0] = static_arrchar_1
		char_map = char[10][]
		for( i:int = 0 ; i < 10 ; i++)
			char_map[i] = char[10]

		// short
		ashort = 0s
		bshort = 0s
		ashort_static	= 0s	
		bshort_static	= 0s
		arrshort_1 = short[100]
		static_arrshort_1 = short[100]
		arrshort_2 = short[100][]
		static_arrshort_2 = short[100][]
		arrshort_2[0] = arrshort_1
		static_arrshort_2[0] = static_arrshort_1
		short_map = short[10][]
		for( i:int = 0 ; i < 10 ; i++)
			short_map[i] = short[10]		

		// byte
		abyte = 0b
		bbyte = 0b
		abyte_static	= 0b	
		bbyte_static	= 0b
		arrbyte_1 = byte[100]
		static_arrbyte_1 = byte[100]
		arrbyte_2 = byte[100][]
		static_arrbyte_2 = byte[100][]
		arrbyte_2[0] = arrbyte_1
		static_arrbyte_2[0] = static_arrbyte_1
		byte_map = byte[10][]
		for( i:int = 0 ; i < 10 ; i++)
			byte_map[i] = byte[10]		
			
		// long 
		along = 0L
		blong = 0L
		along_static	= 0L	
		blong_static	= 0L	
		arrlong_1 = long[100]
		static_arrlong_1 = long[100]
		arrlong_2 = long[100][]
		static_arrlong_2 = long[100][]
		arrlong_2[0] = arrlong_1
		static_arrlong_2[0] = static_arrlong_1
		long_map = long[10][]
		for( i:int = 0 ; i < 10; i++)
			long_map[i] = long[10]

		// float 
		afloat = 0.0f
		bfloat = 0.0f
		afloat_static	= 0.0f	
		bfloat_static	= 0.0f	
		arrfloat_1 = float[100]
		static_arrfloat_1 = float[100]
		arrfloat_2 = float[100][]
		static_arrfloat_2 = float[100][]
		arrfloat_2[0] = arrfloat_1
		static_arrfloat_2[0] = static_arrfloat_1
		float_map = float[10][]
		for( i:int = 0 ; i < 10; i++)
			float_map[i] = float[10]
		
		// double 
		adouble = 0.0d
		bdouble = 0.0d
		adouble_static	= 0.0d	
		bdouble_static	= 0.0d	
		arrdouble_1 = double[100]
		static_arrdouble_1 = double[100]
		arrdouble_2 = double[100][]
		static_arrdouble_2 = double[100][]
		arrdouble_2[0] = arrdouble_1
		static_arrdouble_2[0] = static_arrdouble_1
		double_map = double[10][]
		for( i:int = 0 ; i < 10; i++)
			double_map[i] = double[10]
		
		
		// boolean
		abool = true
		bbool = false
		cbool = true

		abool_static = true
		bbool_static = false
		cbool_static = true
		
		
		arrbool_1 = boolean[100]
		static_arrbool_1 = boolean[100]
		arrbool_2 = boolean[100][]
		static_arrbool_2 = boolean[100][]
		arrbool_2[0] = arrbool_1
		static_arrbool_2[0] = static_arrbool_1
		bool_map = boolean[10][]
		for( i:int = 0 ; i < 10 ; i++)
			bool_map[i] = boolean[10]

		// string
		arrstr_1 = String[100]
		static_arrstr_1 = String[100]
		arrstr_2 = String[100][]
		static_arrstr_2 = String[100][]
		arrstr_2[0] = arrstr_1
		static_arrstr_2[0] = static_arrstr_1
		

		
	}


	fn print_hello()->void := System.out.println("Hello")

	fn get_hello()->String := "Hello"

	fn mthd_func(a:int)->int := a + a + a + a

	static fn static_func(a:int)->int := a + a + a + a

	static fn static_func2(a:int)->String := "Hello"

	static fn static_func3(a:int)->int
	{
		s:int = 0;
		for(i:int=0;i<a;i=i+1) s = s + i
		return s
	}

	static fn static_func4(a:int)->{} := for(i:int=0;i<a;i=i+1) i


}




class TestSuperChild
	- extends: TestSuperParent
{
	fn TestSuperChild(a:java.lang.Object)
	{
		System.out.println(a)
	}

	fn twice(a:int)->int := a + a

	fn +(a:int, b:int)->int := a + b
	fn +(i:int)->boolean := add(i)
	fn +(str:String)->boolean := add(str)
	fn +(bool:boolean)->boolean := add(bool)

	fn +(strm:{})->boolean {
	
		list = strm.toList()
		
		size : int = list.size()

		for(i:int=0; i<size; i=i+1)
			add( list.get(i) )

		return true
	}

	fn childget(i:int)->java.lang.Object := get(i)

	fn [](i:int)->java.lang.Object := get(i)

	fn [](s:String)->java.lang.Object := get(java.lang.Integer.valueOf(s).intValue())

}





class ThreadTestClass 
	- extends : java.lang.Thread
{

	val:int
	sum:int

	fn ThreadTestClass(v:int)
	{
		val = v
		sum = 0
	}

	fn run()
	{
		sum = 0
		
		System.out.println("[ starting "+this.getName()+"]")
		
		for( i = 0 ; i < val ; i++) 
		{
			sum += i
		}
		System.out.println("["+this.getName()+"] sum="+sum)
		this.sum = sum
	}	
}


class BasicGrammarTest {

	static fn main(args: String[] ) {

		System.out.println("\n\n### BasicGrammarTest")
	
		{
			t = Test()
		
			a = 5
			
			tsub = t.referencing(a)

		    expect("# t.referencing_stack=", t.referencing_stack(a, a), a + a)
		    expect("# t.referencing_stack2=", t.referencing_stack2(a, a), a+a+10)
		    expect("# access_member=", t.access_resolved_class_member(222), 1000)
		    
		    tsub2 = tsub.c
		    
    		expect("# tsub.i=", tsub.i, a)
			expect("# tsub2.i=", tsub2.i, a + 100)
			expect("# tsub2.c.i=", tsub2.c.i, a + 100 + 1000)
			expect("# t.m=", t.m, a + 100 + 1000 + 10000)
			expect("# call_plus=", t.call_plus(1,2), 3)
			expect("# call_this_plus=", t.call_this_plus(1,2), 3)
			expect("# call_minus=", t.call_minus(10,2), 8)
			expect("# call_plus3=", t.plus(1,2,3), 6)
		    expect("# multi_assign=", t.multi_assign(), 5)
			expect("# multi_assign2=", t.multi_assign2(), 100)
			expect("# primary_assign_test=", t.primary_assign_test(), true)
			expect("# linefeed_test=", t.linefeed_test(), true)
			expect("# call_plus3=", t.plus(1,2,3), 6)
			expect("# sub_func_call=", t.sub_func_call(10,11), 21)
			expect("# sub_func_call3=", t.sub_func_call3(1,2,3), 6)

			expect("# no_reduce_func_call=", t.no_reduce_func_call("Test"), 1)
			expect("# func_reduce_member=", t.func_reduce_member(10), 10)
			expect("# func_reduce_fun=", t.func_reduce_fun(10, 20), 30)

			TestSub ts2 = t.getTestSubFull(10000)
			expect("# getTestSubFull=", ts2.i, 10000)
						
			t.system_print_test(11111)
			t.system_print_test(10000)

			expect("# test_string=", t.test_string("Hello"), "Hello World")
			expect("# test_string2=", t.test_string2("Hello", " World"), "Hello World")
			expect("# getTestSubStrgPlus=", t.getTestSubStrgPlus("111", "222", "333"), "111222333")
			expect("# testStrIndexOf=", t.testStrIndexOf("111222333", "222"), 3)
			expect("# branch_test=", t.branch_test(true, true), 1)
			expect("# branch_test=", t.branch_test(true, false), 2)
			expect("# branch_test=", t.branch_test(false, true), 3)
			expect("# branch_test=", t.branch_test(false, false), 4)
		
			expect("# compare_test=", t.compare_test(1, 1), 1)
			expect("# compare_test=", t.compare_test(1, 2), 2)
			expect("# compare_test=", t.compare_test(2, 1), 3)

		
			expect("# loop_test=", t.loop_test(), true)
	
			expect("# switch_test=", t.switch_test(), true)
			
			expect("# constructor_test=", t.constructor_test(4), 4)
			expect("# constructor_test=", Integer<- t.m_list.get(0), 1)
	
			expect("# constructor_test=", Integer <- t.m_list.get(1), 2)
			expect("# constructor_test=", Integer <- t.m_list.get(2), 3)
			expect("# constructor_test=", Integer <- t.m_list.get(3), 4)
			expect("# constructor_test=", Boolean <- t.m_list.get(4), true)
			expect("# constructor_test=", Boolean <- t.m_list.get(5), false)
			expect("# constructor_test=", Boolean <- t.m_list.get(6), true)
			expect("# constructor_test=", Boolean <- t.m_list.get(7), false)
			
			list:List = t.list_test()
			expect("# list_test=", Integer<-list.get(0), 0)
			expect("# list_test=", Integer<-list.get(1), 2)
			expect("# list_test=", Integer<-list.get(2), 6)
			expect("# list_test=", Integer<-list.get(3), 1000)
			expect("# list_test=", Integer<-list.get(4), 1001)
			expect("# list_test=", Integer<-list.get(5), 1001)
			expect("# list_test=", Integer<-list.get(6), 1002)
			expect("# list_test=", Integer<-list.get(7), 2000)
			expect("# list_test=", Integer<-list.get(8), 10000)
			expect("# list_test=", Integer<-list.get(9), 10001)
			expect("# list_test=", Integer<-list.get(10), 11000)
			expect("# list_test=", Integer<-list.get(11), 22)
			expect("# list_test=", Integer<-list.get(12), 23)

			expect("# list_test=", Integer<- (List<-list.get(13)).get(0), 0)
			expect("# list_test=", Integer<- (List<-list.get(13)).get(1), 1)
			expect("# list_test=", Integer<- (List<-list.get(13)).get(2), 2)
			expect("# list_test=", Integer<- (List<-list.get(14)).get(0), 5)
			expect("# list_test=", Integer<- (List<-list.get(14)).get(1), 6)
			expect("# list_test=", Integer<- (List<-list.get(14)).get(2), 7)
			
			expect("# if_expr_test=", t.if_expr_test(true), 1)
			expect("# if_expr_test=", t.if_expr_test(false), 2)
		
			expect("# if_expr_ret_test=", t.if_expr_ret_test(true), 1)
			expect("# if_expr_ret_test=", t.if_expr_ret_test(false), 2)
			
			
			sellist:List = t.selective_list_test(true)

			expect("# selective_list_test=", Integer<- sellist.get(0), 1)
			expect("# selective_list_test=", Integer<- sellist.get(1), 2)
			expect("# selective_list_test=", Integer<- sellist.get(2), 3)
			expect("# selective_list_test=", Integer<- (List<-sellist.get(3)).get(0), 5)
			expect("# selective_list_test=", Integer<- (List<-sellist.get(3)).get(1), 6)
	
			sellist = t.selective_list_test(false);
			expect("# selective_list_test=", Integer<- sellist.get(0), 1)
			expect("# selective_list_test=", Integer<- sellist.get(1), 2)
			expect("# selective_list_test=", Integer<- sellist.get(2), 4)
			expect("# selective_list_test=", Integer<- (List<-sellist.get(3)).get(0), 7)
			expect("# selective_list_test=", Integer<- (List<-sellist.get(3)).get(1), 8)
	
			sellist2:List = t.selective_list_test2(true)
			System.out.println( sellist2 )
	
			expect("# selective_list_test2=", Integer<- sellist2.get(0), 10)
			expect("# selective_list_test2=", Boolean<- sellist2.get(1), true)
			expect("# selective_list_test2=", Integer<- (List<-sellist2.get(2)).get(0), 0)
			expect("# selective_list_test2=", Boolean<- (List<-sellist2.get(2)).get(1), false)
			expect("# selective_list_test2=", Integer<- (List<-sellist2.get(2)).get(2), 10)
			expect("# selective_list_test2=", Boolean<- (List<-sellist2.get(2)).get(3), true)

			forlist:List = t.for_expr_test(5)
			System.out.println( forlist )
			
			expect("# for_expr_test=", Integer<- forlist.get(0), 0)
			expect("# for_expr_test=", Integer<- forlist.get(1), 1)
			expect("# for_expr_test=", Integer<- forlist.get(2), 2)
			expect("# for_expr_test=", Integer<- forlist.get(3), 3)
			expect("# for_expr_test=", Integer<- forlist.get(4), 4)
			
			
			forretlist:List = t.for_expr_ret_test(5)
			System.out.println( forretlist)
			
			expect("# for_expr_ret_test=", Integer<- forretlist.get(0), 0)
			expect("# for_expr_ret_test=", Integer<- forretlist.get(1), 1)
			expect("# for_expr_ret_test=", Integer<- forretlist.get(2), 2)
			expect("# for_expr_ret_test=", Integer<- forretlist.get(3), 3)
			expect("# for_expr_ret_test=", Integer<- forretlist.get(4), 4)


			forlistlist:List = t.for_expr_list_test(5)
			System.out.println( forlistlist )
			
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(0)).get(0), 0)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(0)).get(1), 1)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(1)).get(0), 1)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(1)).get(1), 2)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(2)).get(0), 2)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(2)).get(1), 3)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(3)).get(0), 3)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(3)).get(1), 4)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(4)).get(0), 4)
			expect("# for_expr_list_test=", Integer<- (List<-forlistlist.get(4)).get(1), 5)


			forforlist:List = t.forfor_expr_test(5)
			System.out.println( forforlist )
			
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(0)).get(0), 0)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(0)).get(1), 1)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(0)).get(2), 2)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(1)).get(0), 1)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(1)).get(1), 2)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(1)).get(2), 3)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(2)).get(0), 2)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(2)).get(1), 3)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(2)).get(2), 4)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(3)).get(0), 3)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(3)).get(1), 4)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(3)).get(2), 5)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(4)).get(0), 4)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(4)).get(1), 5)
			expect("# forfor_expr_test=", Integer<- (List<-forforlist.get(4)).get(2), 6)


			foriflist:List = t.forif_expr_test(5, true)
			System.out.println( foriflist )
			
			expect("# forif_expr_test=", Integer<- foriflist.get(0), 0)
			expect("# forif_expr_test=", Integer<- foriflist.get(1), 1)
			expect("# forif_expr_test=", Integer<- foriflist.get(2), 2)
			expect("# forif_expr_test=", Integer<- foriflist.get(3), 3)
			expect("# forif_expr_test=", Integer<- foriflist.get(4), 4)
	
			foriflist = t.forif_expr_test(5, false)
			System.out.println( foriflist )
			
			expect("# forif_expr_test=", Integer<- foriflist.get(0), 10)
			expect("# forif_expr_test=", Integer<- foriflist.get(1), 11)
			expect("# forif_expr_test=", Integer<- foriflist.get(2), 12)
			expect("# forif_expr_test=", Integer<- foriflist.get(3), 13)
			expect("# forif_expr_test=", Integer<- foriflist.get(4), 14)
	
			
			ifforlist:List = t.iffor_expr_test(5, true)
			System.out.println( ifforlist )
	
			expect("# iffor_expr_test=", Integer<- ifforlist.get(0), 100)
			expect("# iffor_expr_test=", Integer<- ifforlist.get(1), 101)
			expect("# iffor_expr_test=", Integer<- ifforlist.get(2), 102)
			expect("# iffor_expr_test=", Integer<- ifforlist.get(3), 103)
			expect("# iffor_expr_test=", Integer<- ifforlist.get(4), 104)
			
			ifforlist = t.iffor_expr_test(5, false)
			System.out.println( ifforlist )
			
			expect("# iffor_expr_test=", Integer<- ifforlist.get(0), 200)
			expect("# iffor_expr_test=", Integer<- ifforlist.get(1), 201)
			expect("# iffor_expr_test=", Integer<- ifforlist.get(2), 202)
			expect("# iffor_expr_test=", Integer<- ifforlist.get(3), 203)
			expect("# iffor_expr_test=", Integer<- ifforlist.get(4), 204)
	
			expect("# match_expr_test=", t.match_expr_test(1), 10)
			expect("# match_expr_test=", t.match_expr_test(2), 20)
			expect("# match_expr_test=", t.match_expr_test(3), 30)
			expect("# match_expr_test=", t.match_expr_test(4), 40)
	
			expect("# match_expr_ret_test=", t.match_expr_ret_test(1), 10)
			expect("# match_expr_ret_test=", t.match_expr_ret_test(2), 20)
			expect("# match_expr_ret_test=", t.match_expr_ret_test(3), 30)
			expect("# match_expr_ret_test=", t.match_expr_ret_test(4), 40)
	
			matchlist:List = t.match_expr_listtest(1)
			
			expect("# match_expr_listtest=", Integer<- matchlist.get(0), 10)
			expect("# match_expr_listtest=", Integer<- matchlist.get(1), 11)
	
			matchlist = t.match_expr_listtest(2)
			expect("# match_expr_listtest=", Integer<- matchlist.get(0), 20)
			expect("# match_expr_listtest=", Integer<- matchlist.get(1), 21)
	
			matchlist = t.match_expr_listtest(3)
			expect("# match_expr_listtest=", Integer<- matchlist.get(0), 30)
			expect("# match_expr_listtest=", Integer<- matchlist.get(1), 31)
	
			matchlist = t.match_expr_listtest(4)
			expect("# match_expr_listtest=", Integer<- matchlist.get(0), 40)
			expect("# match_expr_listtest=", Integer<- matchlist.get(1), 41)
	
			expect("# ifmatch_expr_test=", t.ifmatch_expr_test(true, 1), 100)
			expect("# ifmatch_expr_test=", t.ifmatch_expr_test(true, 2), 200)
			expect("# ifmatch_expr_test=", t.ifmatch_expr_test(true, 10), 300)
			expect("# ifmatch_expr_test=", t.ifmatch_expr_test(false, 10), 1000)
			
			matchlist = t.matchfor_expr_test(true, 1)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(0), 0)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(1), 1)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(2), 2)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(3), 3)
	
			matchlist = t.matchfor_expr_test(true, 2)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(0), 100)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(1), 101)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(2), 102)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(3), 103)
			
			matchlist = t.matchfor_expr_test(true, 100)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(0), 4)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(1), 5)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(2), 6)
			expect("# matchfor_expr_test=", Integer<- matchlist.get(3), 7)
			
			expect("# one_expr_func_test=", t.one_expr_func_test(), true)
		
			List oneexpr_list = t.one_expr_for(10)
			
			expect("# one_expr_for=", oneexpr_list.size(), 10)
			System.out.println( oneexpr_list )
	
			oneexpr_list = t.one_expr_for(20)
			expect("# one_expr_for=", oneexpr_list.size(), 20)
			System.out.println( oneexpr_list ) 
	
			expect("# super_test=", t.super_test(), true)
			
			expect("# operator_lval_assign_test=", t.operator_lval_assign_test(), true)
			
			expect("# static_member_test=", t.static_member_test(), true)
	
			expect("# postfix_plus_plus_test=", t.postfix_plus_plus_test(), true)
	
			expect("# unary_plusplus_test=", t.unary_plusplus_test(), true)
			
			expect("# exception_test=", t.exception_test(), true)
			
			expect("# cast_test=", t.cast_test(), true)
	
			expect("# type_test=", t.type_test(), true)
			
			expect("# test_map=", t.test_map(), true)
	
			expect("# recursive_test=", t.recursive_test(), true)
			
			expect("# typeinference_test=", t.typeinference_test(), true)
			
			expect("# thread_test=", t.thread_test(), true)
			
			expect("# anonyfunc_test=", t.anonyfunc_test(), true)
			
			expect("# closure_test=", t.clojure_test(), true)
	
			expect("# apply_test=", t.apply_test(), true)

		}
		catch Exception 
		{
			System.err.println(excp.getMessage())
		}	
	
	}


	static fn expect(str: String, rslt: int, expect:int) 
	- throws : Exception
	{
	
		System.out.println(str + rslt + " (expect: " + expect + ")")
		
	    if (rslt != expect) {
			throw Exception("--Test Failed")
      	}
	}
	
	
	static fn expect(str:String, rslt:boolean, expect:boolean) 
	- throws : Exception
	{

		System.out.println(str + rslt + " (expect: " + expect + ")")
		
	    if (rslt != expect) {
			throw Exception("--Test Failed")
      	}
	} 
	

	static fn expect(str:String, rslt:String, expect:String)
	- throws : Exception
	{
		System.out.println(str + rslt + " (expect: " + expect + ")")
		
	    if (!rslt.equals(expect)) {
			throw Exception("--Test Failed")
      	}
	} 
	

}







