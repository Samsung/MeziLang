
options {
  MULTI=true;
  STATIC=false;
  KEEP_LINE_COLUMN = true;
  NODE_DEFAULT_VOID = true;
  TRACK_TOKENS = true;
  DEBUG_PARSER = false;
  NODE_SCOPE_HOOK = false;
  VISITOR=true;
  NODE_CLASS = "LangUnitNode";
  VISITOR_DATA_TYPE = "Object";
  VISITOR_RETURN_TYPE = "Object";
  VISITOR_EXCEPTION = "mezic.compiler.CompileException";
  JAVA_UNICODE_ESCAPE=true;
  BUILD_NODE_FILES = true;
}


PARSER_BEGIN(Parser)



package mezic.parser;

import mezic.compiler.*;


public class Parser{


	public static void pError(String msg, Token t) throws ParseException
	{
		String exception_msg = msg ;
		throw new ParseException(exception_msg);
	}

	public static void debug(String msg)
	{
		//Token t = getToken(0);
		//System.out.println("["+msg+"] (line:"+t.beginLine+")"+t);
	}

	public static void debug(String ele, String type)
	{
		//Token t = getToken(0);
		//System.out.println("["+ele+":"+type+"] (line:"+t.beginLine+")"+t);
		//debug(ele, type, t);
	}

	public static void debug(String ele, String type, Token t)
	{
		//System.out.println("["+ele+":"+type+"] (line:"+t.beginLine+") '"+t+"'");
	}

    // Run the parser
    public static void main ( String args [ ] ) {

    }
  }



PARSER_END(Parser)

SKIP : {
 " "
|  "\t"
//|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
| "\\\n"
| "\\\r\n"
//| "#" : PREPROCESSOR_OUTPUT
}

/*
<PREPROCESSOR_OUTPUT> SKIP:
{
     "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
 "\\\n"
 |
 "\\\r\n"
 |
 < ~[] >
}
*/

TOKEN : {
   <INTEGER_LITERAL: <DECIMAL_LITERAL> | <HEX_LITERAL> | <OCTAL_LITERAL> >
|  <LONG_INTEGER_LITERAL: 	<DECIMAL_LITERAL> ["l","L"] | <HEX_LITERAL> ["l","L"] | <OCTAL_LITERAL> ["l","L"] >
|  <SHORT_LITERAL: 			<DECIMAL_LITERAL> ["s","S"] | <HEX_LITERAL> ["s","S"] | <OCTAL_LITERAL> ["s","S"] >
|  <BYTE_LITERAL: 			<DECIMAL_LITERAL> ["b","B"] | <HEX_LITERAL> ["b","B"] | <OCTAL_LITERAL> ["b","B"] >
|  <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  <#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  <FLOAT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F"]) | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F"]) | (["0"-"9"])+ <EXPONENT> (["f","F"]) | (["0"-"9"])+ (<EXPONENT>)? ["f","F"]>
|  <DOUBLE_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["d","D"]) | "." (["0"-"9"])+ (<EXPONENT>)? (["d","D"]) | (["0"-"9"])+ <EXPONENT> (["d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["d","D"]>
|  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  <CHARACTER_LITERAL:
	"\'"
	(	(~["\'","\\","\n","\r"])
		| ("\\"
			(
				["n","t","b","r","f","\\","\'","\""]
				| ["0"-"7"] (["0"-"7"])?
				| ["0"-"3"] ["0"-"7"] ["0"-"7"]
			)
		  )

//        | ("\\u"
//        	["0"-"9","A"-"F","a"-"f"]
//        	["0"-"9","A"-"F","a"-"f"]
//        	["0"-"9","A"-"F","a"-"f"]
//        	["0"-"9","A"-"F","a"-"f"]
//          )
	)
	"\'"
	>


|  <STRING_LITERAL:
	"\""
	(	 (~["\"","\\","\n","\r"])
		| ("\\"
			(
				["n","t","b","r","f","\\","\'","\""]
				| ["0"-"7"] (["0"-"7"])?
				| ["0"-"3"] ["0"-"7"] ["0"-"7"]
				| ( ["\n","\r"] | "\r\n")
			)
		  )

        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
	)*
	"\""
	>

|  <BOOLEAN_LITERAL: ("true"|"false") >
}

TOKEN : {
	  <LF: "\n">
	| <CONTINUE: "continue">
	| <VOLATILE: "volatile">
	| <REGISTER: "register">
	| <UNSIGNED: "unsigned">
	| <TYPEDEF: "typedef">
	| <DFLT: "default">
	//| <DOUBLE: "double">
	| <RETURN: "return">
	| <BREAK: "break">
	//| <FLOAT: "float">
	//| <SHORT: "short">
	| <ELSE: "else">
	| <CASE: "case">
	| <ENUM: "enum">
	//| <CHAR: "char">
	| <FOR: "for">
	| <IF: "if">
	| <NULL: "null">
	| <EXTENDS: "extends">
	| <IMPLEMENTS: "implements">
	//| <EXIT: 	"exit">
	| <CLASS: "class">
	| <METHOD: "method">
	| <FUNCTION: "fn">
	| <COLLECTION: "collection">
	| <REDUCE_DIRECTIVE: "->">
	| <MATCH: "match">
	| <LOOP: "loop">
	//| <MAP: "map">
	| <VAR: "var">
	| <SINGLETON: "singleton">
	| <STATIC: "static">
	//| <INTERNAL: "internal">

	| <INTERFACE: "interface">
	| <PUBLIC: "public">
	| <PROTECTED: "protected">
	| <PRIVATE: "private">
	| <CONST: "const">
	| <DOC: "doc">

    | <LANG_DUMMY: "__lang_dummy">
	| <PLUS: "+">
	| <MINUS: "-">
	| <MULTIPLY: "*">
	| <DIVISION: "/">
	| <REST: "%">
	| <EQUAL: "==">
	| <NOT_EQUAL: "!=">
	| <SMALLER: "<">
	| <BIGGER: ">">
	| <SMALLER_OR_EQUAL: "<=">
	| <BIGGER_OR_EQUAL: ">=">
	| <LOG_AND: "&&">
	| <LOG_OR: "||">
	| <UNARY_NOT: "!">
	| <UNARY_INVERSE: "~">
	| <PLUS_PLUS: "++">
	| <MINUS_MINUS: "--">
	| <INCLU_OR: "|">
	| <EXCLU_OR: "^">
	| <AND: "&">
	| <SHIFT_LEFT: "<<">
	| <SHIFT_RIGHT: ">>">
	| <ASSIGN: "=">
	| <DEF_ASSIGN: ":=">
	| <MULTIPLY_ASSIGN: "*=">
	| <DIVISION_ASSIGN: "/=">
	| <REST_ASSIGN: "%=">
	| <PLUS_ASSIGN: "+=">
	| <MINUS_ASSIGN: "-=">
	| <SHIFT_LEFT_ASSIGN: "<<=">
	| <SHIFT_RIGHT_ASSIGN: ">>=">
	| <AND_ASSIGN: "&=">
	| <EXCLU_OR_ASSIGN: "^=">
	| <INCLU_OR_ASSIGN: "|=">
	| <GET: "[]">
	| <SET: "[]=">
	/* additional C types */
	| <UINT8_t: "uint8_t">
	| <UINT16_t: "uint16_t">
	| <UINT32_t: "uint32_t">
	| <UINT64_t: "uint64_t">
	| <INT8_t: "int8_t">
	| <INT16_t: "int16_t">
	| <INT32_t: "int32_t">
	| <INT64_t: "int64_t">
	/* additional Java directives */
	| <ABSTRACT: "abstract">
	| <ASSERT: "assert">
	/*| <BOOLEAN: "boolean">*/
	//| <BYTE: "byte">
	| <CATCH: "catch">
	| <FINAL: "final">
	| <FINALLY: "finally">
	| <IMPORT: "import">
	| <INSTANCEOF: "instanceof">
	| <NATIVE: "native">
	//| <NEW: "new">
	| <PACKAGE: "package">
	| <STRICTFT: "strictfp">
	| <SUPER: "super">
	| <SYNCHRONIZED: "synchronized">
	| <THIS: "this">
	| <THROWS: "throws">
	| <THROW: "throw">
	| <TRANSIENT: "transient">
}

TOKEN : {
 <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  <#LETTER: ["?","A"-"Z","_","a"-"z"]>
|  <#DIGIT: ["0"-"9"]>
}



ASTTranslationUnit TranslationUnit() #TranslationUnit : {}
{
	TranslationUnitHeaderExpression()
	(LOOKAHEAD(2) TranslationUnitElement())+
	<EOF>
	{
		debug("TranslationUnit", "");
		return jjtThis;
	}
}


void TranslationUnitHeaderExpression() #TranslationUnitHeader : {}
{
	(
		[ <PACKAGE> NamedTypeExpression() ]
	)
}


void TranslationUnitElement()  : {}
{
	(
		LOOKAHEAD(2) <LF>
		|
		ImportExpression()
		|
		AssignmentExpression()
	) #TranslationUnitElement(>0)
}



void AccessCtrlExpression() #AccessCtrl : {}
{
	(
		<PUBLIC> | <PROTECTED>
	)
}


void ImportExpression() #Import : {}
{
	(
		ImportClassExpression()
		//| LOOKAHEAD(3) ImportPackageExpression()
	)
}


void ImportClassExpression() #ImportClass : {Token t = null;}
{
	(
		<IMPORT>
		(
		  	t = <IDENTIFIER> { jjtThis.appendNamedTypeToken(t.image); jjtThis.initAstToken(t); }
			( LOOKAHEAD(2) "." [(<LF>)+] t = <IDENTIFIER> { jjtThis.appendNamedTypeToken(t.image);} )*
			[ ".*" { jjtThis.appendNamedTypeToken("*");} ]
		)
	)
}




void TypeDefineExpression() #TypeDefine : {}
{
	(
		":" ( LOOKAHEAD(2) <LF>)* TypeExpression()
	)
}


void FunctionTypeExpression() #FunctionType : {}
{
	(
		  "f(" [ ParameterTypeStreamExpression() ] ")"
		[ LOOKAHEAD(2) ReduceTypeExpression() {  jjtThis.setHasReduceTypeNode(true); } ]
	)
}


void ParameterTypeStreamExpression() #ParameterTypeList : {}
{
	( TypeExpression() ( LOOKAHEAD(2) "," [(<LF>)+] TypeExpression() )* )
}


void NamedTypeExpression() #NamedType : {Token t = null;}
{
	(
		( t = <IDENTIFIER> { jjtThis.appendNamedTypeToken(t.image); jjtThis.initAstToken(t); }
			( LOOKAHEAD(2) "." [(<LF>)+] t = <IDENTIFIER> { jjtThis.appendNamedTypeToken(t.image);} )* )
	)
}


void StreamTypeExpression() #StreamType : {}
{
	(
		"{" "}"  // any type stream
		/*
		LOOKAHEAD(2) "{" "}"  // any type stream
		| LOOKAHEAD(2) "{" (TypeExpression())+ "}"    // fixed size stream
		| LOOKAHEAD(2) "{" "..." TypeExpression() "}"
		| LOOKAHEAD(2) MapTypeExpression()
		*/
	)
}


void MapTypeExpression() #MapType : {}
{
	(
		"{" ("[" <IDENTIFIER> "]" [ ":" TypeExpression() ] )+  "}"
	)
}


void TypeExpression() #Type : {}
{
	(
		  NamedTypeExpression()
		| StreamTypeExpression()
		| FunctionTypeExpression()
		| "(" TypeExpression() ")"
	) ( LOOKAHEAD(2) <GET> { jjtThis.incMapDimension(); }  ) *
}


// This Node is not used by parser.

void ApplyTypeExpression() #ApplyType : { }
{
	<LANG_DUMMY>
}



void SymbolNameExpression() #SymbolName : { Token t = null; }
{
	(
		[ AccessCtrlExpression() ]
		[
				<VAR>       { jjtThis.setVarType(LangUnitNode.VAR_T_VAR); }
			|	<CONST>     { jjtThis.setVarType(LangUnitNode.VAR_T_CONST); }
			|	<SINGLETON> { jjtThis.setVarType(LangUnitNode.VAR_T_SINGLETON); }
			|	<INTERFACE> { jjtThis.setVarType(LangUnitNode.VAR_T_INTERFACE); }
		]
		 (
			  t = <LOG_OR>		{ jjtThis.initAstToken(t); }
			| t = <LOG_AND>		{ jjtThis.initAstToken(t); }
			| t = <INCLU_OR>	{ jjtThis.initAstToken(t); }
			| t = <EXCLU_OR>	{ jjtThis.initAstToken(t); }
			| t = <AND> 		{ jjtThis.initAstToken(t); }
			| t = <EQUAL>		{ jjtThis.initAstToken(t); }
			| t = <NOT_EQUAL>	{ jjtThis.initAstToken(t); }
			| t = <SMALLER>		{ jjtThis.initAstToken(t); }
			| t = <BIGGER>		{ jjtThis.initAstToken(t); }
			| t = <SMALLER_OR_EQUAL>	{ jjtThis.initAstToken(t); }
			| t = <BIGGER_OR_EQUAL>		{ jjtThis.initAstToken(t); }
			| t = <SHIFT_LEFT>			{ jjtThis.initAstToken(t); }
			| t = <SHIFT_RIGHT>			{ jjtThis.initAstToken(t); }
			| t = <PLUS>		{ jjtThis.initAstToken(t); }
			| t = <MINUS>		{ jjtThis.initAstToken(t); }
			| t = <MULTIPLY>	{ jjtThis.initAstToken(t); }
			| t = <DIVISION>	{ jjtThis.initAstToken(t); }
			| t = <REST>		{ jjtThis.initAstToken(t); }
			| t = <GET>		{ jjtThis.initAstToken(t); }
			| t = <SET>		{ jjtThis.initAstToken(t); }
			| t = <MULTIPLY_ASSIGN> 	{ jjtThis.initAstToken(t); }
			| t = <DIVISION_ASSIGN> 	{ jjtThis.initAstToken(t); }
			| t = <REST_ASSIGN> 		{ jjtThis.initAstToken(t); }
			| t = <PLUS_ASSIGN> 		{ jjtThis.initAstToken(t); }
			| t = <MINUS_ASSIGN>		{ jjtThis.initAstToken(t); }
			| t = <SHIFT_LEFT_ASSIGN>	{ jjtThis.initAstToken(t); }
			| t = <SHIFT_RIGHT_ASSIGN>	{ jjtThis.initAstToken(t); }
			| t = <AND_ASSIGN> 			{ jjtThis.initAstToken(t); }
			| t = <EXCLU_OR_ASSIGN> 	{ jjtThis.initAstToken(t); }
			| t = <INCLU_OR_ASSIGN>		{ jjtThis.initAstToken(t); }
			| t = <SUPER>	{ jjtThis.initAstToken(t); }
			| t = <THIS>	{ jjtThis.initAstToken(t); }
			| t = <IDENTIFIER>  { jjtThis.initAstToken(t); }
		)
		[ LOOKAHEAD(2) TypeDefineExpression() ]
	)
}


void MetaDataExpression() #MetaData : {Token t = null;}
{
	(
		(
			  LOOKAHEAD(2) ( "-" MetaExtendsDataExpression() )
			| LOOKAHEAD(2) ( "-" MetaImplementsDataExpression() )
			//| LOOKAHEAD(2) ( "-" t = <IMPLEMENTS> ":" (LOOKAHEAD(2) <LF>)* TypeExpression() ("," (LOOKAHEAD(2) <LF>)* TypeExpression())* )
			| LOOKAHEAD(2) ( "-" t = <DOC> ":" (LOOKAHEAD(2) <LF>)* <STRING_LITERAL> )
			| ( "-" t = <IDENTIFIER> [ ":" <STRING_LITERAL> ] )
		)
	)
	{ jjtThis.initAstToken(t); }
}



void MetaExtendsDataExpression() #MetaExtendsData: { Token t = null; }
{
	(
		(
			t = <EXTENDS> ":" (LOOKAHEAD(2) <LF>)* TypeExpression()
		)
	)
	{ jjtThis.initAstToken(t); }
}



void MetaImplementsDataExpression() #MetaImplementsData: { Token t = null; }
{
	(
		(
			t = <IMPLEMENTS> ":" (LOOKAHEAD(2) <LF>)* TypeExpression() ("," (LOOKAHEAD(2) <LF>)* TypeExpression())*
		)
	)
	{ jjtThis.initAstToken(t); }
}



void StreamHeaderExpression() #StreamHeader : { Token t = null; jjtThis.initStreamForm(LangUnitNode.STREAMFORM_DFLT); }
{
	(
		[ AccessCtrlExpression() ]
		[ <CLASS> { jjtThis.initStreamForm(LangUnitNode.STREAMFORM_CLASS); } ]
		[ (<LF>)+ ]
		t = <IDENTIFIER>	{ jjtThis.initAstToken(t); }
	)
	// (LOOKAHEAD(2) <LF>)*
}


void ReduceTypeExpression() #ReduceType : {}
{
	[ (<LF>)+ ]
	(
		<REDUCE_DIRECTIVE> [ (<LF>)+ ] TypeExpression()
	)
	// (LOOKAHEAD(2) <LF>)*
}



void StreamSignatureExpression() #StreamSignature : {}
{
	(
		StreamHeaderExpression()
		(LOOKAHEAD(2) <LF>)*
		[ (MetaDataExpression() (LOOKAHEAD(2) <LF>)*)+ ]
	)
}


void StreamExpression() #Stream : {}
{
	// if 'StreamSignatureExpression' does not exist,
	// dummy 'StreamSignatureExpression' will be added by pre-processor 'ASTStream' visitor

	(
		[ LOOKAHEAD(2) StreamSignatureExpression() ]
		[ (<LF>)+ ]
		(
			StreamBlockExpression()
		)

		( LOOKAHEAD( (<LF>)+ <CATCH>) CatchExpression() )*
	)

	// (LOOKAHEAD(2) <LF>)*
}


void CatchExceptionListExpression() #CatchExceptionList : {}
{
	(
		NamedTypeExpression() ( LOOKAHEAD(2) "|" [(<LF>)+] NamedTypeExpression() )*
	)
}


void CatchExpression() #Catch : {}
{
	[ (<LF>)+ ]
	<CATCH> CatchExceptionListExpression()
	[ (<LF>)+ ]
	(
		StreamBlockExpression()
	)
}





void FunctionDefHdrExpression() #FunctionDefHdr :
	{
		Token t = null; jjtThis.initFuncForm(LangUnitNode.FUNCFORM_MEMBER);
	}
{
	(
		[ <STATIC> { jjtThis.initFuncForm(LangUnitNode.FUNCFORM_STATIC); } ]
		//[ <INTERNAL> ]
		[ AccessCtrlExpression() ]

		<FUNCTION>

		[( <LF> )+]

		[
			 t = <PLUS>		{ jjtThis.initAstToken(t); }
			| t = <MINUS>		{ jjtThis.initAstToken(t); }
			| t = <MULTIPLY>	{ jjtThis.initAstToken(t); }
			| t = <DIVISION>	{ jjtThis.initAstToken(t); }
			| t = <REST>		{ jjtThis.initAstToken(t); }
			| t = <INCLU_OR>	{ jjtThis.initAstToken(t); }
			| t = <EXCLU_OR>	{ jjtThis.initAstToken(t); }
			| t = <AND> 		{ jjtThis.initAstToken(t); }
			| t = <EQUAL>		{ jjtThis.initAstToken(t); }
			| t = <NOT_EQUAL>	{ jjtThis.initAstToken(t); }
			| t = <SMALLER>		{ jjtThis.initAstToken(t); }
			| t = <BIGGER>		{ jjtThis.initAstToken(t); }
			| t = <SMALLER_OR_EQUAL>	{ jjtThis.initAstToken(t); }
			| t = <BIGGER_OR_EQUAL>		{ jjtThis.initAstToken(t); }
			| t = <LOG_AND>		{ jjtThis.initAstToken(t); }
			| t = <LOG_OR>		{ jjtThis.initAstToken(t); }
			| t = <SHIFT_LEFT>			{ jjtThis.initAstToken(t); }
			| t = <SHIFT_RIGHT>			{ jjtThis.initAstToken(t); }
			| t = <GET>		{ jjtThis.initAstToken(t); }
			| t = <SET>		{ jjtThis.initAstToken(t); }
			| t = <MULTIPLY_ASSIGN> 	{ jjtThis.initAstToken(t); }
			| t = <DIVISION_ASSIGN> 	{ jjtThis.initAstToken(t); }
			| t = <REST_ASSIGN> 		{ jjtThis.initAstToken(t); }
			| t = <PLUS_ASSIGN> 		{ jjtThis.initAstToken(t); }
			| t = <MINUS_ASSIGN>		{ jjtThis.initAstToken(t); }
			| t = <SHIFT_LEFT_ASSIGN>	{ jjtThis.initAstToken(t); }
			| t = <SHIFT_RIGHT_ASSIGN>	{ jjtThis.initAstToken(t); }
			| t = <AND_ASSIGN> 			{ jjtThis.initAstToken(t); }
			| t = <EXCLU_OR_ASSIGN> 	{ jjtThis.initAstToken(t); }
			| t = <INCLU_OR_ASSIGN>		{ jjtThis.initAstToken(t); }
			| t = <IDENTIFIER>	{ jjtThis.initAstToken(t); }
		]
	)
}


void FuncDefMetaDataExpression() #FuncDefMetaData : {Token t = null;}
{
	(
		(
			  LOOKAHEAD(2) ( "-" MetaThrowsDataExpression() )
			| LOOKAHEAD(2) ( "-" t = <DOC> ":" (LOOKAHEAD(2) <LF>)* <STRING_LITERAL> )
			| ( "-" t = <IDENTIFIER> [ ":" <STRING_LITERAL> ] )
		)
	)
	{ jjtThis.initAstToken(t); }
}



void MetaThrowsDataExpression() #MetaThrowsData: { Token t = null; }
{
	(
		t = <THROWS> ":" (LOOKAHEAD(2) <LF>)* TypeExpression() ("," (LOOKAHEAD(2) <LF>)* TypeExpression())*
	)
	{ jjtThis.initAstToken(t); }
}



void FunctionDefSignatureExpression() #FunctionDefSignature : {}
{
	(
		FunctionDefHdrExpression()
		"("
		 	[ LOOKAHEAD(2) ParameterStreamExpression() ]
		 	[ (<LF>)+ ]
		")"
		[ LOOKAHEAD(2) ReduceTypeExpression() {  jjtThis.setHasReduceTypeNode(true); } ]
		(LOOKAHEAD(2) <LF>)*
		[ (FuncDefMetaDataExpression() (LOOKAHEAD(2) <LF>)*)+ ]
	)
}



void FunctionDefExpression() #FunctionDef : {}
{
	(
		FunctionDefSignatureExpression()
		[ (<LF>)+ ]
		(
			( LOOKAHEAD(3) StreamBlockExpression()
			| <DEF_ASSIGN>
				OneExprFuncBodyExpression() )
		)
	)

}


void OneExprFuncBodyExpression() #OneExprFuncBody : {}
{
	 (LOOKAHEAD(2) <LF>)*
	(
		Expression()
	)

}


void StreamBlockElementHdr() #StreamBlockElementHdr: {}
{
	<LANG_DUMMY>
}


void StreamBlockElementExpression()  : {}
{
	(
		Expression()
	)# StreamBlockElement(>0)

}


void StreamBlockHdrExpression() #StreamBlockHdr : {}
{
	"{"
}


void StreamBlockExpression() #StreamBlock : {}
{
	(
		StreamBlockHdrExpression()
			(
				LOOKAHEAD(2)<LF>
				|
				LOOKAHEAD(2) (StreamBlockElementExpression() [";" | ","])
			)*
		"}"
	)
}


void ParameterExpression() #Parameter : {}
{
	[ (<LF>)+ ]
	(
		// it supports default parameter...
		SymbolNameExpression() [ <ASSIGN> AssignmentExpression()]
	)

}


void ParameterStreamExpression() #ParameterList : { }
{
	(
		ParameterExpression()
			( "," ParameterExpression() )*
	)

}

void IfConditionExpression() #IfCondExpr : {}
{
	(
		<IF> "("
			(LOOKAHEAD(2) <LF>)*
			Expression()
			(LOOKAHEAD(2) <LF>)*
		")"
	)

}


void IfCaseExpression() #IfCaseExpr : {}
{
	(
		IfConditionExpression()
		(LOOKAHEAD(2) <LF>)*
		Expression()
	)

}


void ElseExpression() #ElseExpr : {}
{
	(
		//(LOOKAHEAD(2) <LF>)* // CAUTION !! : Else should not have prefix <LF>
		<ELSE>
	)

}



void IfExpression() #IfExpr : {}
{
	(
		IfCaseExpression()
		[
			LOOKAHEAD( [(<LF>)+] ElseExpression()) [(<LF>)+] ElseExpression()
			(LOOKAHEAD(2) <LF>)*
			Expression()

		]
	)

}


void MatchExpression() #MatchExpr : {}
{
	(
	MatchHeadExpression()
		( LOOKAHEAD([(<LF>)+] MatchCaseExpression()) [(<LF>)+] MatchCaseExpression() )+

	)

}


void MatchHeadExpression() #MatchHeadExpr : {}
{
	(
		<MATCH> "("
			(LOOKAHEAD(2) <LF>)*
		 	Expression()
		 	(LOOKAHEAD(2) <LF>)*
		")"
	)

}


void MatchCaseExpression() #MatchCaseExpr : {}
{
	(
		MatchCaseHeadExpression()  ":"
			( LOOKAHEAD(2) <LF>)*
			 [  LOOKAHEAD(2) MatchCaseBodyExpression() ]
	)

}

void MatchCaseHeadExpression() #MatchCaseHeadExpr : {Token t = null;}
{
	(
		( t = <CASE> Constant() | t = <DFLT> )
	)
	{
		jjtThis.initAstToken(t);
	}
}


void MatchCaseBodyExpression() #MatchCaseBodyExpr : {}
{
	 Expression()
}




void CstyleLoopExpression() #CstyleLoopExpr : {}
{
	(
		<FOR> "("  (LOOKAHEAD(2) <LF>)*
			ForInitExpression() ";"  (LOOKAHEAD(2) <LF>)*
				ForConditionExpression() ";" (LOOKAHEAD(2) <LF>)*
					ForActionExpression() ")"  (LOOKAHEAD(2) <LF>)*

			ForBodyExpression()

	)


	/* pre-processor changed this loop structure to as follows

	 	      CstyleLoopExpression                            CstyleLoopExpression
                       |                                              |
          +-------+----------+--------+      --->           +-------+----------+--------+
		 /        |          |         \                   /        |          |         \
	 	/         |          |          \                 /         |          |          \
	ForInit  ForCondition  ForAction   ForBody         ForInit   ForBody     ForAction   ForCondition

	*/
}


/*
void StreamLoopExpression() #StreamLoopExpr : {}
{

	(
		<MAP> "(" StreamExpression() ")" // list can be delivered as variable ..?
			ForBodyExpression()
	)

}
*/


void LoopHdrExpression() #LoopHdrExpr: {}
{
	<LANG_DUMMY>
}


void LoopExpression() #LoopExpr : {}
{
	(
	 CstyleLoopExpression()
	//|  LOOKAHEAD(3) StreamLoopExpression()
	)

}


void Expression() #void : {}
{
	(
	   AssignmentExpression()
	  | JumpExpression()
	)

}



void ForInitExpression() #ForInit : { }
{
	( [ AssignmentExpression() ] )

}


void ForConditionExpression() #ForCondition : { }
{
	( [ AssignmentExpression() ] )

}


void ForActionExpression() #ForAction : { }
{
	( [ AssignmentExpression() ] )

}

void ForBodyExpression() #ForBody : { }
{
	Expression()
}



void JumpExpression() #JumpExpr : {Token t = null;}
{
	(
		(
		  t = <CONTINUE>
		| t = <BREAK>
		//| t = <BREAK>  [ LOOKAHEAD(2) Expression() ]
		// is this correct ?
		| LOOKAHEAD(3) t = <RETURN> (LOOKAHEAD(2) <LF>)+
		| LOOKAHEAD(3) t = <RETURN> Expression()
		//| t = <RETURN> (LOOKAHEAD(2) <LF>)* [ LOOKAHEAD(2) Expression() ]
		//| t = <EXIT>   [ LOOKAHEAD(2) Expression() ]
		| t = <THROW>  (LOOKAHEAD(2) <LF>)* [ LOOKAHEAD(2) Expression() ]
		)

	)
	{
		jjtThis.initAstToken(t);
	}
}


void AssignmentExpression() : { }
{
	(
		(
		   LOOKAHEAD(ReferenceExpression() AssignmentOperator() AssignmentExpression()  )
		   	ReferenceExpression() AssignmentOperator() AssignmentExpression()
		  |LOOKAHEAD(3) ConditionalExpression()
		)

	) #Assignment(>1)
}


void AssignmentOperator() #AssignmentOperator : { Token t = null; }
{
	(
		(
		t = <ASSIGN> 		 		{  }
		| t = <MULTIPLY_ASSIGN> 	{  }
		| t = <DIVISION_ASSIGN> 	{  }
		| t = <REST_ASSIGN> 		{  }
		| t = <PLUS_ASSIGN> 		{  }
		| t = <MINUS_ASSIGN>		{  }
		| t = <SHIFT_LEFT_ASSIGN>	{  }
		| t = <SHIFT_RIGHT_ASSIGN>	{  }
		| t = <AND_ASSIGN> 			{  }
		| t = <EXCLU_OR_ASSIGN> 	{  }
		| t = <INCLU_OR_ASSIGN>		{  }
		)
		( LOOKAHEAD(2) <LF>)*
	)
	{
		jjtThis.initAstToken(t);
	}
}


void ConditionalExpression()  : { Token t = null; }
{
	(
		(
		  LogicalORExpression() /*  [ ( t = "?" { jjtThis.initAstToken(t); } {   }
								) Expression() ":" ConditionalExpression() ] */
		)

	) #Conditional(>1)
	{ debug("ConditionalExpression", ""); }
}



void LogicalORExpression() : { Token t = null;  }
{
	(

		(
			LogicalANDExpression() [ LOOKAHEAD( <LOG_OR> (<LF>)* LogicalORExpression() )
									 ( t = <LOG_OR> { jjtThis.initAstToken(t); }
									 ) (LOOKAHEAD(2) <LF>)* LogicalORExpression() ]
		)

	) #LogicalOR(>1)
	{ debug("LogicalORExpression", ""); }
}


void LogicalORHdrExpression() #LogicalORHdr: {}
{
	<LANG_DUMMY>
}


void LogicalANDExpression() : { Token t = null;  }
{
	(

		(
			InclusiveORExpression() [ LOOKAHEAD( <LOG_AND> (<LF>)* LogicalANDExpression() )
									  ( t = <LOG_AND> { jjtThis.initAstToken(t); }
									  ) (LOOKAHEAD(2) <LF>)* LogicalANDExpression() ]
		)

	) #LogicalAND(>1)
	{ debug("LogicalANDExpression", ""); }
}



void LogicalANDHdrExpression() #LogicalANDHdr: {}
{
	<LANG_DUMMY>
}





void InclusiveORExpression() : { Token t = null;  }
{
	(

		(
		ExclusiveORExpression() [ LOOKAHEAD( <INCLU_OR> (<LF>)* InclusiveORExpression() )
								  ( t = <INCLU_OR> { jjtThis.initAstToken(t); }
								  ) (LOOKAHEAD(2) <LF>)* InclusiveORExpression() ]
		)

	) #InclusiveOR(>1)
	{ debug("InclusiveORExpression", ""); }
}


void ExclusiveORExpression() : { Token t = null;  }
{
	(

		(
			ANDExpression() [ LOOKAHEAD( <EXCLU_OR> (<LF>)* ExclusiveORExpression() )
							  ( t = <EXCLU_OR> { jjtThis.initAstToken(t); }
							  ) (LOOKAHEAD(2) <LF>)* ExclusiveORExpression() ]
		)

	) #ExclusiveOR(>1)
	{ debug("ExclusiveORExpression", ""); }
}


void ANDExpression() : { Token t = null;  }
{
	(

		(
			EqualityExpression() [  LOOKAHEAD( <AND> (<LF>)* ANDExpression() )
									( t = <AND> { jjtThis.initAstToken(t); }
									) (LOOKAHEAD(2) <LF>)* ANDExpression() ]
		)

	) #AND(>1)
	{ debug("ANDExpression", ""); }
}


void EqualityExpression() : { Token t = null; }
{
	(

		(
			RelationalExpression() [ LOOKAHEAD( (<EQUAL> | <NOT_EQUAL>) (<LF>)* EqualityExpression() )
									( t = <EQUAL> { jjtThis.initAstToken(t); }
									| t = <NOT_EQUAL> { jjtThis.initAstToken(t); }
									) (LOOKAHEAD(2) <LF>)* EqualityExpression() ]
		)

	) #Equality(>1)
	{ debug("EqualityExpression", ""); }
}


void RelationalExpression() : { Token t = null; }
{
	(

		(
			ShiftExpression() [ LOOKAHEAD( (<SMALLER>|<BIGGER>|<SMALLER_OR_EQUAL>|<BIGGER_OR_EQUAL>)
											(<LF>)* RelationalExpression()
										 )
								( t = <SMALLER> 		 	{ jjtThis.initAstToken(t); }
								| t = <BIGGER> 				{ jjtThis.initAstToken(t); }
								| t = <SMALLER_OR_EQUAL>  	{ jjtThis.initAstToken(t); }
								| t = <BIGGER_OR_EQUAL> 	{ jjtThis.initAstToken(t); }
								) (LOOKAHEAD(2) <LF>)* RelationalExpression() ]
		)

	) #Relational(>1)
	{ debug("RelationalExpression", ""); }
}


void ShiftExpression() : { Token t = null; }
{
	(

		(
			AdditiveExpression() [ LOOKAHEAD( (<SHIFT_LEFT> | <SHIFT_RIGHT>) (<LF>)* ShiftExpression() )
									( t = <SHIFT_LEFT> { jjtThis.initAstToken(t); }
									| t = <SHIFT_RIGHT> { jjtThis.initAstToken(t); }
									) (LOOKAHEAD(2) <LF>)* ShiftExpression() ]
		)

	) #Shift(>1)
	{ debug("ShiftExpression", ""); }
}


void AdditiveExpression() : {  Token t = null; }
{
	(

		(
			MultiplicativeExpression() [ LOOKAHEAD( (<PLUS>|<MINUS>) (<LF>)* AdditiveExpression() )
										( t = <PLUS> { jjtThis.initAstToken(t); }
										| t = <MINUS> { jjtThis.initAstToken(t); }
										) (LOOKAHEAD(2) <LF>)* AdditiveExpression() ]
		)

	) #Additive(>1)
	{
		debug("AdditiveExpression", "");
	}
}


void MultiplicativeExpression() : { Token t = null; }
{
	(

		(
			ExplicitCastExpression() [  LOOKAHEAD( (<MULTIPLY> | <DIVISION> | <REST>) (<LF>)* MultiplicativeExpression() )
								( t=<MULTIPLY> { jjtThis.initAstToken(t); }
								| t=<DIVISION> { jjtThis.initAstToken(t); }
								| t=<REST> { jjtThis.initAstToken(t); }
								) (LOOKAHEAD(2) <LF>)* MultiplicativeExpression() ]
		)

	) #Multiplicative(>1)
	{
		debug("MultiplicativeExpression", "");
	}
}


void ExplicitCastExpression()  : {}
{
	(

		(
			LOOKAHEAD( TypeExpression() "<-" ExplicitCastExpression() )  TypeExpression() "<-" ExplicitCastExpression()
			| UnaryExpression()
		)

	) #ExplicitCast (>1)
	{
		debug("ExplicitCastExpression", "");
	}
}


void UnaryExpression(): { Token t = null; }
{
	(
		(
			  LOOKAHEAD(3) t = <PLUS_PLUS> 		UnaryExpression()	{ jjtThis.initAstToken(t); }
			| LOOKAHEAD(3) t = <MINUS_MINUS> 	UnaryExpression() 	{ jjtThis.initAstToken(t); }
			| LOOKAHEAD(3) t = <PLUS> 			UnaryExpression()	{ jjtThis.initAstToken(t); }
			| LOOKAHEAD(3) t = <MINUS> 			UnaryExpression()	{ jjtThis.initAstToken(t); }
			| LOOKAHEAD(3) t = <UNARY_NOT> 		UnaryExpression()	{ jjtThis.initAstToken(t); }
			| LOOKAHEAD(3) t = <UNARY_INVERSE> 	UnaryExpression()	{ jjtThis.initAstToken(t); }
			| LOOKAHEAD(3) PostfixExpression()

			//| t = <NULL> "(" AssignmentExpression() ")" { jjtThis.initAstToken(t); }
			//| UnaryOperator() ExplicitCastExpression() /* unary operator '!a' '-a' */
			                                   // constant "Unary' should be resolved in compiler!!
		)

	)  #Unary (>1 || t != null)
	{
	 	debug("UnaryExpression", "");
	}
}



void UnaryOperator() #UnaryOperator : { Token t = null; }
{
	(
		(
		// Not Supported
		t = "&" 				{pError("unary '&' directive is not supported", token);}
		| t = "*"				{pError("unary '*' directive is not supported", token);}
		| t = <PLUS> 			{pError("unary '+' directive is not supported", token);}
		| t = <MINUS> 			{ }
		| t = <UNARY_NOT> 		{ }
		| t = <UNARY_INVERSE> 	{ }
		)

	)
	{
		jjtThis.initAstToken(t);
	}
}



void PostfixExpression() : { Token t = null; }
{
	(
		(
		ReferenceExpression()	[   LOOKAHEAD(2)
									( 	  t = <PLUS_PLUS> 	{ jjtThis.initAstToken(t); }
										| t = <MINUS_MINUS> { jjtThis.initAstToken(t); }
									)
								]
		)

	) #Postfix(t != null)

}


void ReferenceExpression() #Reference : {}
{
	(
	  	(
			  AccessExpression()
		)
		[ LOOKAHEAD(3) SubReferenceExpression() ]
	)

}



void SubReferenceExpression() #SubReference : { Token t = null; }
{
	(
		(
			 MapAccessExpression()
			| InvokeExpression()
			| "." ( LOOKAHEAD(2) <LF> )* SubAccessExpression()

		)
		[ LOOKAHEAD(2) SubReferenceExpression() ]
	)

}


void MapAccessExpression() #MapAccess : {}
{
	( "[" Expression() [ (<LF>)+ ] "]" ) ( LOOKAHEAD(2) <GET>  { jjtThis.incMapDimension(); }  ) *
}



void InvokeExpression() #Invoke : {}
{
	InvokeHdrExpression() [ LOOKAHEAD(2) ArgumentExpressionList() ] [ (<LF>)+ ] ")"
}



void InvokeHdrExpression() #InvokeHdr : {}
{
	"("
}


void AccessExpression() #Access : {}
{
	PrimaryExpression()
}


void SubAccessExpression() #SubAccess : {}
{
	//AtomExpression()
	PrimaryExpression()
}


// !! CAUTION : Primary Expression can have Container !!
void PrimaryExpression() #void : { }
{
	(
	AtomExpression()
	| LOOKAHEAD(3) "(" (LOOKAHEAD(2) <LF>)* AssignmentExpression() (LOOKAHEAD(2) <LF>)* ")"
	)

}


void AtomExpression() #void : { }
{
	(
	  LOOKAHEAD(2) SymbolNameExpression()
	| Constant()
	//| LOOKAHEAD(2) StreamExpression()
	| LOOKAHEAD([ StreamSignatureExpression() ] [ (<LF>)+ ] StreamBlockExpression()) StreamExpression()
	| LOOKAHEAD(2) FunctionDefExpression()
	| IfExpression()
	| MatchExpression()
	| LoopExpression()
	)

}


void ArgumentHdr() #ArgumentHdr: {}
{
	<LANG_DUMMY>
}


void ArgumentExpression() # Argument: {}
{
	( LOOKAHEAD(2) <LF> )*
	AssignmentExpression()

}


void ArgumentExpressionList() #ArgumentList: {}
{
	(
		ArgumentExpression() ( "," ArgumentExpression() )*
	)
}




void Constant() #Constant : { Token t = null; }
{
  (
     t = <INTEGER_LITERAL>
   | t = <CHARACTER_LITERAL>
   | t = <SHORT_LITERAL>
   | t = <BYTE_LITERAL>
   | t = <LONG_INTEGER_LITERAL>
   | t = <STRING_LITERAL>
   | t = <BOOLEAN_LITERAL>
   | t = <FLOAT_LITERAL>
   | t = <DOUBLE_LITERAL>
   | t = <NULL>
  )

  {
	jjtThis.initAstToken(t);
  }
}

